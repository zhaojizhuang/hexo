{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"8ca07c6d7b4ff1dd8ab4f14fde521ea3ce4eb84a","modified":1588776098133},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1588776098173},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1588776098173},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1588776098173},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1588776098176},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1588776098176},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1588776098176},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1588776098176},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1588776098176},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1588776098177},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1588776098177},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1588776098177},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1588776098177},{"_id":"themes/next/_config.yml","hash":"5ed06cdb8504485fbe7825c21b2b63fb9ab42d36","modified":1588783349736},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1588776098178},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1588776098178},{"_id":"themes/next/package.json","hash":"42d4e836442a0f12330a92769429cb530547989a","modified":1588776098194},{"_id":"source/_posts/.DS_Store","hash":"c7baf33ab7c4cdaeaff2eed5f4f1df0086c7b40b","modified":1588780621857},{"_id":"source/_posts/2017-06-11-Docker.md","hash":"1717440bf1d8d15dc300b5f1b2010dd67c525d4d","modified":1588085337915},{"_id":"source/_posts/2017-06-10-java-create-thread.md","hash":"afe6b66a1ee0db2831981f519eea7931de58099c","modified":1588085337915},{"_id":"source/_posts/2017-06-12-cisco-platform.md","hash":"c5cbe651dc909858a71fdc5efd45b3e72bf2dfc3","modified":1588085337916},{"_id":"source/_posts/2019-07-10-zuoertingfeng.md","hash":"30d00a6319570a11420f637d79216aa4b2bc6884","modified":1588177568690},{"_id":"source/_posts/2020-02-10-fen-bu-shi-suo.md","hash":"05e2e174aa6dbe57b7974080d9ff8c3bc13366dd","modified":1588174974626},{"_id":"source/_posts/2020-03-25-container-network.md","hash":"124e76d9b78b079b8e44f6b68367b9edf8cf3513","modified":1588174767087},{"_id":"source/_posts/2020-04-02-go shen ru fen xi.md","hash":"94f90dee1094f4e3b31160b1cef5b8139c8d2790","modified":1588780408839},{"_id":"source/_posts/2020-03-28-k8s-iptageles.md","hash":"851d35ac4551902152677413fc93fcbba870b198","modified":1588175401510},{"_id":"source/_posts/client-go_informer.md","hash":"c6f224e25e97068ab0fafa12c478df63c3534339","modified":1588778298237},{"_id":"source/about/index.md","hash":"47ebac194991c6e942a068302513f9961dc079d6","modified":1588779461459},{"_id":"source/categories/index.md","hash":"879e52f6c2cd86c1d9ae2c9d8d62e646c9635446","modified":1588778803915},{"_id":"source/tags/index.md","hash":"457e90037eda22d87dde3876aacc1bc58242f011","modified":1588778272713},{"_id":"source/ebook/index.md","hash":"bc542775a8d53dffe8ec3aee3da69c7523fbd232","modified":1588776098156},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1588776098174},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1588776098174},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1588776098175},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1588776098175},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1588776098178},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1588776098178},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1588776098178},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1588776098178},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1588776098179},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1588776098179},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1588776098179},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1588776098179},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1588776098179},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1588776098180},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1588776098180},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1588776098180},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1588776098180},{"_id":"themes/next/languages/zh-Hans.yml","hash":"536569a0b3dfc69c786f1a5ef605dfb48059e88c","modified":1588776098180},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1588776098181},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1588776098181},{"_id":"themes/next/layout/_layout.swig","hash":"735660d05ca423c3474ae6d19a183cc845c3f2a2","modified":1588781904258},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1588776098192},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1588776098193},{"_id":"themes/next/layout/google_adsense.swig","hash":"5b64bb3c36aa2347cd69e30d1c5d779c42c20090","modified":1588776098193},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1588776098193},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1588776098193},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1588776098193},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1588776098193},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1588776098194},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1588776098194},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1588776098194},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1588776098245},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1588776098245},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1588776098246},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588776098215},{"_id":"source/_posts/images/.DS_Store","hash":"b8f6e680b37895193b10caf8284ed49fcbae99a6","modified":1588345011621},{"_id":"source/_posts/images/bmap.png","hash":"0d2b84a6b78cde8928257e39d3dc21e23050a856","modified":1588344999642},{"_id":"source/_posts/images/docker_cs.png","hash":"9e1887c988bf4a56b90c6bd259052f0edf47f9a1","modified":1588085337918},{"_id":"source/_posts/images/what.jpg","hash":"df84e37cfbdee52472a3fb26bb2a0db8ec161956","modified":1588085337919},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1588776098181},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1588776098181},{"_id":"themes/next/layout/_macro/google_adsense.swig","hash":"5b64bb3c36aa2347cd69e30d1c5d779c42c20090","modified":1588776098182},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1588776098182},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1588776098182},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1588776098182},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1588776098182},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"65fe5c71a6924180c40215962cb0ceb8ef93e79a","modified":1588776098183},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1588776098183},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d474fb436d399a762eb1d5615950a0a328dd3d48","modified":1588781503558},{"_id":"themes/next/layout/_partials/footer.swig","hash":"2ebff63b26a15f8a3bd9a32dbeb09bf1543648e7","modified":1588782981910},{"_id":"themes/next/layout/_partials/head.swig","hash":"8f819113b88ee7e2b7349366b276e73d0c41ef8b","modified":1588776098183},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1588776098184},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1588776098184},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1588776098184},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1588776098184},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1588776098185},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1588776098185},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1588776098186},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1588776098190},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1588776098190},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1588776098190},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1588776098190},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1588776098190},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1588776098190},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1588776098191},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1588776098215},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1588776098215},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1588776098216},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1588776098216},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1588776098216},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1588776098216},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1588776098216},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1588776098216},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1588776098217},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1588776098217},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1588776098217},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1588776098217},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1588776098217},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1588776098217},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1588776098218},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1588776098218},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1588776098218},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1588776098218},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1588776098218},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1588776098195},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1588776098195},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1588776098195},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1588776098195},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1588776098195},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1588776098195},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1588776098196},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1588776098196},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1588776098196},{"_id":"source/_posts/images/docker_frame.jpg","hash":"a99d8b9f6d0738735d74df9f383a5c4c68fa50f4","modified":1588085337918},{"_id":"source/_posts/images/dockeruse.png","hash":"e0ebd05e2a3a2a82e82f886a6fecc4831bf3ed55","modified":1588085337918},{"_id":"source/_posts/images/hmap.png","hash":"a2bd4053b129fa51fb9b73e6ea7a0156d7e053c3","modified":1588345048196},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588776098186},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588776098186},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588776098209},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588776098209},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588776098210},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588776098214},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588776098215},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1588776098183},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1588776098184},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1588776098184},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1588776098184},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1588776098185},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1588776098185},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1588776098185},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1588776098185},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1588776098185},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1588776098186},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1588776098186},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1588776098186},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1588776098187},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1588776098187},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1588776098187},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1588776098187},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1588776098187},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1588776098187},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1588776098187},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1588776098187},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1588776098188},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1588776098188},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1588776098188},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1588776098188},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1588776098188},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1588776098189},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1588776098189},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1588776098189},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1588776098189},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1588776098189},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1588776098189},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1588776098189},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"cd47989f957b06ed778b2137478bfb344187abc0","modified":1588776098190},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1588776098190},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1588776098191},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1588776098192},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1588776098192},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1588776098192},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1588776098208},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1588776098209},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1588776098209},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1588776098210},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1588776098214},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1588776098214},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1588776098215},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1588776098215},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1588776098218},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1588776098219},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1588776098219},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1588776098219},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1588776098219},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1588776098219},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1588776098219},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1588776098220},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1588776098220},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1588776098220},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1588776098220},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1588776098223},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1588776098225},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1588776098226},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1588776098228},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1588776098228},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1588776098229},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1588776098229},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1588776098229},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1588776098230},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1588776098230},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1588776098230},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1588776098230},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1588776098235},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1588776098235},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1588776098236},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1588776098236},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1588776098236},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1588776098236},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1588776098236},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1588776098237},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1588776098237},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1588776098237},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1588776098237},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1588776098237},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1588776098237},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1588776098238},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1588776098238},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1588776098238},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1588776098238},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1588776098238},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1588776098238},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1588776098239},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1588776098239},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1588776098239},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1588776098239},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1588776098239},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1588776098239},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1588776098240},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1588776098240},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1588776098243},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1588776098243},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1588776098245},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1588776098245},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1588776098245},{"_id":"source/_posts/images/docker-run.png","hash":"d7c0313ef45357af2301c9e98e2f4fe556433875","modified":1588085337917},{"_id":"source/_posts/images/docker-version.png","hash":"be9830dfb079aebc423630f4ffcae9deb3a5923d","modified":1588085337919},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1588776098235},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1588776098191},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1588776098191},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1588776098196},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1588776098197},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1588776098197},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1588776098197},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1588776098197},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1588776098199},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1588776098203},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1588776098207},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1588776098207},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1588776098207},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1588776098207},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1588776098207},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1588776098208},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1588776098208},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1588776098210},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1588776098211},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1588776098211},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1588776098211},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1588776098211},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1588776098212},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1588776098212},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1588776098212},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1588776098213},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1588776098213},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1588776098213},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1588776098213},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1588776098213},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1588776098213},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1588776098214},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1588776098214},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"596239ffa01da1dab45f49335adbf13f5069ac2e","modified":1588776098214},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1588776098214},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1588776098214},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1588776098220},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1588776098223},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1588776098223},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1588776098226},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1588776098226},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1588776098226},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1588776098226},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1588776098227},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1588776098227},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1588776098228},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1588776098228},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1588776098228},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1588776098229},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1588776098229},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1588776098230},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1588776098231},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1588776098231},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1588776098243},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1588776098243},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1588776098222},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1588776098222},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1588776098234},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1588776098234},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1588776098244},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1588776098197},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1588776098197},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1588776098198},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1588776098198},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1588776098198},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1588776098198},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1588776098198},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1588776098198},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1588776098198},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1588776098199},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1588776098199},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1588776098199},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1588776098199},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1588776098199},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1588776098199},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1588776098200},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1588776098200},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1588776098200},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"46616e2c6f42652a3f4bb86d520998ed2f2546ec","modified":1588776098200},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1588776098200},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1588776098201},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1588776098201},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1588776098201},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1588776098201},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1588776098201},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1588776098201},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1588776098201},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1588776098202},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1588776098202},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1588776098202},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1588776098202},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1588776098202},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1588776098202},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1588776098202},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1588776098203},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1588776098203},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1588776098203},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1588776098203},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1588776098203},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1588776098204},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1588776098203},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1588776098204},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1588776098204},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1588776098204},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1588776098204},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1588776098205},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1588776098205},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1588776098205},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1588776098205},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1588776098205},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1588776098206},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1588776098206},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1588776098206},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1588776098206},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1588776098206},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1588776098206},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1588776098206},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1588776098207},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1588776098212},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1588776098212},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1588776098213},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1588776098221},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1588776098221},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1588776098221},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1588776098221},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1588776098222},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1588776098227},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1588776098227},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1588776098227},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1588776098227},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1588776098227},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1588776098228},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1588776098231},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1588776098234},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1588776098232},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1588776098225},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1588776098242},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1588776098233},{"_id":"public/atom.xml","hash":"065dfd98b5bdbbf79081a416a90cf7ce672ccb9d","modified":1588780513370},{"_id":"public/search.xml","hash":"e8f2fb2bc2a93f6b3b98d61b4be3156e4f312e72","modified":1588780513372},{"_id":"public/about/index.html","hash":"d4e538e731a8b4f0f0811dac4be27d5f039fc807","modified":1588783434023},{"_id":"public/categories/index.html","hash":"b8f62313c1f959d6dfd9dd9ff021c986470aadc4","modified":1588783358829},{"_id":"public/tags/index.html","hash":"a40f340bc62a470d5f30057d5411494e94306d7c","modified":1588783434022},{"_id":"public/ebook/index.html","hash":"8a734e0d07dafe0e56cbc08742ce674c831923b2","modified":1588783358829},{"_id":"public/2019/05/17/client-go_informer/index.html","hash":"e05fe794ee1fa176169a8d407287345cfd349a7b","modified":1588779377086},{"_id":"public/archives/index.html","hash":"42abc731cf5adf00f3dbe939bea6a7906adf8ef8","modified":1588783358830},{"_id":"public/archives/2017/index.html","hash":"89e640b7c77fd34fff15ffe788973b1ecc1de920","modified":1588783358830},{"_id":"public/archives/2019/index.html","hash":"aa7c35e72c1bf47d8b033c07dae85051e5092be7","modified":1588783358830},{"_id":"public/archives/2019/05/index.html","hash":"687d46de2ac3465989d56986f763885d3acebc94","modified":1588779377086},{"_id":"public/archives/2019/07/index.html","hash":"d2976274b60651f52279577a37fa2c3802228342","modified":1588783358830},{"_id":"public/archives/2020/index.html","hash":"f7be32cda79237633798c231116d391eb885c01a","modified":1588783358830},{"_id":"public/archives/2020/02/index.html","hash":"c5c6e3bb5407c687567eff4695527b694484d6fa","modified":1588783358830},{"_id":"public/archives/2020/03/index.html","hash":"63768e401c94a5a064644036771c654208542f75","modified":1588783358830},{"_id":"public/archives/2020/04/index.html","hash":"b39caac845ff9fce51f30be95abead9213a1bc12","modified":1588783358830},{"_id":"public/index.html","hash":"a269f37ae557f9d042f12c2f303e6ee49ee4f264","modified":1588783358831},{"_id":"public/page/2/index.html","hash":"d8ea113719a37450c0c60d39158c52acb1589270","modified":1588783358831},{"_id":"public/tags/client-go/index.html","hash":"0b63725add62e6e1c5629f278b088d99b58aafbe","modified":1588779377087},{"_id":"public/tags/informer/index.html","hash":"32e651a007e64130297bd7bbe2391ff0a8502308","modified":1588779377087},{"_id":"public/2020/04/02/2020-04-02-go shen ru fen xi/index.html","hash":"c51c33adc183f5b201a702404ffc74152f6277a4","modified":1588780417025},{"_id":"public/2020/03/28/2020-03-28-k8s-iptageles/index.html","hash":"858bd543778cd2ea525c063eed17563aa20d022d","modified":1588780417025},{"_id":"public/2020/03/25/2020-03-25-container-network/index.html","hash":"61e36dacebfb6f83c6bcec9a1638a8e485fdfa2c","modified":1588780417025},{"_id":"public/2020/02/10/2020-02-10-fen-bu-shi-suo/index.html","hash":"729cda3d397bb1c6c66a5a3a34174942ba86dd1c","modified":1588780417025},{"_id":"public/2019/07/10/2019-07-10-zuoertingfeng/index.html","hash":"ffcd419bd81a8b8237d8aa3f6f0b4e13ff768318","modified":1588780417025},{"_id":"public/2017/06/12/2017-06-12-cisco-platform/index.html","hash":"a9a07231abafef14af3fe455601459c9fd174b32","modified":1588780417025},{"_id":"public/2017/06/11/2017-06-11-Docker/index.html","hash":"1bbdf343ac7cbecda724c05e5224bebe094a51ff","modified":1588780417025},{"_id":"public/2017/06/10/2017-06-10-java-create-thread/index.html","hash":"b4f7d0d0632fe768ebce87e2eb601c1cd34482da","modified":1588780417026},{"_id":"public/categories/docker/index.html","hash":"e8113126f99a33399ca0db2d5bd1946c06f8f878","modified":1588783358831},{"_id":"public/categories/Java/index.html","hash":"40cc2d5fbe2f5deb6b655fb5bb5ac8d0ab33e168","modified":1588783358831},{"_id":"public/categories/数据中心/index.html","hash":"ffdad1c4677742268766742e010585a5ff4346c9","modified":1588783358831},{"_id":"public/categories/分布式/index.html","hash":"7dc983a3d47ecd046df9e8c54d8d2db068f2e254","modified":1588783358831},{"_id":"public/categories/k8s/index.html","hash":"4f628af0f32856fd7b32481e963a836a374add75","modified":1588783358831},{"_id":"public/categories/Go/index.html","hash":"55df478b22ec6b169f70c5ac67a9c84f0250ba77","modified":1588783358831},{"_id":"public/archives/2017/06/index.html","hash":"30523b0d1f7cf3d050fd7adc2bd39d39e1a0fbed","modified":1588783358830},{"_id":"public/tags/docker/index.html","hash":"f2dacc154f42b0bf22ce5e9566096fe2a86f5bee","modified":1588783358831},{"_id":"public/tags/线程-java/index.html","hash":"3d0c6bec6b8f192039f5b82b34b1e797c79af7b0","modified":1588783358831},{"_id":"public/tags/Analytics/index.html","hash":"dd58830e8e82c03b1ceaf0273ed0fc07bea8d0c5","modified":1588783358831},{"_id":"public/tags/分布式-go/index.html","hash":"b94941d6032e34deb4f7b6bd4fe82f540732bb22","modified":1588780417027},{"_id":"public/tags/分布式-人生思考/index.html","hash":"d499efb73aa42252a49e8ab859de6a554148cb7d","modified":1588780417027},{"_id":"public/tags/k8s-容器网络/index.html","hash":"d8b9286c249145243413be8191926ced9fad5ee4","modified":1588780417027},{"_id":"public/tags/Go-epoll-linux/index.html","hash":"2245e58699bd949d2c4dcbce64fbba8711a0d29b","modified":1588777455791},{"_id":"public/tags/k8s-iptables/index.html","hash":"c67b629eaca19c365a97fc573a5386a87e5d65c7","modified":1588780417027},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1588777455802},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1588777455802},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1588777455803},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1588777455803},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1588777455803},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1588777455803},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1588777455803},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1588777455803},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1588777455803},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1588777455803},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1588777455803},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1588777455803},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1588777455803},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1588777455803},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1588777455804},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1588777455804},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1588777455804},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1588777455804},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1588777455804},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1588777455804},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1588777455804},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1588777455804},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1588777455804},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1588777455804},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1588777455804},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1588777455804},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1588777455804},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1588777455805},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1588777455805},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1588777455805},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1588777455805},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1588777455805},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1588777456596},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1588777456601},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1588777456630},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1588777456630},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1588777456630},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1588777456630},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1588777456630},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1588777456630},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1588777456631},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1588777456631},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1588777456631},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1588777456631},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1588777456631},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1588777456631},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1588777456631},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1588777456631},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1588777456631},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1588777456631},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1588777456631},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1588777456631},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1588777456631},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1588777456632},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1588777456632},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1588777456632},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1588777456632},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1588777456632},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1588777456632},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1588777456632},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1588777456632},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1588777456632},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1588777456632},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1588777456632},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1588777456632},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1588777456633},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1588777456633},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1588777456633},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1588777456633},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1588777456633},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1588777456633},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1588777456633},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1588777456633},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1588777456633},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1588777456633},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1588777456633},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1588777456633},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1588777456634},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1588777456634},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1588777456634},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1588777456634},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1588777456634},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1588777456634},{"_id":"public/css/main.css","hash":"742306f973f5505f442c3e0723abe8225f4aa957","modified":1588777456634},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1588777456634},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1588777456634},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1588777456634},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1588777456634},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1588777456634},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1588777456634},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1588777456635},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1588777456635},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1588777456636},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1588777456636},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1588777456636},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1588777456636},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1588777456636},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1588777456636},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1588777456637},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1588777456637},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1588777456637},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1588777456637},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1588777456637},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1588777456637},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1588777456637},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1588777456637},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1588777456641},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1588777456641},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1588777456662},{"_id":"public/tags/Go/index.html","hash":"35dae3d1b6357d5a4c65c61301fa721496bb3171","modified":1588783358831},{"_id":"public/tags/epoll/index.html","hash":"69f35d14a71fcf5d202a1dbdc23a0dca14c9d19c","modified":1588783358831},{"_id":"public/tags/linux/index.html","hash":"af35c3f80222628fd8871504ca64ed7c819fadb8","modified":1588783358831},{"_id":"source/about/categories/index.md","hash":"2d531927ae07c511f8ce2c2054291d1e18747a50","modified":1588778428006},{"_id":"public/about/categories/index.html","hash":"83abad36bd609728ee6f86434ee563b9bfa8fd75","modified":1588778761055},{"_id":"source/_posts/cisco-platform.md","hash":"208bee8a599abe5748ca748d2f1f7f01c11aeb16","modified":1588780507050},{"_id":"source/_posts/Docker.md","hash":"1b839160d3dd9ed5859c2f99a73d29059f782c1b","modified":1588780507050},{"_id":"source/_posts/container-network.md","hash":"9517541d3f43127da86bc4ffdc8672c8876954c2","modified":1588780507050},{"_id":"source/_posts/fen-bu-shi-suo.md","hash":"20a3938e02f020072a6270096167d9fe0474de2d","modified":1588780507047},{"_id":"source/_posts/go shen ru fen xi.md","hash":"94f90dee1094f4e3b31160b1cef5b8139c8d2790","modified":1588780488209},{"_id":"source/_posts/java-create-thread.md","hash":"48afe450216d06a29dd2a7796eaffd63a66fa4bf","modified":1588780507050},{"_id":"source/_posts/zuoertingfeng.md","hash":"a82f19db2d57558ed48e068a99c4e3d555a0a704","modified":1588780507050},{"_id":"source/_posts/k8s-iptageles.md","hash":"10511f2a123d55440304987e08b4b68ce89dc820","modified":1588780507050},{"_id":"public/tags/k8s/index.html","hash":"a3ee6c8eb4a87bd108abb9758c1c4aaa797e064e","modified":1588783358831},{"_id":"public/tags/go/index.html","hash":"65ea1af498d1712abb780cd8dadf5bb341708aa9","modified":1588783358831},{"_id":"public/tags/iptables/index.html","hash":"38ac337986428a941f6a3e2caf32644846640816","modified":1588783358831},{"_id":"public/2020/04/02/go shen ru fen xi/index.html","hash":"c9227108d0a208d11960bf8c1af4fdf190c7816a","modified":1588783358829},{"_id":"public/2020/03/28/k8s-iptageles/index.html","hash":"a28fd1ebe7fd43f9ca9da3bf36b97861cc242ce9","modified":1588783358829},{"_id":"public/2020/02/10/fen-bu-shi-suo/index.html","hash":"bee6f37ac7164aca1ca5feafc48fabf616cb6d29","modified":1588783358829},{"_id":"public/2020/03/25/container-network/index.html","hash":"143a8f4f25f9a1b7d72461d0f4c53b0c67ed8be7","modified":1588783358829},{"_id":"public/2019/07/10/zuoertingfeng/index.html","hash":"810b2de99d42ad17c4cfe24438ec5bac59463ee8","modified":1588783358829},{"_id":"public/2017/06/12/cisco-platform/index.html","hash":"fb1e85b4ba6e2232f9882d252a081975e886f0f9","modified":1588783358830},{"_id":"public/2017/06/11/Docker/index.html","hash":"5722ae35bc98e8a14d3b830686db3fe275e23228","modified":1588783358830},{"_id":"public/2017/06/10/java-create-thread/index.html","hash":"b2564b9a4d7ce717aa3c2e3eb01aa39b875c18c1","modified":1588783358830},{"_id":"public/tags/容器网络/index.html","hash":"adf78d5bf26665e829afdc959cea67b0607ee8a3","modified":1588783358831},{"_id":"public/tags/分布式/index.html","hash":"06142b11d34a57ac6f4187da8a1eb51833b314f0","modified":1588783358831},{"_id":"public/tags/人生思考/index.html","hash":"80815ddc6b4bc6ff1913a64cf2cf52de90af0504","modified":1588783358831},{"_id":"source/favicon.ico","hash":"5e13a1eda3f3c0530d04857b87e89f320476d6ba","modified":1586186368000},{"_id":"public/favicon.ico","hash":"5e13a1eda3f3c0530d04857b87e89f320476d6ba","modified":1588780701944}],"Category":[{"name":"docker","_id":"ck9vh2nwf0004h9fl5o1hcswc"},{"name":"Java","_id":"ck9vh2nwq0009h9fl4sbzzlms"},{"name":"数据中心","_id":"ck9vh2nwz000fh9flaclmewdk"},{"name":"分布式","_id":"ck9vh2nx6000lh9fl1cw31qod"},{"name":"k8s","_id":"ck9vh2nx8000ph9fl7f61h7gk"},{"name":"Go","_id":"ck9vh2nx9000th9fl23wx7uc0"}],"Data":[],"Page":[{"title":"壮哥的个人博客","date":"2018-12-08T08:46:18.000Z","_content":" \n赵吉壮，目前就职于华为 Cloud BU\n专注于 k8s Go 云原生\n\n### 联系\n\n博客：[@壮哥的学习记录](http://zhaojizhuang.github.io/)\n微博：[@chumper](https://weibo.com/zhaojizhuang)\ncsdn：[@Kernel_Momo](https://blog.csdn.net/power886)\nGitHub：[@zhaojizhuang](https://github.com/zhaojizhuang)\n","source":"about/index.md","raw":"---\ntitle: 壮哥的个人博客\ndate: 2018-12-08 16:46:18\n---\n \n赵吉壮，目前就职于华为 Cloud BU\n专注于 k8s Go 云原生\n\n### 联系\n\n博客：[@壮哥的学习记录](http://zhaojizhuang.github.io/)\n微博：[@chumper](https://weibo.com/zhaojizhuang)\ncsdn：[@Kernel_Momo](https://blog.csdn.net/power886)\nGitHub：[@zhaojizhuang](https://github.com/zhaojizhuang)\n","updated":"2020-05-06T15:37:41.459Z","path":"about/index.html","_id":"ck9vh2nw90001h9fll8jnjp4b","comments":1,"layout":"page","content":"<p>赵吉壮，目前就职于华为 Cloud BU<br>专注于 k8s Go 云原生</p>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><p>博客：<a href=\"http://zhaojizhuang.github.io/\" target=\"_blank\" rel=\"noopener\">@壮哥的学习记录</a><br>微博：<a href=\"https://weibo.com/zhaojizhuang\" target=\"_blank\" rel=\"noopener\">@chumper</a><br>csdn：<a href=\"https://blog.csdn.net/power886\" target=\"_blank\" rel=\"noopener\">@Kernel_Momo</a><br>GitHub：<a href=\"https://github.com/zhaojizhuang\" target=\"_blank\" rel=\"noopener\">@zhaojizhuang</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>赵吉壮，目前就职于华为 Cloud BU<br>专注于 k8s Go 云原生</p>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><p>博客：<a href=\"http://zhaojizhuang.github.io/\" target=\"_blank\" rel=\"noopener\">@壮哥的学习记录</a><br>微博：<a href=\"https://weibo.com/zhaojizhuang\" target=\"_blank\" rel=\"noopener\">@chumper</a><br>csdn：<a href=\"https://blog.csdn.net/power886\" target=\"_blank\" rel=\"noopener\">@Kernel_Momo</a><br>GitHub：<a href=\"https://github.com/zhaojizhuang\" target=\"_blank\" rel=\"noopener\">@zhaojizhuang</a></p>\n"},{"title":"tags","date":"2018-12-08T08:46:27.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-12-08 16:46:27\ntype: \"tags\"\n---\n","updated":"2020-05-06T15:17:52.713Z","path":"tags/index.html","_id":"ck9vh2o3u0019h9flpjbh9s1f","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"电子书","date":"2019-12-08T10:17:56.000Z","_content":"","source":"ebook/index.md","raw":"---\ntitle: 电子书\ndate: 2019-12-08 18:17:56\n---\n","updated":"2020-05-06T14:41:38.156Z","path":"ebook/index.html","comments":1,"layout":"page","_id":"ck9vh2o3w001ah9flyzbvs2ov","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2017-07-10T08:36:26.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-07-10 16:36:26\ntype: \"categories\"\ncomments: false\n---\n","updated":"2020-05-06T15:28:02.910Z","path":"categories/index.html","_id":"ck9vhvara0000srflzl9nznwy","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"Java 中的并发","date":"2017-06-10T14:40:18.000Z","author":"zhaojizhuang","mathjax":true,"_content":"\n\n## Java 中的并发\n### 如何创建一个线程\n\n按 Java 语言规范中的说法，创建线程只有一种方式，就是创建一个 Thread 对象。而从 HotSpot 虚拟机的角度看，创建一个虚拟机线程 有两种方式，一种是创建 Thread 对象，另一种是创建 一个本地线程，加入到虚拟机线程中。\n\n如果从 Java 语法的角度。有两种方法。\n\n第一是继承 Thread 类，实现 run 方法，并创建子类对象。\n\n```java\n\n    public void startThreadUseSubClass() {\n        class MyThread extends Thread {\n            public void run() {\n                System.out.println(\"start thread using Subclass of Thread\");\n            }\n        }\n        MyThread thread = new MyThread();\n        thread.start();\n    }\n```\n\n另一种是传递给 Thread 构造函数一个 Runnable 对象。\n\n```java\n\n    public void startThreadUseRunnalbe() {\n        Thread thread = new Thread(new Runnable() {\n            public void run() {\n                System.out.println(\"start thread using runnable\");\n            }\n        });\n        thread.start();\n    }\n```\n\n当然， Runnalbe 对象，也不是只有这一种形式，例如如果我们想要线程执行时返回一个值，就需要用到另一种 Runnalbe 对象，它 对原来的 Runnalbe 对象进行了包装。\n\n```java\n    public void startFutureTask() {\n        FutureTask<Integer> task = new FutureTask<>(new Callable<Integer>() {\n            public Integer call() {\n                return 1;\n            }\n        });\n\n        new Thread(task).start();\n\n        try {\n            Integer result = task.get();\n            System.out.println(\"future result \" + result);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n    }\n ```\n\n### 结束线程\n\n#### wait 与 sleep\n\nsleep 会使得当前线程休眠一段时间，但并不会释放已经得到的锁。\n\nwait 会阻塞住，并释放已经得到的锁。一直到有人调用 notify 或者 notifyAll，它会重新尝试得到锁，然后再唤醒。\n\n### 线程池\n\n#### 好处\n\n- 复用\n\n\n线程池中有一系列线程，这些线程在执行完任务后，并不会被销毁，而会从任务队列中取出任务，执行这些任务。这样，就避免为每个任务 都创建线程，销毁线程。 在有大量短命线程的场景下，如果创建线程和销毁线程的时间比线程执行任务的时间还长，显然是不划算的，这时候，使用线程池就会有明显 的好处。\n\n- 流控\n\n\n同时，可以设置线程数目，这样，线程不会增大到影响系统整体性能的程度。当任务太多时，可以在队列中排队， 如果有空闲线程，他们会从队列中取出任务执行。\n\n#### 使用\n\n- 线程数目\n\n\n那么，线程的数目要设置成多少呢？这需要根据任务类型的不同来设置，假如是大量计算型的任务，他们不会阻塞，那么可以将线程数目设置 为处理器数目。而如果任务中涉及大量IO，有些线程会阻塞住，这样就要根据阻塞线程数目与运行线程数目的比例，以及处理器数目来设置 线程总数目。例如阻塞线程数目与运行线程数目之比为n, 处理器数目为p，那么可以设置 n * (p + 1) 个线程，保证有 n 个线程处于运行 状态。\n\n- Executors\n\n\nJDK 的 java.util.concurrent.Executors 类提供了几个静态的方法，用于创建不同类型的线程池。\n\n```java\n\nExecutorService service = Executors.newFixedThreadPool(10);\nArrayList<Future<Integer>> results = new ArrayList<>();\nfor (int i = 0; i < 14; i++) {\n    Future<Integer> r = service.submit(new Callable<Integer>() {\n        public Integer call() {\n        return new Random().nextInt();\n    });\n    results.add(r);\n}\n\n```\nnewFixedThreadPool 可以创建固定数目的线程，一旦创建不会自动销毁线程，即便长期没有任务。除非显式关闭线程池。如果任务队列中有任务，就取出任务执行。\n\n另外，还可以使用 newCachedThreadPool 方法创建一个不设定固定线程数目的线程池，它有一个特性，线程完成任务后，如果一分钟之内又有新任务，就会复用这个线程执行新任务。如果超过一分钟还没有任务执行，就会自动销毁。\n\n另外，还提供了 newSingleThreadExecutor 创建有一个工作线程的线程池。\n\n### 原理\nJDK 中的线程池通过 HashSet 存储工作者线程，通过 BlockingQueue 来存储待处理任务。\n\n通过核心工作者数目(corePoolSize) 和 最大工作者数目(maximumPoolSize) 来确定如何处理任务。如果当前工作者线程数目 小于核心工作者数目，则创建一个工作者线程执行这个任务。否则，将这个任务放入待处理队列。如果入队失败，再看看当前工作 者数目是不是小于最大工作者数目，如果小于，则创建工作者线程执行这个任务。否则，拒绝执行这个任务。\n\n另外，如果待处理队列中没有任务要处理，并且工作者线程数目超过了核心工作者数目，那么，需要减少工作者线程数目。\n","source":"_posts/java-create-thread.md","raw":"---\nlayout: post\ntitle:  \"Java 中的并发\"\ndate:   2017-06-10 22:40:18 +0800\ncategories: Java\ntags:  线程 java\nauthor: zhaojizhuang\nmathjax: true\n---\n\n\n## Java 中的并发\n### 如何创建一个线程\n\n按 Java 语言规范中的说法，创建线程只有一种方式，就是创建一个 Thread 对象。而从 HotSpot 虚拟机的角度看，创建一个虚拟机线程 有两种方式，一种是创建 Thread 对象，另一种是创建 一个本地线程，加入到虚拟机线程中。\n\n如果从 Java 语法的角度。有两种方法。\n\n第一是继承 Thread 类，实现 run 方法，并创建子类对象。\n\n```java\n\n    public void startThreadUseSubClass() {\n        class MyThread extends Thread {\n            public void run() {\n                System.out.println(\"start thread using Subclass of Thread\");\n            }\n        }\n        MyThread thread = new MyThread();\n        thread.start();\n    }\n```\n\n另一种是传递给 Thread 构造函数一个 Runnable 对象。\n\n```java\n\n    public void startThreadUseRunnalbe() {\n        Thread thread = new Thread(new Runnable() {\n            public void run() {\n                System.out.println(\"start thread using runnable\");\n            }\n        });\n        thread.start();\n    }\n```\n\n当然， Runnalbe 对象，也不是只有这一种形式，例如如果我们想要线程执行时返回一个值，就需要用到另一种 Runnalbe 对象，它 对原来的 Runnalbe 对象进行了包装。\n\n```java\n    public void startFutureTask() {\n        FutureTask<Integer> task = new FutureTask<>(new Callable<Integer>() {\n            public Integer call() {\n                return 1;\n            }\n        });\n\n        new Thread(task).start();\n\n        try {\n            Integer result = task.get();\n            System.out.println(\"future result \" + result);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n    }\n ```\n\n### 结束线程\n\n#### wait 与 sleep\n\nsleep 会使得当前线程休眠一段时间，但并不会释放已经得到的锁。\n\nwait 会阻塞住，并释放已经得到的锁。一直到有人调用 notify 或者 notifyAll，它会重新尝试得到锁，然后再唤醒。\n\n### 线程池\n\n#### 好处\n\n- 复用\n\n\n线程池中有一系列线程，这些线程在执行完任务后，并不会被销毁，而会从任务队列中取出任务，执行这些任务。这样，就避免为每个任务 都创建线程，销毁线程。 在有大量短命线程的场景下，如果创建线程和销毁线程的时间比线程执行任务的时间还长，显然是不划算的，这时候，使用线程池就会有明显 的好处。\n\n- 流控\n\n\n同时，可以设置线程数目，这样，线程不会增大到影响系统整体性能的程度。当任务太多时，可以在队列中排队， 如果有空闲线程，他们会从队列中取出任务执行。\n\n#### 使用\n\n- 线程数目\n\n\n那么，线程的数目要设置成多少呢？这需要根据任务类型的不同来设置，假如是大量计算型的任务，他们不会阻塞，那么可以将线程数目设置 为处理器数目。而如果任务中涉及大量IO，有些线程会阻塞住，这样就要根据阻塞线程数目与运行线程数目的比例，以及处理器数目来设置 线程总数目。例如阻塞线程数目与运行线程数目之比为n, 处理器数目为p，那么可以设置 n * (p + 1) 个线程，保证有 n 个线程处于运行 状态。\n\n- Executors\n\n\nJDK 的 java.util.concurrent.Executors 类提供了几个静态的方法，用于创建不同类型的线程池。\n\n```java\n\nExecutorService service = Executors.newFixedThreadPool(10);\nArrayList<Future<Integer>> results = new ArrayList<>();\nfor (int i = 0; i < 14; i++) {\n    Future<Integer> r = service.submit(new Callable<Integer>() {\n        public Integer call() {\n        return new Random().nextInt();\n    });\n    results.add(r);\n}\n\n```\nnewFixedThreadPool 可以创建固定数目的线程，一旦创建不会自动销毁线程，即便长期没有任务。除非显式关闭线程池。如果任务队列中有任务，就取出任务执行。\n\n另外，还可以使用 newCachedThreadPool 方法创建一个不设定固定线程数目的线程池，它有一个特性，线程完成任务后，如果一分钟之内又有新任务，就会复用这个线程执行新任务。如果超过一分钟还没有任务执行，就会自动销毁。\n\n另外，还提供了 newSingleThreadExecutor 创建有一个工作线程的线程池。\n\n### 原理\nJDK 中的线程池通过 HashSet 存储工作者线程，通过 BlockingQueue 来存储待处理任务。\n\n通过核心工作者数目(corePoolSize) 和 最大工作者数目(maximumPoolSize) 来确定如何处理任务。如果当前工作者线程数目 小于核心工作者数目，则创建一个工作者线程执行这个任务。否则，将这个任务放入待处理队列。如果入队失败，再看看当前工作 者数目是不是小于最大工作者数目，如果小于，则创建工作者线程执行这个任务。否则，拒绝执行这个任务。\n\n另外，如果待处理队列中没有任务要处理，并且工作者线程数目超过了核心工作者数目，那么，需要减少工作者线程数目。\n","slug":"java-create-thread","published":1,"updated":"2020-05-06T15:55:07.050Z","_id":"ck9viuwe40000bbflbpmcaen9","comments":1,"photos":[],"link":"","content":"<h2 id=\"Java-中的并发\"><a href=\"#Java-中的并发\" class=\"headerlink\" title=\"Java 中的并发\"></a>Java 中的并发</h2><h3 id=\"如何创建一个线程\"><a href=\"#如何创建一个线程\" class=\"headerlink\" title=\"如何创建一个线程\"></a>如何创建一个线程</h3><p>按 Java 语言规范中的说法，创建线程只有一种方式，就是创建一个 Thread 对象。而从 HotSpot 虚拟机的角度看，创建一个虚拟机线程 有两种方式，一种是创建 Thread 对象，另一种是创建 一个本地线程，加入到虚拟机线程中。</p>\n<p>如果从 Java 语法的角度。有两种方法。</p>\n<p>第一是继承 Thread 类，实现 run 方法，并创建子类对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startThreadUseSubClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"start thread using Subclass of Thread\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MyThread thread = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">    thread.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另一种是传递给 Thread 构造函数一个 Runnable 对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startThreadUseRunnalbe</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"start thread using runnable\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    thread.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然， Runnalbe 对象，也不是只有这一种形式，例如如果我们想要线程执行时返回一个值，就需要用到另一种 Runnalbe 对象，它 对原来的 Runnalbe 对象进行了包装。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startFutureTask</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    FutureTask&lt;Integer&gt; task = <span class=\"keyword\">new</span> FutureTask&lt;&gt;(<span class=\"keyword\">new</span> Callable&lt;Integer&gt;() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(task).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Integer result = task.get();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"future result \"</span> + result);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ExecutionException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"结束线程\"><a href=\"#结束线程\" class=\"headerlink\" title=\"结束线程\"></a>结束线程</h3><h4 id=\"wait-与-sleep\"><a href=\"#wait-与-sleep\" class=\"headerlink\" title=\"wait 与 sleep\"></a>wait 与 sleep</h4><p>sleep 会使得当前线程休眠一段时间，但并不会释放已经得到的锁。</p>\n<p>wait 会阻塞住，并释放已经得到的锁。一直到有人调用 notify 或者 notifyAll，它会重新尝试得到锁，然后再唤醒。</p>\n<h3 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h3><h4 id=\"好处\"><a href=\"#好处\" class=\"headerlink\" title=\"好处\"></a>好处</h4><ul>\n<li>复用</li>\n</ul>\n<p>线程池中有一系列线程，这些线程在执行完任务后，并不会被销毁，而会从任务队列中取出任务，执行这些任务。这样，就避免为每个任务 都创建线程，销毁线程。 在有大量短命线程的场景下，如果创建线程和销毁线程的时间比线程执行任务的时间还长，显然是不划算的，这时候，使用线程池就会有明显 的好处。</p>\n<ul>\n<li>流控</li>\n</ul>\n<p>同时，可以设置线程数目，这样，线程不会增大到影响系统整体性能的程度。当任务太多时，可以在队列中排队， 如果有空闲线程，他们会从队列中取出任务执行。</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><ul>\n<li>线程数目</li>\n</ul>\n<p>那么，线程的数目要设置成多少呢？这需要根据任务类型的不同来设置，假如是大量计算型的任务，他们不会阻塞，那么可以将线程数目设置 为处理器数目。而如果任务中涉及大量IO，有些线程会阻塞住，这样就要根据阻塞线程数目与运行线程数目的比例，以及处理器数目来设置 线程总数目。例如阻塞线程数目与运行线程数目之比为n, 处理器数目为p，那么可以设置 n * (p + 1) 个线程，保证有 n 个线程处于运行 状态。</p>\n<ul>\n<li>Executors</li>\n</ul>\n<p>JDK 的 java.util.concurrent.Executors 类提供了几个静态的方法，用于创建不同类型的线程池。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ExecutorService service = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">ArrayList&lt;Future&lt;Integer&gt;&gt; results = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">14</span>; i++) &#123;</span><br><span class=\"line\">    Future&lt;Integer&gt; r = service.submit(<span class=\"keyword\">new</span> Callable&lt;Integer&gt;() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Random().nextInt();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    results.add(r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>newFixedThreadPool 可以创建固定数目的线程，一旦创建不会自动销毁线程，即便长期没有任务。除非显式关闭线程池。如果任务队列中有任务，就取出任务执行。</p>\n<p>另外，还可以使用 newCachedThreadPool 方法创建一个不设定固定线程数目的线程池，它有一个特性，线程完成任务后，如果一分钟之内又有新任务，就会复用这个线程执行新任务。如果超过一分钟还没有任务执行，就会自动销毁。</p>\n<p>另外，还提供了 newSingleThreadExecutor 创建有一个工作线程的线程池。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>JDK 中的线程池通过 HashSet 存储工作者线程，通过 BlockingQueue 来存储待处理任务。</p>\n<p>通过核心工作者数目(corePoolSize) 和 最大工作者数目(maximumPoolSize) 来确定如何处理任务。如果当前工作者线程数目 小于核心工作者数目，则创建一个工作者线程执行这个任务。否则，将这个任务放入待处理队列。如果入队失败，再看看当前工作 者数目是不是小于最大工作者数目，如果小于，则创建工作者线程执行这个任务。否则，拒绝执行这个任务。</p>\n<p>另外，如果待处理队列中没有任务要处理，并且工作者线程数目超过了核心工作者数目，那么，需要减少工作者线程数目。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java-中的并发\"><a href=\"#Java-中的并发\" class=\"headerlink\" title=\"Java 中的并发\"></a>Java 中的并发</h2><h3 id=\"如何创建一个线程\"><a href=\"#如何创建一个线程\" class=\"headerlink\" title=\"如何创建一个线程\"></a>如何创建一个线程</h3><p>按 Java 语言规范中的说法，创建线程只有一种方式，就是创建一个 Thread 对象。而从 HotSpot 虚拟机的角度看，创建一个虚拟机线程 有两种方式，一种是创建 Thread 对象，另一种是创建 一个本地线程，加入到虚拟机线程中。</p>\n<p>如果从 Java 语法的角度。有两种方法。</p>\n<p>第一是继承 Thread 类，实现 run 方法，并创建子类对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startThreadUseSubClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"start thread using Subclass of Thread\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MyThread thread = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">    thread.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另一种是传递给 Thread 构造函数一个 Runnable 对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startThreadUseRunnalbe</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"start thread using runnable\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    thread.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然， Runnalbe 对象，也不是只有这一种形式，例如如果我们想要线程执行时返回一个值，就需要用到另一种 Runnalbe 对象，它 对原来的 Runnalbe 对象进行了包装。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startFutureTask</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    FutureTask&lt;Integer&gt; task = <span class=\"keyword\">new</span> FutureTask&lt;&gt;(<span class=\"keyword\">new</span> Callable&lt;Integer&gt;() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(task).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Integer result = task.get();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"future result \"</span> + result);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ExecutionException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"结束线程\"><a href=\"#结束线程\" class=\"headerlink\" title=\"结束线程\"></a>结束线程</h3><h4 id=\"wait-与-sleep\"><a href=\"#wait-与-sleep\" class=\"headerlink\" title=\"wait 与 sleep\"></a>wait 与 sleep</h4><p>sleep 会使得当前线程休眠一段时间，但并不会释放已经得到的锁。</p>\n<p>wait 会阻塞住，并释放已经得到的锁。一直到有人调用 notify 或者 notifyAll，它会重新尝试得到锁，然后再唤醒。</p>\n<h3 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h3><h4 id=\"好处\"><a href=\"#好处\" class=\"headerlink\" title=\"好处\"></a>好处</h4><ul>\n<li>复用</li>\n</ul>\n<p>线程池中有一系列线程，这些线程在执行完任务后，并不会被销毁，而会从任务队列中取出任务，执行这些任务。这样，就避免为每个任务 都创建线程，销毁线程。 在有大量短命线程的场景下，如果创建线程和销毁线程的时间比线程执行任务的时间还长，显然是不划算的，这时候，使用线程池就会有明显 的好处。</p>\n<ul>\n<li>流控</li>\n</ul>\n<p>同时，可以设置线程数目，这样，线程不会增大到影响系统整体性能的程度。当任务太多时，可以在队列中排队， 如果有空闲线程，他们会从队列中取出任务执行。</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><ul>\n<li>线程数目</li>\n</ul>\n<p>那么，线程的数目要设置成多少呢？这需要根据任务类型的不同来设置，假如是大量计算型的任务，他们不会阻塞，那么可以将线程数目设置 为处理器数目。而如果任务中涉及大量IO，有些线程会阻塞住，这样就要根据阻塞线程数目与运行线程数目的比例，以及处理器数目来设置 线程总数目。例如阻塞线程数目与运行线程数目之比为n, 处理器数目为p，那么可以设置 n * (p + 1) 个线程，保证有 n 个线程处于运行 状态。</p>\n<ul>\n<li>Executors</li>\n</ul>\n<p>JDK 的 java.util.concurrent.Executors 类提供了几个静态的方法，用于创建不同类型的线程池。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ExecutorService service = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">ArrayList&lt;Future&lt;Integer&gt;&gt; results = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">14</span>; i++) &#123;</span><br><span class=\"line\">    Future&lt;Integer&gt; r = service.submit(<span class=\"keyword\">new</span> Callable&lt;Integer&gt;() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Random().nextInt();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    results.add(r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>newFixedThreadPool 可以创建固定数目的线程，一旦创建不会自动销毁线程，即便长期没有任务。除非显式关闭线程池。如果任务队列中有任务，就取出任务执行。</p>\n<p>另外，还可以使用 newCachedThreadPool 方法创建一个不设定固定线程数目的线程池，它有一个特性，线程完成任务后，如果一分钟之内又有新任务，就会复用这个线程执行新任务。如果超过一分钟还没有任务执行，就会自动销毁。</p>\n<p>另外，还提供了 newSingleThreadExecutor 创建有一个工作线程的线程池。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>JDK 中的线程池通过 HashSet 存储工作者线程，通过 BlockingQueue 来存储待处理任务。</p>\n<p>通过核心工作者数目(corePoolSize) 和 最大工作者数目(maximumPoolSize) 来确定如何处理任务。如果当前工作者线程数目 小于核心工作者数目，则创建一个工作者线程执行这个任务。否则，将这个任务放入待处理队列。如果入队失败，再看看当前工作 者数目是不是小于最大工作者数目，如果小于，则创建工作者线程执行这个任务。否则，拒绝执行这个任务。</p>\n<p>另外，如果待处理队列中没有任务要处理，并且工作者线程数目超过了核心工作者数目，那么，需要减少工作者线程数目。</p>\n"},{"layout":"post","title":"Docker 介绍及其应用","date":"2017-06-11T15:40:18.000Z","author":"zhaojizhuang","mathjax":true,"_content":"\n\n\n> [重要链接！！！知乎上的深入浅出](https://www.zhihu.com/question/22969309)\n\n## 1.Docker 介绍\n**便于入题，首先用 Docker 的logo解释下：**\n![Docker logo](https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/what.jpg)\n\n那个大鲸鱼（或者是货轮）就是操作系统\n\n把要交付的应用程序看成是各种货物，原本要将各种各样形状、尺寸不同的货物放到大鲸鱼上，你得为每件货物考虑怎么安放（就是应用程序配套的环境），还得考虑货物和货物是否能叠起来（应用程序依赖的环境是否会冲突）。\n\n现在使用了集装箱（容器）把每件货物都放到集装箱里，这样大鲸鱼可以用同样地方式安放、堆叠集装了，省事省力。[参考知乎](https://www.zhihu.com/question/28300645/answer/50922662)\n\n**步入正题：**\n\nDocker 是 PaaS 提供商 dotCloud 开源的一个基于 [LXC](#lxc) 的高级容器引擎，源代码托管在 Github 上, 基于go语言并遵从Apache2.0协议开源。\n\nDocker可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台。\n\n![Docker的c/s架构](https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/docker_cs.png)\n\n如图所示，Docker 使用客户端-服务器 (C/S) 架构模式。\n\n- Docker 客户端会与 Docker 守护进程进行通信。\n- Docker 守护进程会处理复杂繁重的任务，例如建立、运行、发布你的 Docker 容器。\n- Docker 客户端和守护进程 Daemon 可以运行在同一个系统上，当然你也可以使用 Docker 客户端去连接一个远程的 Docker 守护进程。Docker 客户端和守护进程之间通过 socket 或者 RESTful API 进行通信，就像下图。\n\n![docker架构图](https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/docker_frame.jpg)\n\n### 1.1 Docker 守护进程\n\n如上图所示，Docker 守护进程运行在一台主机上。用户并不直接和守护进程进行交互，而是通过 Docker 客户端间接和其通信。\n\n### 1.2 Docker 客户端\nDocker 客户端，实际上是 docker 的二进制程序，是主要的用户与 Docker 交互方式。它接收用户指令并且与背后的 Docker 守护进程通信，如此来回往复。\n\n### 1.3 Docker 内部\n要理解 Docker 内部构建，需要理解以下三种部件：\n\n**_Docker 镜像_** - Docker images  \n_**Docker 仓库**_ - Docker registeries  \n**_Docker 容器_** - Docker containers\n\n1.  **Docker 镜像**:Docker 镜像是 Docker 容器运行时的只读模板，每一个镜像由一系列的层 (layers) 组成。Docker 使用 UnionFS 来将这些层联合到单独的镜像中。UnionFS 允许独立文件系统中的文件和文件夹(称之为分支)被透明覆盖，形成一个单独连贯的文件系统。正因为有了这些层的存在，Docker 是如此的轻量。当你改变了一个 Docker 镜像，比如升级到某个程序到新的版本，一个新的层会被创建。因此，不用替换整个原先的镜像或者重新建立(在使用虚拟机的时候你可能会这么做)，只是一个新 的层被添加或升级了。现在你不用重新发布整个镜像，只需要升级，层使得分发 Docker 镜像变得简单和快速。\n\n2.  **Docker 仓库**:Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。同样的，Docker 仓库也有公有和私有的概念。公有的 Docker 仓库名字是 Docker Hub。Docker Hub 提供了庞大的镜像集合供使用。这些镜像可以是自己创建，或者在别人的镜像基础上创建。Docker 仓库是 Docker 的分发部分。\n\n3.  **Docker 容器**:Docker 容器和文件夹很类似，一个Docker容器包含了所有的某个应用运行所需要的环境。每一个 Docker 容器都是从 Docker 镜像创建的。Docker 容器可以运行、开始、停止、移动和删除。每一个 Docker 容器都是独立和安全的应用平台，Docker 容器是 Docker 的运行部分。\n\n## 2. Docker 8个的应用场景\n> 本小节介绍了常用的8个Docker的真实使用场景，分别是简化配置、代码流水线管理、提高开发效率、隔离应用、整合服务器、调试能力、多租户环境、快速部署\n\n![Docker 的8个应用场景](https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/dockeruse.png)\n\n一些Docker的使用场景，它为你展示了如何借助Docker的优势，在低开销的情况下，打造一个一致性的环境。\n\n### 1.简化配置\n\n这是Docker公司宣传的Docker的主要使用场景。虚拟机的最大好处是能在你的硬件设施上运行各种配置不一样的平台（软件、系统），Docker在降低额外开销的情况下提供了同样的功能。它能让你将运行环境和配置放在代码中然后部署，同一个Docker的配置可以在不同的环境中使用，这样就降低了硬件要求和应用环境之间耦合度。\n\n### 2. 代码流水线（Code Pipeline）管理\n\n前一个场景对于管理代码的流水线起到了很大的帮助。代码从开发者的机器到最终在生产环境上的部署，需要经过很多的中间环境。而每一个中间环境都有自己微小的差别，Docker给应用提供了一个从开发到上线均一致的环境，让代码的流水线变得简单不少。\n\n### 3. 提高开发效率\n\n不同的开发环境中，我们都想把两件事做好。一是我们想让开发环境尽量贴近生产环境，二是我们想快速搭建开发环境。\n\n理想状态中，要达到第一个目标，我们需要将每一个服务都跑在独立的虚拟机中以便监控生产环境中服务的运行状态。然而，我们却不想每次都需要网络连接，每次重新编译的时候远程连接上去特别麻烦。这就是Docker做的特别好的地方，开发环境的机器通常内存比较小，之前使用虚拟的时候，我们经常需要为开发环境的机器加内存，而现在Docker可以轻易的让几十个服务在Docker中跑起来。\n\n### 4. 隔离应用\n\n有很多种原因会让你选择在一个机器上运行不同的应用，比如之前提到的提高开发效率的场景等。\n\n我们经常需要考虑两点，一是因为要降低成本而进行服务器整合，二是将一个整体式的应用拆分成松耦合的单个服务（译者注：微服务架构）。\n\n### 5. 整合服务器\n\n正如通过虚拟机来整合多个应用，Docker隔离应用的能力使得Docker可以整合多个服务器以降低成本。由于没有多个操作系统的内存占用，以及能在多个实例之间共享没有使用的内存，Docker可以比虚拟机提供更好的服务器整合解决方案。\n\n### 6. 调试能力\n\nDocker提供了很多的工具，这些工具不一定只是针对容器，但是却适用于容器。它们提供了很多的功能，包括可以为容器设置检查点、设置版本和查看两个容器之间的差别，这些特性可以帮助调试Bug。\n\n### 7. 多租户环境\n\n另外一个Docker有意思的使用场景是在多租户的应用中，它可以避免关键应用的重写。我们一个特别的关于这个场景的例子是为IoT（物联网）的应用开发一个快速、易用的多租户环境。这种多租户的基本代码非常复杂，很难处理，重新规划这样一个应用不但消耗时间，也浪费金钱。\n\n使用Docker，可以为每一个租户的应用层的多个实例创建隔离的环境，这不仅简单而且成本低廉，当然这一切得益于Docker环境的启动速度和其高效的diff命令。\n\n### 8. 快速部署\n\n在虚拟机之前，引入新的硬件资源需要消耗几天的时间。虚拟化技术（Virtualization）将这个时间缩短到了分钟级别。而Docker通过为进程仅仅创建一个容器而无需启动一个操作系统，再次将这个过程缩短到了秒级。这正是Google和Facebook都看重的特性。\n\n你可以在数据中心创建销毁资源而无需担心重新启动带来的开销。通常数据中心的资源利用率只有30%，通过使用Docker并进行有效的资源分配可以提高资源的利用率。\n\n#### 本文的几个概念\n\n- <span id=\"lxc\">**LXC**</span>: LXC为Linux Container的简写。可以提供轻量级的虚拟化，以便隔离进程和资源，而且不需要提供指令解释机制以及全虚拟化的其他复杂性。属于操作系统层次之上的虚拟化\n","source":"_posts/Docker.md","raw":"---\nlayout: post\ntitle:  \"Docker 介绍及其应用\"\ndate:   2017-06-11 23:40:18 +0800\ncategories: docker\ntags:  docker\nauthor: zhaojizhuang\nmathjax: true\n---\n\n\n\n> [重要链接！！！知乎上的深入浅出](https://www.zhihu.com/question/22969309)\n\n## 1.Docker 介绍\n**便于入题，首先用 Docker 的logo解释下：**\n![Docker logo](https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/what.jpg)\n\n那个大鲸鱼（或者是货轮）就是操作系统\n\n把要交付的应用程序看成是各种货物，原本要将各种各样形状、尺寸不同的货物放到大鲸鱼上，你得为每件货物考虑怎么安放（就是应用程序配套的环境），还得考虑货物和货物是否能叠起来（应用程序依赖的环境是否会冲突）。\n\n现在使用了集装箱（容器）把每件货物都放到集装箱里，这样大鲸鱼可以用同样地方式安放、堆叠集装了，省事省力。[参考知乎](https://www.zhihu.com/question/28300645/answer/50922662)\n\n**步入正题：**\n\nDocker 是 PaaS 提供商 dotCloud 开源的一个基于 [LXC](#lxc) 的高级容器引擎，源代码托管在 Github 上, 基于go语言并遵从Apache2.0协议开源。\n\nDocker可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台。\n\n![Docker的c/s架构](https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/docker_cs.png)\n\n如图所示，Docker 使用客户端-服务器 (C/S) 架构模式。\n\n- Docker 客户端会与 Docker 守护进程进行通信。\n- Docker 守护进程会处理复杂繁重的任务，例如建立、运行、发布你的 Docker 容器。\n- Docker 客户端和守护进程 Daemon 可以运行在同一个系统上，当然你也可以使用 Docker 客户端去连接一个远程的 Docker 守护进程。Docker 客户端和守护进程之间通过 socket 或者 RESTful API 进行通信，就像下图。\n\n![docker架构图](https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/docker_frame.jpg)\n\n### 1.1 Docker 守护进程\n\n如上图所示，Docker 守护进程运行在一台主机上。用户并不直接和守护进程进行交互，而是通过 Docker 客户端间接和其通信。\n\n### 1.2 Docker 客户端\nDocker 客户端，实际上是 docker 的二进制程序，是主要的用户与 Docker 交互方式。它接收用户指令并且与背后的 Docker 守护进程通信，如此来回往复。\n\n### 1.3 Docker 内部\n要理解 Docker 内部构建，需要理解以下三种部件：\n\n**_Docker 镜像_** - Docker images  \n_**Docker 仓库**_ - Docker registeries  \n**_Docker 容器_** - Docker containers\n\n1.  **Docker 镜像**:Docker 镜像是 Docker 容器运行时的只读模板，每一个镜像由一系列的层 (layers) 组成。Docker 使用 UnionFS 来将这些层联合到单独的镜像中。UnionFS 允许独立文件系统中的文件和文件夹(称之为分支)被透明覆盖，形成一个单独连贯的文件系统。正因为有了这些层的存在，Docker 是如此的轻量。当你改变了一个 Docker 镜像，比如升级到某个程序到新的版本，一个新的层会被创建。因此，不用替换整个原先的镜像或者重新建立(在使用虚拟机的时候你可能会这么做)，只是一个新 的层被添加或升级了。现在你不用重新发布整个镜像，只需要升级，层使得分发 Docker 镜像变得简单和快速。\n\n2.  **Docker 仓库**:Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。同样的，Docker 仓库也有公有和私有的概念。公有的 Docker 仓库名字是 Docker Hub。Docker Hub 提供了庞大的镜像集合供使用。这些镜像可以是自己创建，或者在别人的镜像基础上创建。Docker 仓库是 Docker 的分发部分。\n\n3.  **Docker 容器**:Docker 容器和文件夹很类似，一个Docker容器包含了所有的某个应用运行所需要的环境。每一个 Docker 容器都是从 Docker 镜像创建的。Docker 容器可以运行、开始、停止、移动和删除。每一个 Docker 容器都是独立和安全的应用平台，Docker 容器是 Docker 的运行部分。\n\n## 2. Docker 8个的应用场景\n> 本小节介绍了常用的8个Docker的真实使用场景，分别是简化配置、代码流水线管理、提高开发效率、隔离应用、整合服务器、调试能力、多租户环境、快速部署\n\n![Docker 的8个应用场景](https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/dockeruse.png)\n\n一些Docker的使用场景，它为你展示了如何借助Docker的优势，在低开销的情况下，打造一个一致性的环境。\n\n### 1.简化配置\n\n这是Docker公司宣传的Docker的主要使用场景。虚拟机的最大好处是能在你的硬件设施上运行各种配置不一样的平台（软件、系统），Docker在降低额外开销的情况下提供了同样的功能。它能让你将运行环境和配置放在代码中然后部署，同一个Docker的配置可以在不同的环境中使用，这样就降低了硬件要求和应用环境之间耦合度。\n\n### 2. 代码流水线（Code Pipeline）管理\n\n前一个场景对于管理代码的流水线起到了很大的帮助。代码从开发者的机器到最终在生产环境上的部署，需要经过很多的中间环境。而每一个中间环境都有自己微小的差别，Docker给应用提供了一个从开发到上线均一致的环境，让代码的流水线变得简单不少。\n\n### 3. 提高开发效率\n\n不同的开发环境中，我们都想把两件事做好。一是我们想让开发环境尽量贴近生产环境，二是我们想快速搭建开发环境。\n\n理想状态中，要达到第一个目标，我们需要将每一个服务都跑在独立的虚拟机中以便监控生产环境中服务的运行状态。然而，我们却不想每次都需要网络连接，每次重新编译的时候远程连接上去特别麻烦。这就是Docker做的特别好的地方，开发环境的机器通常内存比较小，之前使用虚拟的时候，我们经常需要为开发环境的机器加内存，而现在Docker可以轻易的让几十个服务在Docker中跑起来。\n\n### 4. 隔离应用\n\n有很多种原因会让你选择在一个机器上运行不同的应用，比如之前提到的提高开发效率的场景等。\n\n我们经常需要考虑两点，一是因为要降低成本而进行服务器整合，二是将一个整体式的应用拆分成松耦合的单个服务（译者注：微服务架构）。\n\n### 5. 整合服务器\n\n正如通过虚拟机来整合多个应用，Docker隔离应用的能力使得Docker可以整合多个服务器以降低成本。由于没有多个操作系统的内存占用，以及能在多个实例之间共享没有使用的内存，Docker可以比虚拟机提供更好的服务器整合解决方案。\n\n### 6. 调试能力\n\nDocker提供了很多的工具，这些工具不一定只是针对容器，但是却适用于容器。它们提供了很多的功能，包括可以为容器设置检查点、设置版本和查看两个容器之间的差别，这些特性可以帮助调试Bug。\n\n### 7. 多租户环境\n\n另外一个Docker有意思的使用场景是在多租户的应用中，它可以避免关键应用的重写。我们一个特别的关于这个场景的例子是为IoT（物联网）的应用开发一个快速、易用的多租户环境。这种多租户的基本代码非常复杂，很难处理，重新规划这样一个应用不但消耗时间，也浪费金钱。\n\n使用Docker，可以为每一个租户的应用层的多个实例创建隔离的环境，这不仅简单而且成本低廉，当然这一切得益于Docker环境的启动速度和其高效的diff命令。\n\n### 8. 快速部署\n\n在虚拟机之前，引入新的硬件资源需要消耗几天的时间。虚拟化技术（Virtualization）将这个时间缩短到了分钟级别。而Docker通过为进程仅仅创建一个容器而无需启动一个操作系统，再次将这个过程缩短到了秒级。这正是Google和Facebook都看重的特性。\n\n你可以在数据中心创建销毁资源而无需担心重新启动带来的开销。通常数据中心的资源利用率只有30%，通过使用Docker并进行有效的资源分配可以提高资源的利用率。\n\n#### 本文的几个概念\n\n- <span id=\"lxc\">**LXC**</span>: LXC为Linux Container的简写。可以提供轻量级的虚拟化，以便隔离进程和资源，而且不需要提供指令解释机制以及全虚拟化的其他复杂性。属于操作系统层次之上的虚拟化\n","slug":"Docker","published":1,"updated":"2020-05-06T15:55:07.050Z","_id":"ck9viv10m0003bbfle23nq28q","comments":1,"photos":[],"link":"","content":"<blockquote>\n<p><a href=\"https://www.zhihu.com/question/22969309\" target=\"_blank\" rel=\"noopener\">重要链接！！！知乎上的深入浅出</a></p>\n</blockquote>\n<h2 id=\"1-Docker-介绍\"><a href=\"#1-Docker-介绍\" class=\"headerlink\" title=\"1.Docker 介绍\"></a>1.Docker 介绍</h2><p><strong>便于入题，首先用 Docker 的logo解释下：</strong><br><img src=\"https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/what.jpg\" alt=\"Docker logo\"></p>\n<p>那个大鲸鱼（或者是货轮）就是操作系统</p>\n<p>把要交付的应用程序看成是各种货物，原本要将各种各样形状、尺寸不同的货物放到大鲸鱼上，你得为每件货物考虑怎么安放（就是应用程序配套的环境），还得考虑货物和货物是否能叠起来（应用程序依赖的环境是否会冲突）。</p>\n<p>现在使用了集装箱（容器）把每件货物都放到集装箱里，这样大鲸鱼可以用同样地方式安放、堆叠集装了，省事省力。<a href=\"https://www.zhihu.com/question/28300645/answer/50922662\" target=\"_blank\" rel=\"noopener\">参考知乎</a></p>\n<p><strong>步入正题：</strong></p>\n<p>Docker 是 PaaS 提供商 dotCloud 开源的一个基于 <a href=\"#lxc\">LXC</a> 的高级容器引擎，源代码托管在 Github 上, 基于go语言并遵从Apache2.0协议开源。</p>\n<p>Docker可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台。</p>\n<p><img src=\"https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/docker_cs.png\" alt=\"Docker的c/s架构\"></p>\n<p>如图所示，Docker 使用客户端-服务器 (C/S) 架构模式。</p>\n<ul>\n<li>Docker 客户端会与 Docker 守护进程进行通信。</li>\n<li>Docker 守护进程会处理复杂繁重的任务，例如建立、运行、发布你的 Docker 容器。</li>\n<li>Docker 客户端和守护进程 Daemon 可以运行在同一个系统上，当然你也可以使用 Docker 客户端去连接一个远程的 Docker 守护进程。Docker 客户端和守护进程之间通过 socket 或者 RESTful API 进行通信，就像下图。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/docker_frame.jpg\" alt=\"docker架构图\"></p>\n<h3 id=\"1-1-Docker-守护进程\"><a href=\"#1-1-Docker-守护进程\" class=\"headerlink\" title=\"1.1 Docker 守护进程\"></a>1.1 Docker 守护进程</h3><p>如上图所示，Docker 守护进程运行在一台主机上。用户并不直接和守护进程进行交互，而是通过 Docker 客户端间接和其通信。</p>\n<h3 id=\"1-2-Docker-客户端\"><a href=\"#1-2-Docker-客户端\" class=\"headerlink\" title=\"1.2 Docker 客户端\"></a>1.2 Docker 客户端</h3><p>Docker 客户端，实际上是 docker 的二进制程序，是主要的用户与 Docker 交互方式。它接收用户指令并且与背后的 Docker 守护进程通信，如此来回往复。</p>\n<h3 id=\"1-3-Docker-内部\"><a href=\"#1-3-Docker-内部\" class=\"headerlink\" title=\"1.3 Docker 内部\"></a>1.3 Docker 内部</h3><p>要理解 Docker 内部构建，需要理解以下三种部件：</p>\n<p><strong><em>Docker 镜像</em></strong> - Docker images<br><em><strong>Docker 仓库</strong></em> - Docker registeries<br><strong><em>Docker 容器</em></strong> - Docker containers</p>\n<ol>\n<li><p><strong>Docker 镜像</strong>:Docker 镜像是 Docker 容器运行时的只读模板，每一个镜像由一系列的层 (layers) 组成。Docker 使用 UnionFS 来将这些层联合到单独的镜像中。UnionFS 允许独立文件系统中的文件和文件夹(称之为分支)被透明覆盖，形成一个单独连贯的文件系统。正因为有了这些层的存在，Docker 是如此的轻量。当你改变了一个 Docker 镜像，比如升级到某个程序到新的版本，一个新的层会被创建。因此，不用替换整个原先的镜像或者重新建立(在使用虚拟机的时候你可能会这么做)，只是一个新 的层被添加或升级了。现在你不用重新发布整个镜像，只需要升级，层使得分发 Docker 镜像变得简单和快速。</p>\n</li>\n<li><p><strong>Docker 仓库</strong>:Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。同样的，Docker 仓库也有公有和私有的概念。公有的 Docker 仓库名字是 Docker Hub。Docker Hub 提供了庞大的镜像集合供使用。这些镜像可以是自己创建，或者在别人的镜像基础上创建。Docker 仓库是 Docker 的分发部分。</p>\n</li>\n<li><p><strong>Docker 容器</strong>:Docker 容器和文件夹很类似，一个Docker容器包含了所有的某个应用运行所需要的环境。每一个 Docker 容器都是从 Docker 镜像创建的。Docker 容器可以运行、开始、停止、移动和删除。每一个 Docker 容器都是独立和安全的应用平台，Docker 容器是 Docker 的运行部分。</p>\n</li>\n</ol>\n<h2 id=\"2-Docker-8个的应用场景\"><a href=\"#2-Docker-8个的应用场景\" class=\"headerlink\" title=\"2. Docker 8个的应用场景\"></a>2. Docker 8个的应用场景</h2><blockquote>\n<p>本小节介绍了常用的8个Docker的真实使用场景，分别是简化配置、代码流水线管理、提高开发效率、隔离应用、整合服务器、调试能力、多租户环境、快速部署</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/dockeruse.png\" alt=\"Docker 的8个应用场景\"></p>\n<p>一些Docker的使用场景，它为你展示了如何借助Docker的优势，在低开销的情况下，打造一个一致性的环境。</p>\n<h3 id=\"1-简化配置\"><a href=\"#1-简化配置\" class=\"headerlink\" title=\"1.简化配置\"></a>1.简化配置</h3><p>这是Docker公司宣传的Docker的主要使用场景。虚拟机的最大好处是能在你的硬件设施上运行各种配置不一样的平台（软件、系统），Docker在降低额外开销的情况下提供了同样的功能。它能让你将运行环境和配置放在代码中然后部署，同一个Docker的配置可以在不同的环境中使用，这样就降低了硬件要求和应用环境之间耦合度。</p>\n<h3 id=\"2-代码流水线（Code-Pipeline）管理\"><a href=\"#2-代码流水线（Code-Pipeline）管理\" class=\"headerlink\" title=\"2. 代码流水线（Code Pipeline）管理\"></a>2. 代码流水线（Code Pipeline）管理</h3><p>前一个场景对于管理代码的流水线起到了很大的帮助。代码从开发者的机器到最终在生产环境上的部署，需要经过很多的中间环境。而每一个中间环境都有自己微小的差别，Docker给应用提供了一个从开发到上线均一致的环境，让代码的流水线变得简单不少。</p>\n<h3 id=\"3-提高开发效率\"><a href=\"#3-提高开发效率\" class=\"headerlink\" title=\"3. 提高开发效率\"></a>3. 提高开发效率</h3><p>不同的开发环境中，我们都想把两件事做好。一是我们想让开发环境尽量贴近生产环境，二是我们想快速搭建开发环境。</p>\n<p>理想状态中，要达到第一个目标，我们需要将每一个服务都跑在独立的虚拟机中以便监控生产环境中服务的运行状态。然而，我们却不想每次都需要网络连接，每次重新编译的时候远程连接上去特别麻烦。这就是Docker做的特别好的地方，开发环境的机器通常内存比较小，之前使用虚拟的时候，我们经常需要为开发环境的机器加内存，而现在Docker可以轻易的让几十个服务在Docker中跑起来。</p>\n<h3 id=\"4-隔离应用\"><a href=\"#4-隔离应用\" class=\"headerlink\" title=\"4. 隔离应用\"></a>4. 隔离应用</h3><p>有很多种原因会让你选择在一个机器上运行不同的应用，比如之前提到的提高开发效率的场景等。</p>\n<p>我们经常需要考虑两点，一是因为要降低成本而进行服务器整合，二是将一个整体式的应用拆分成松耦合的单个服务（译者注：微服务架构）。</p>\n<h3 id=\"5-整合服务器\"><a href=\"#5-整合服务器\" class=\"headerlink\" title=\"5. 整合服务器\"></a>5. 整合服务器</h3><p>正如通过虚拟机来整合多个应用，Docker隔离应用的能力使得Docker可以整合多个服务器以降低成本。由于没有多个操作系统的内存占用，以及能在多个实例之间共享没有使用的内存，Docker可以比虚拟机提供更好的服务器整合解决方案。</p>\n<h3 id=\"6-调试能力\"><a href=\"#6-调试能力\" class=\"headerlink\" title=\"6. 调试能力\"></a>6. 调试能力</h3><p>Docker提供了很多的工具，这些工具不一定只是针对容器，但是却适用于容器。它们提供了很多的功能，包括可以为容器设置检查点、设置版本和查看两个容器之间的差别，这些特性可以帮助调试Bug。</p>\n<h3 id=\"7-多租户环境\"><a href=\"#7-多租户环境\" class=\"headerlink\" title=\"7. 多租户环境\"></a>7. 多租户环境</h3><p>另外一个Docker有意思的使用场景是在多租户的应用中，它可以避免关键应用的重写。我们一个特别的关于这个场景的例子是为IoT（物联网）的应用开发一个快速、易用的多租户环境。这种多租户的基本代码非常复杂，很难处理，重新规划这样一个应用不但消耗时间，也浪费金钱。</p>\n<p>使用Docker，可以为每一个租户的应用层的多个实例创建隔离的环境，这不仅简单而且成本低廉，当然这一切得益于Docker环境的启动速度和其高效的diff命令。</p>\n<h3 id=\"8-快速部署\"><a href=\"#8-快速部署\" class=\"headerlink\" title=\"8. 快速部署\"></a>8. 快速部署</h3><p>在虚拟机之前，引入新的硬件资源需要消耗几天的时间。虚拟化技术（Virtualization）将这个时间缩短到了分钟级别。而Docker通过为进程仅仅创建一个容器而无需启动一个操作系统，再次将这个过程缩短到了秒级。这正是Google和Facebook都看重的特性。</p>\n<p>你可以在数据中心创建销毁资源而无需担心重新启动带来的开销。通常数据中心的资源利用率只有30%，通过使用Docker并进行有效的资源分配可以提高资源的利用率。</p>\n<h4 id=\"本文的几个概念\"><a href=\"#本文的几个概念\" class=\"headerlink\" title=\"本文的几个概念\"></a>本文的几个概念</h4><ul>\n<li><span id=\"lxc\"><strong>LXC</strong></span>: LXC为Linux Container的简写。可以提供轻量级的虚拟化，以便隔离进程和资源，而且不需要提供指令解释机制以及全虚拟化的其他复杂性。属于操作系统层次之上的虚拟化</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><a href=\"https://www.zhihu.com/question/22969309\" target=\"_blank\" rel=\"noopener\">重要链接！！！知乎上的深入浅出</a></p>\n</blockquote>\n<h2 id=\"1-Docker-介绍\"><a href=\"#1-Docker-介绍\" class=\"headerlink\" title=\"1.Docker 介绍\"></a>1.Docker 介绍</h2><p><strong>便于入题，首先用 Docker 的logo解释下：</strong><br><img src=\"https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/what.jpg\" alt=\"Docker logo\"></p>\n<p>那个大鲸鱼（或者是货轮）就是操作系统</p>\n<p>把要交付的应用程序看成是各种货物，原本要将各种各样形状、尺寸不同的货物放到大鲸鱼上，你得为每件货物考虑怎么安放（就是应用程序配套的环境），还得考虑货物和货物是否能叠起来（应用程序依赖的环境是否会冲突）。</p>\n<p>现在使用了集装箱（容器）把每件货物都放到集装箱里，这样大鲸鱼可以用同样地方式安放、堆叠集装了，省事省力。<a href=\"https://www.zhihu.com/question/28300645/answer/50922662\" target=\"_blank\" rel=\"noopener\">参考知乎</a></p>\n<p><strong>步入正题：</strong></p>\n<p>Docker 是 PaaS 提供商 dotCloud 开源的一个基于 <a href=\"#lxc\">LXC</a> 的高级容器引擎，源代码托管在 Github 上, 基于go语言并遵从Apache2.0协议开源。</p>\n<p>Docker可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台。</p>\n<p><img src=\"https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/docker_cs.png\" alt=\"Docker的c/s架构\"></p>\n<p>如图所示，Docker 使用客户端-服务器 (C/S) 架构模式。</p>\n<ul>\n<li>Docker 客户端会与 Docker 守护进程进行通信。</li>\n<li>Docker 守护进程会处理复杂繁重的任务，例如建立、运行、发布你的 Docker 容器。</li>\n<li>Docker 客户端和守护进程 Daemon 可以运行在同一个系统上，当然你也可以使用 Docker 客户端去连接一个远程的 Docker 守护进程。Docker 客户端和守护进程之间通过 socket 或者 RESTful API 进行通信，就像下图。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/docker_frame.jpg\" alt=\"docker架构图\"></p>\n<h3 id=\"1-1-Docker-守护进程\"><a href=\"#1-1-Docker-守护进程\" class=\"headerlink\" title=\"1.1 Docker 守护进程\"></a>1.1 Docker 守护进程</h3><p>如上图所示，Docker 守护进程运行在一台主机上。用户并不直接和守护进程进行交互，而是通过 Docker 客户端间接和其通信。</p>\n<h3 id=\"1-2-Docker-客户端\"><a href=\"#1-2-Docker-客户端\" class=\"headerlink\" title=\"1.2 Docker 客户端\"></a>1.2 Docker 客户端</h3><p>Docker 客户端，实际上是 docker 的二进制程序，是主要的用户与 Docker 交互方式。它接收用户指令并且与背后的 Docker 守护进程通信，如此来回往复。</p>\n<h3 id=\"1-3-Docker-内部\"><a href=\"#1-3-Docker-内部\" class=\"headerlink\" title=\"1.3 Docker 内部\"></a>1.3 Docker 内部</h3><p>要理解 Docker 内部构建，需要理解以下三种部件：</p>\n<p><strong><em>Docker 镜像</em></strong> - Docker images<br><em><strong>Docker 仓库</strong></em> - Docker registeries<br><strong><em>Docker 容器</em></strong> - Docker containers</p>\n<ol>\n<li><p><strong>Docker 镜像</strong>:Docker 镜像是 Docker 容器运行时的只读模板，每一个镜像由一系列的层 (layers) 组成。Docker 使用 UnionFS 来将这些层联合到单独的镜像中。UnionFS 允许独立文件系统中的文件和文件夹(称之为分支)被透明覆盖，形成一个单独连贯的文件系统。正因为有了这些层的存在，Docker 是如此的轻量。当你改变了一个 Docker 镜像，比如升级到某个程序到新的版本，一个新的层会被创建。因此，不用替换整个原先的镜像或者重新建立(在使用虚拟机的时候你可能会这么做)，只是一个新 的层被添加或升级了。现在你不用重新发布整个镜像，只需要升级，层使得分发 Docker 镜像变得简单和快速。</p>\n</li>\n<li><p><strong>Docker 仓库</strong>:Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。同样的，Docker 仓库也有公有和私有的概念。公有的 Docker 仓库名字是 Docker Hub。Docker Hub 提供了庞大的镜像集合供使用。这些镜像可以是自己创建，或者在别人的镜像基础上创建。Docker 仓库是 Docker 的分发部分。</p>\n</li>\n<li><p><strong>Docker 容器</strong>:Docker 容器和文件夹很类似，一个Docker容器包含了所有的某个应用运行所需要的环境。每一个 Docker 容器都是从 Docker 镜像创建的。Docker 容器可以运行、开始、停止、移动和删除。每一个 Docker 容器都是独立和安全的应用平台，Docker 容器是 Docker 的运行部分。</p>\n</li>\n</ol>\n<h2 id=\"2-Docker-8个的应用场景\"><a href=\"#2-Docker-8个的应用场景\" class=\"headerlink\" title=\"2. Docker 8个的应用场景\"></a>2. Docker 8个的应用场景</h2><blockquote>\n<p>本小节介绍了常用的8个Docker的真实使用场景，分别是简化配置、代码流水线管理、提高开发效率、隔离应用、整合服务器、调试能力、多租户环境、快速部署</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/dockeruse.png\" alt=\"Docker 的8个应用场景\"></p>\n<p>一些Docker的使用场景，它为你展示了如何借助Docker的优势，在低开销的情况下，打造一个一致性的环境。</p>\n<h3 id=\"1-简化配置\"><a href=\"#1-简化配置\" class=\"headerlink\" title=\"1.简化配置\"></a>1.简化配置</h3><p>这是Docker公司宣传的Docker的主要使用场景。虚拟机的最大好处是能在你的硬件设施上运行各种配置不一样的平台（软件、系统），Docker在降低额外开销的情况下提供了同样的功能。它能让你将运行环境和配置放在代码中然后部署，同一个Docker的配置可以在不同的环境中使用，这样就降低了硬件要求和应用环境之间耦合度。</p>\n<h3 id=\"2-代码流水线（Code-Pipeline）管理\"><a href=\"#2-代码流水线（Code-Pipeline）管理\" class=\"headerlink\" title=\"2. 代码流水线（Code Pipeline）管理\"></a>2. 代码流水线（Code Pipeline）管理</h3><p>前一个场景对于管理代码的流水线起到了很大的帮助。代码从开发者的机器到最终在生产环境上的部署，需要经过很多的中间环境。而每一个中间环境都有自己微小的差别，Docker给应用提供了一个从开发到上线均一致的环境，让代码的流水线变得简单不少。</p>\n<h3 id=\"3-提高开发效率\"><a href=\"#3-提高开发效率\" class=\"headerlink\" title=\"3. 提高开发效率\"></a>3. 提高开发效率</h3><p>不同的开发环境中，我们都想把两件事做好。一是我们想让开发环境尽量贴近生产环境，二是我们想快速搭建开发环境。</p>\n<p>理想状态中，要达到第一个目标，我们需要将每一个服务都跑在独立的虚拟机中以便监控生产环境中服务的运行状态。然而，我们却不想每次都需要网络连接，每次重新编译的时候远程连接上去特别麻烦。这就是Docker做的特别好的地方，开发环境的机器通常内存比较小，之前使用虚拟的时候，我们经常需要为开发环境的机器加内存，而现在Docker可以轻易的让几十个服务在Docker中跑起来。</p>\n<h3 id=\"4-隔离应用\"><a href=\"#4-隔离应用\" class=\"headerlink\" title=\"4. 隔离应用\"></a>4. 隔离应用</h3><p>有很多种原因会让你选择在一个机器上运行不同的应用，比如之前提到的提高开发效率的场景等。</p>\n<p>我们经常需要考虑两点，一是因为要降低成本而进行服务器整合，二是将一个整体式的应用拆分成松耦合的单个服务（译者注：微服务架构）。</p>\n<h3 id=\"5-整合服务器\"><a href=\"#5-整合服务器\" class=\"headerlink\" title=\"5. 整合服务器\"></a>5. 整合服务器</h3><p>正如通过虚拟机来整合多个应用，Docker隔离应用的能力使得Docker可以整合多个服务器以降低成本。由于没有多个操作系统的内存占用，以及能在多个实例之间共享没有使用的内存，Docker可以比虚拟机提供更好的服务器整合解决方案。</p>\n<h3 id=\"6-调试能力\"><a href=\"#6-调试能力\" class=\"headerlink\" title=\"6. 调试能力\"></a>6. 调试能力</h3><p>Docker提供了很多的工具，这些工具不一定只是针对容器，但是却适用于容器。它们提供了很多的功能，包括可以为容器设置检查点、设置版本和查看两个容器之间的差别，这些特性可以帮助调试Bug。</p>\n<h3 id=\"7-多租户环境\"><a href=\"#7-多租户环境\" class=\"headerlink\" title=\"7. 多租户环境\"></a>7. 多租户环境</h3><p>另外一个Docker有意思的使用场景是在多租户的应用中，它可以避免关键应用的重写。我们一个特别的关于这个场景的例子是为IoT（物联网）的应用开发一个快速、易用的多租户环境。这种多租户的基本代码非常复杂，很难处理，重新规划这样一个应用不但消耗时间，也浪费金钱。</p>\n<p>使用Docker，可以为每一个租户的应用层的多个实例创建隔离的环境，这不仅简单而且成本低廉，当然这一切得益于Docker环境的启动速度和其高效的diff命令。</p>\n<h3 id=\"8-快速部署\"><a href=\"#8-快速部署\" class=\"headerlink\" title=\"8. 快速部署\"></a>8. 快速部署</h3><p>在虚拟机之前，引入新的硬件资源需要消耗几天的时间。虚拟化技术（Virtualization）将这个时间缩短到了分钟级别。而Docker通过为进程仅仅创建一个容器而无需启动一个操作系统，再次将这个过程缩短到了秒级。这正是Google和Facebook都看重的特性。</p>\n<p>你可以在数据中心创建销毁资源而无需担心重新启动带来的开销。通常数据中心的资源利用率只有30%，通过使用Docker并进行有效的资源分配可以提高资源的利用率。</p>\n<h4 id=\"本文的几个概念\"><a href=\"#本文的几个概念\" class=\"headerlink\" title=\"本文的几个概念\"></a>本文的几个概念</h4><ul>\n<li><span id=\"lxc\"><strong>LXC</strong></span>: LXC为Linux Container的简写。可以提供轻量级的虚拟化，以便隔离进程和资源，而且不需要提供指令解释机制以及全虚拟化的其他复杂性。属于操作系统层次之上的虚拟化</li>\n</ul>\n"},{"layout":"post","title":"了解思科 Tetration 平台","date":"2017-06-12T10:16:18.000Z","author":"zhaojizhuang","_content":"\n\n\n### 介绍\n\n> 思科推出了 Tetration Analytics平台，Tetration 平台主要是对大规模数据中心和云平台上的网络流量的实时采集、存储和分析。\n\nTetration 平台搭配基于Cloud Scale技术的硬件设备，流动在数据中心的任何一个数据包的元信息都可以被实时记录和存储下来。\n\nTetration 平台可以辅助用户在应用关系梳理、应用访问策略制定、模拟和实时验证、应用云端迁移访问策略制定、白名单安全模型等方面脱离传统手工和被动的工作方式。\n\n**Tetration Analytics平台主要由 数据采集部分、数据存储部分、和数据分析部分组成。**\n\n**数据采集部分**：包括安装在实体服务器或者虚拟机中的软件数据采集器、以太网交换机转发芯片的硬件数据采集逻辑和第三方数据接口组成。软件数据采集器通过 libpcap（一个网络数据包捕获函数库，linux抓包工具tcpdump就是基于此的）来对数据进行采集。\n\n**存储和分析部分**：由基于思科UCS计算平台的服务器集群组成。\n\n下图是思科Tetration Analytics平台架构\n\n![Tetration Analytics](http://zhuanti.cww.net.cn/UpLoadFile/2016/7/5/20167547744377.png)\n\n存储和分析部分是该平台的精髓所在，针对万亿个数据的无监督机器学习算法的采用，为网络访问行为基线设立、网络访问异常检测、应用访问关系的动态甄别、聚类动态划分等提供了方便的工具。平台为用户提供了网络数据完善的、全面的大数据来源。\n\nTetration Analytics平台提供了存储和分析的接口，用户可以根据数据进行相应的网络数据分析，提供的接口包括 开放式 API、REST、推送事件、用户应用\n\n### 平台特性\n\n思科 Tetration Analytics 能够分析应用行为，并准确地反映出应用之间的依赖关系。它采用机器学习技术构建动态分层策略模型，从而实现应用分段和自动策略实施\n\nTetration Analytics 可大幅简化零信任模式的实施。它可以针对数据中心内的任何对象实时提供可视性。它使用基于行为的应用洞察和机器学习技术来构建动态策略模型，实现自动策略实施。此外，它还通过 REST API 支持开放式访问，客户可以编写个性化应用。\n\n\n\n\n- **遥感勘测快上加快**\n\nTetration Analytics 使用无需监管的机器学习技术，以线速处理收集的遥感勘测数据。借助自然语言技术，搜索和浏览数百亿条数据流记录。只需不到一秒即可获得切实可行的见解。\n\n- **切实可行的应用见解**\n\n依据应用组件和行为分析算法获取实时数据。标识应用组及其通信模式和服务依赖性。获取自动化白名单策略建议，实现零信任安全性。\n\n- **应用分段**\n\n在本地数据中心以及公共云和私有云中实施一致的策略，实现应用分段。持续监控合规性偏差，可在几分钟内发现生产网络中的违规情况。\n\n- **开放式 API**\n\n利用全面精细的遥感勘测数据，轻松打造个性化的定制应用。生成个性化的定制通知和查询。监控应用层的延迟情况并获取通知。此平台使用 REST API。\n\n- **强大的可扩展性**\n\nTetration Analytics 从数据中心的每个数据包收集遥感勘测数据。它可以在几秒钟内分析数百万个事件并从数十亿条记录中提供切实可行的见解。它可以长期保留数据，而不会丢失细节。\n[ddd](../docs/171010-01%20_%20程序员如何用技术变现（上）.html)\n","source":"_posts/cisco-platform.md","raw":"---\nlayout: post\ntitle:  \"了解思科 Tetration 平台\"\ndate:   2017-06-12 18:16:18 +0800\ncategories: 数据中心\ntags:  Analytics\nauthor: zhaojizhuang\n---\n\n\n\n### 介绍\n\n> 思科推出了 Tetration Analytics平台，Tetration 平台主要是对大规模数据中心和云平台上的网络流量的实时采集、存储和分析。\n\nTetration 平台搭配基于Cloud Scale技术的硬件设备，流动在数据中心的任何一个数据包的元信息都可以被实时记录和存储下来。\n\nTetration 平台可以辅助用户在应用关系梳理、应用访问策略制定、模拟和实时验证、应用云端迁移访问策略制定、白名单安全模型等方面脱离传统手工和被动的工作方式。\n\n**Tetration Analytics平台主要由 数据采集部分、数据存储部分、和数据分析部分组成。**\n\n**数据采集部分**：包括安装在实体服务器或者虚拟机中的软件数据采集器、以太网交换机转发芯片的硬件数据采集逻辑和第三方数据接口组成。软件数据采集器通过 libpcap（一个网络数据包捕获函数库，linux抓包工具tcpdump就是基于此的）来对数据进行采集。\n\n**存储和分析部分**：由基于思科UCS计算平台的服务器集群组成。\n\n下图是思科Tetration Analytics平台架构\n\n![Tetration Analytics](http://zhuanti.cww.net.cn/UpLoadFile/2016/7/5/20167547744377.png)\n\n存储和分析部分是该平台的精髓所在，针对万亿个数据的无监督机器学习算法的采用，为网络访问行为基线设立、网络访问异常检测、应用访问关系的动态甄别、聚类动态划分等提供了方便的工具。平台为用户提供了网络数据完善的、全面的大数据来源。\n\nTetration Analytics平台提供了存储和分析的接口，用户可以根据数据进行相应的网络数据分析，提供的接口包括 开放式 API、REST、推送事件、用户应用\n\n### 平台特性\n\n思科 Tetration Analytics 能够分析应用行为，并准确地反映出应用之间的依赖关系。它采用机器学习技术构建动态分层策略模型，从而实现应用分段和自动策略实施\n\nTetration Analytics 可大幅简化零信任模式的实施。它可以针对数据中心内的任何对象实时提供可视性。它使用基于行为的应用洞察和机器学习技术来构建动态策略模型，实现自动策略实施。此外，它还通过 REST API 支持开放式访问，客户可以编写个性化应用。\n\n\n\n\n- **遥感勘测快上加快**\n\nTetration Analytics 使用无需监管的机器学习技术，以线速处理收集的遥感勘测数据。借助自然语言技术，搜索和浏览数百亿条数据流记录。只需不到一秒即可获得切实可行的见解。\n\n- **切实可行的应用见解**\n\n依据应用组件和行为分析算法获取实时数据。标识应用组及其通信模式和服务依赖性。获取自动化白名单策略建议，实现零信任安全性。\n\n- **应用分段**\n\n在本地数据中心以及公共云和私有云中实施一致的策略，实现应用分段。持续监控合规性偏差，可在几分钟内发现生产网络中的违规情况。\n\n- **开放式 API**\n\n利用全面精细的遥感勘测数据，轻松打造个性化的定制应用。生成个性化的定制通知和查询。监控应用层的延迟情况并获取通知。此平台使用 REST API。\n\n- **强大的可扩展性**\n\nTetration Analytics 从数据中心的每个数据包收集遥感勘测数据。它可以在几秒钟内分析数百万个事件并从数十亿条记录中提供切实可行的见解。它可以长期保留数据，而不会丢失细节。\n[ddd](../docs/171010-01%20_%20程序员如何用技术变现（上）.html)\n","slug":"cisco-platform","published":1,"updated":"2020-05-06T15:55:07.050Z","_id":"ck9viv4w50006bbflqk3l7mew","comments":1,"photos":[],"link":"","content":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><blockquote>\n<p>思科推出了 Tetration Analytics平台，Tetration 平台主要是对大规模数据中心和云平台上的网络流量的实时采集、存储和分析。</p>\n</blockquote>\n<p>Tetration 平台搭配基于Cloud Scale技术的硬件设备，流动在数据中心的任何一个数据包的元信息都可以被实时记录和存储下来。</p>\n<p>Tetration 平台可以辅助用户在应用关系梳理、应用访问策略制定、模拟和实时验证、应用云端迁移访问策略制定、白名单安全模型等方面脱离传统手工和被动的工作方式。</p>\n<p><strong>Tetration Analytics平台主要由 数据采集部分、数据存储部分、和数据分析部分组成。</strong></p>\n<p><strong>数据采集部分</strong>：包括安装在实体服务器或者虚拟机中的软件数据采集器、以太网交换机转发芯片的硬件数据采集逻辑和第三方数据接口组成。软件数据采集器通过 libpcap（一个网络数据包捕获函数库，linux抓包工具tcpdump就是基于此的）来对数据进行采集。</p>\n<p><strong>存储和分析部分</strong>：由基于思科UCS计算平台的服务器集群组成。</p>\n<p>下图是思科Tetration Analytics平台架构</p>\n<p><img src=\"http://zhuanti.cww.net.cn/UpLoadFile/2016/7/5/20167547744377.png\" alt=\"Tetration Analytics\"></p>\n<p>存储和分析部分是该平台的精髓所在，针对万亿个数据的无监督机器学习算法的采用，为网络访问行为基线设立、网络访问异常检测、应用访问关系的动态甄别、聚类动态划分等提供了方便的工具。平台为用户提供了网络数据完善的、全面的大数据来源。</p>\n<p>Tetration Analytics平台提供了存储和分析的接口，用户可以根据数据进行相应的网络数据分析，提供的接口包括 开放式 API、REST、推送事件、用户应用</p>\n<h3 id=\"平台特性\"><a href=\"#平台特性\" class=\"headerlink\" title=\"平台特性\"></a>平台特性</h3><p>思科 Tetration Analytics 能够分析应用行为，并准确地反映出应用之间的依赖关系。它采用机器学习技术构建动态分层策略模型，从而实现应用分段和自动策略实施</p>\n<p>Tetration Analytics 可大幅简化零信任模式的实施。它可以针对数据中心内的任何对象实时提供可视性。它使用基于行为的应用洞察和机器学习技术来构建动态策略模型，实现自动策略实施。此外，它还通过 REST API 支持开放式访问，客户可以编写个性化应用。</p>\n<ul>\n<li><strong>遥感勘测快上加快</strong></li>\n</ul>\n<p>Tetration Analytics 使用无需监管的机器学习技术，以线速处理收集的遥感勘测数据。借助自然语言技术，搜索和浏览数百亿条数据流记录。只需不到一秒即可获得切实可行的见解。</p>\n<ul>\n<li><strong>切实可行的应用见解</strong></li>\n</ul>\n<p>依据应用组件和行为分析算法获取实时数据。标识应用组及其通信模式和服务依赖性。获取自动化白名单策略建议，实现零信任安全性。</p>\n<ul>\n<li><strong>应用分段</strong></li>\n</ul>\n<p>在本地数据中心以及公共云和私有云中实施一致的策略，实现应用分段。持续监控合规性偏差，可在几分钟内发现生产网络中的违规情况。</p>\n<ul>\n<li><strong>开放式 API</strong></li>\n</ul>\n<p>利用全面精细的遥感勘测数据，轻松打造个性化的定制应用。生成个性化的定制通知和查询。监控应用层的延迟情况并获取通知。此平台使用 REST API。</p>\n<ul>\n<li><strong>强大的可扩展性</strong></li>\n</ul>\n<p>Tetration Analytics 从数据中心的每个数据包收集遥感勘测数据。它可以在几秒钟内分析数百万个事件并从数十亿条记录中提供切实可行的见解。它可以长期保留数据，而不会丢失细节。<br><a href=\"../docs/171010-01%20_%20程序员如何用技术变现（上）.html\">ddd</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><blockquote>\n<p>思科推出了 Tetration Analytics平台，Tetration 平台主要是对大规模数据中心和云平台上的网络流量的实时采集、存储和分析。</p>\n</blockquote>\n<p>Tetration 平台搭配基于Cloud Scale技术的硬件设备，流动在数据中心的任何一个数据包的元信息都可以被实时记录和存储下来。</p>\n<p>Tetration 平台可以辅助用户在应用关系梳理、应用访问策略制定、模拟和实时验证、应用云端迁移访问策略制定、白名单安全模型等方面脱离传统手工和被动的工作方式。</p>\n<p><strong>Tetration Analytics平台主要由 数据采集部分、数据存储部分、和数据分析部分组成。</strong></p>\n<p><strong>数据采集部分</strong>：包括安装在实体服务器或者虚拟机中的软件数据采集器、以太网交换机转发芯片的硬件数据采集逻辑和第三方数据接口组成。软件数据采集器通过 libpcap（一个网络数据包捕获函数库，linux抓包工具tcpdump就是基于此的）来对数据进行采集。</p>\n<p><strong>存储和分析部分</strong>：由基于思科UCS计算平台的服务器集群组成。</p>\n<p>下图是思科Tetration Analytics平台架构</p>\n<p><img src=\"http://zhuanti.cww.net.cn/UpLoadFile/2016/7/5/20167547744377.png\" alt=\"Tetration Analytics\"></p>\n<p>存储和分析部分是该平台的精髓所在，针对万亿个数据的无监督机器学习算法的采用，为网络访问行为基线设立、网络访问异常检测、应用访问关系的动态甄别、聚类动态划分等提供了方便的工具。平台为用户提供了网络数据完善的、全面的大数据来源。</p>\n<p>Tetration Analytics平台提供了存储和分析的接口，用户可以根据数据进行相应的网络数据分析，提供的接口包括 开放式 API、REST、推送事件、用户应用</p>\n<h3 id=\"平台特性\"><a href=\"#平台特性\" class=\"headerlink\" title=\"平台特性\"></a>平台特性</h3><p>思科 Tetration Analytics 能够分析应用行为，并准确地反映出应用之间的依赖关系。它采用机器学习技术构建动态分层策略模型，从而实现应用分段和自动策略实施</p>\n<p>Tetration Analytics 可大幅简化零信任模式的实施。它可以针对数据中心内的任何对象实时提供可视性。它使用基于行为的应用洞察和机器学习技术来构建动态策略模型，实现自动策略实施。此外，它还通过 REST API 支持开放式访问，客户可以编写个性化应用。</p>\n<ul>\n<li><strong>遥感勘测快上加快</strong></li>\n</ul>\n<p>Tetration Analytics 使用无需监管的机器学习技术，以线速处理收集的遥感勘测数据。借助自然语言技术，搜索和浏览数百亿条数据流记录。只需不到一秒即可获得切实可行的见解。</p>\n<ul>\n<li><strong>切实可行的应用见解</strong></li>\n</ul>\n<p>依据应用组件和行为分析算法获取实时数据。标识应用组及其通信模式和服务依赖性。获取自动化白名单策略建议，实现零信任安全性。</p>\n<ul>\n<li><strong>应用分段</strong></li>\n</ul>\n<p>在本地数据中心以及公共云和私有云中实施一致的策略，实现应用分段。持续监控合规性偏差，可在几分钟内发现生产网络中的违规情况。</p>\n<ul>\n<li><strong>开放式 API</strong></li>\n</ul>\n<p>利用全面精细的遥感勘测数据，轻松打造个性化的定制应用。生成个性化的定制通知和查询。监控应用层的延迟情况并获取通知。此平台使用 REST API。</p>\n<ul>\n<li><strong>强大的可扩展性</strong></li>\n</ul>\n<p>Tetration Analytics 从数据中心的每个数据包收集遥感勘测数据。它可以在几秒钟内分析数百万个事件并从数十亿条记录中提供切实可行的见解。它可以长期保留数据，而不会丢失细节。<br><a href=\"../docs/171010-01%20_%20程序员如何用技术变现（上）.html\">ddd</a></p>\n"},{"layout":"post","title":"【左耳听风】系列专栏","date":"2019-07-10T03:40:18.000Z","author":"zhaojizhuang","_content":"\n# 【左耳听风】系列专栏\n\n![](https://static001.geekbang.org/resource/image/ba/d8/bab8205ba79564ca7fc10046aa4279d8.jpg?x-oss-process=image/resize,m_fill,h_390,w_296) \n\n\n**洞悉技术的本质，享受科技的乐趣**\n陈皓\n网名“左耳朵耗子”，资深技术专家，骨灰级程序员\n\n## 专栏介绍\n“左耳听风”专栏是由陈皓（网名“左耳朵耗子”）贡献和维护的全年付费专栏。\n\n陈皓，人称耗子叔，是一位四十多岁的中年老男人，体型肥胖，白发苍苍，观点鲜明，个性十足。\n\n他有 20 年软件开发及相关工作经验，先后在阿里巴巴、亚马逊、汤森路透等知名公司任职，对 IT底层技术平台有深入的了解，尤其在大规模分布式系统的基础架构方面颇有研究。此外，他在团队管理、项目管理，以及程序员个人成长等方面也有自己一套独特的见解和方法。\n\n从 2002 年开始写技术博客，到 2009 年左右在独立域名 CoolShell.cn（酷壳）上分享技术观点和实践总结，陈皓通过一篇篇观点鲜明、文风犀利的文章吸引了大量IT从业人员的关注，影响了成千上万程序员在技术选型、求职就业、个人成长等方面的思考和发展。\n\n虽然有些会被读者认同，有些则会引来争议，但他一直坚持观点鲜明的写作风格，并希望这些观点能引起大家的讨论和点评。他认为，只有这样，分享才更有意义，也能让大家都能从中收获更多。\n\n除了继续保持观点鲜明、犀利的行文风格，在“左耳听风”专栏中的每篇文章都是陈皓对自己多年“堵过的枪眼儿”“填过的坑儿”的深入思考和凝练，是一些与个人或企业切身利益相关的内容，或者说是更具指导性、更为商业化的内容。用他自己的话说，是一些非常来之不易的宝贵经验。\n\n## 福利地址\n\n[https://www.zybuluo.com/zhaojizhuang/note/1478325](https://www.zybuluo.com/zhaojizhuang/note/1478325)\n","source":"_posts/zuoertingfeng.md","raw":"---\nlayout: post\ntitle:  \"【左耳听风】系列专栏\"\ndate:   2019-07-10 11:40:18 +0800\ncategories: \ntags:  [\"分布式\", \"人生思考\"]\nauthor: zhaojizhuang\n---\n\n# 【左耳听风】系列专栏\n\n![](https://static001.geekbang.org/resource/image/ba/d8/bab8205ba79564ca7fc10046aa4279d8.jpg?x-oss-process=image/resize,m_fill,h_390,w_296) \n\n\n**洞悉技术的本质，享受科技的乐趣**\n陈皓\n网名“左耳朵耗子”，资深技术专家，骨灰级程序员\n\n## 专栏介绍\n“左耳听风”专栏是由陈皓（网名“左耳朵耗子”）贡献和维护的全年付费专栏。\n\n陈皓，人称耗子叔，是一位四十多岁的中年老男人，体型肥胖，白发苍苍，观点鲜明，个性十足。\n\n他有 20 年软件开发及相关工作经验，先后在阿里巴巴、亚马逊、汤森路透等知名公司任职，对 IT底层技术平台有深入的了解，尤其在大规模分布式系统的基础架构方面颇有研究。此外，他在团队管理、项目管理，以及程序员个人成长等方面也有自己一套独特的见解和方法。\n\n从 2002 年开始写技术博客，到 2009 年左右在独立域名 CoolShell.cn（酷壳）上分享技术观点和实践总结，陈皓通过一篇篇观点鲜明、文风犀利的文章吸引了大量IT从业人员的关注，影响了成千上万程序员在技术选型、求职就业、个人成长等方面的思考和发展。\n\n虽然有些会被读者认同，有些则会引来争议，但他一直坚持观点鲜明的写作风格，并希望这些观点能引起大家的讨论和点评。他认为，只有这样，分享才更有意义，也能让大家都能从中收获更多。\n\n除了继续保持观点鲜明、犀利的行文风格，在“左耳听风”专栏中的每篇文章都是陈皓对自己多年“堵过的枪眼儿”“填过的坑儿”的深入思考和凝练，是一些与个人或企业切身利益相关的内容，或者说是更具指导性、更为商业化的内容。用他自己的话说，是一些非常来之不易的宝贵经验。\n\n## 福利地址\n\n[https://www.zybuluo.com/zhaojizhuang/note/1478325](https://www.zybuluo.com/zhaojizhuang/note/1478325)\n","slug":"zuoertingfeng","published":1,"updated":"2020-05-06T15:55:07.050Z","_id":"ck9vivfv20009bbfl1t5z9g4o","comments":1,"photos":[],"link":"","content":"<h1 id=\"【左耳听风】系列专栏\"><a href=\"#【左耳听风】系列专栏\" class=\"headerlink\" title=\"【左耳听风】系列专栏\"></a>【左耳听风】系列专栏</h1><p><img src=\"https://static001.geekbang.org/resource/image/ba/d8/bab8205ba79564ca7fc10046aa4279d8.jpg?x-oss-process=image/resize,m_fill,h_390,w_296\" alt=\"\"> </p>\n<p><strong>洞悉技术的本质，享受科技的乐趣</strong><br>陈皓<br>网名“左耳朵耗子”，资深技术专家，骨灰级程序员</p>\n<h2 id=\"专栏介绍\"><a href=\"#专栏介绍\" class=\"headerlink\" title=\"专栏介绍\"></a>专栏介绍</h2><p>“左耳听风”专栏是由陈皓（网名“左耳朵耗子”）贡献和维护的全年付费专栏。</p>\n<p>陈皓，人称耗子叔，是一位四十多岁的中年老男人，体型肥胖，白发苍苍，观点鲜明，个性十足。</p>\n<p>他有 20 年软件开发及相关工作经验，先后在阿里巴巴、亚马逊、汤森路透等知名公司任职，对 IT底层技术平台有深入的了解，尤其在大规模分布式系统的基础架构方面颇有研究。此外，他在团队管理、项目管理，以及程序员个人成长等方面也有自己一套独特的见解和方法。</p>\n<p>从 2002 年开始写技术博客，到 2009 年左右在独立域名 CoolShell.cn（酷壳）上分享技术观点和实践总结，陈皓通过一篇篇观点鲜明、文风犀利的文章吸引了大量IT从业人员的关注，影响了成千上万程序员在技术选型、求职就业、个人成长等方面的思考和发展。</p>\n<p>虽然有些会被读者认同，有些则会引来争议，但他一直坚持观点鲜明的写作风格，并希望这些观点能引起大家的讨论和点评。他认为，只有这样，分享才更有意义，也能让大家都能从中收获更多。</p>\n<p>除了继续保持观点鲜明、犀利的行文风格，在“左耳听风”专栏中的每篇文章都是陈皓对自己多年“堵过的枪眼儿”“填过的坑儿”的深入思考和凝练，是一些与个人或企业切身利益相关的内容，或者说是更具指导性、更为商业化的内容。用他自己的话说，是一些非常来之不易的宝贵经验。</p>\n<h2 id=\"福利地址\"><a href=\"#福利地址\" class=\"headerlink\" title=\"福利地址\"></a>福利地址</h2><p><a href=\"https://www.zybuluo.com/zhaojizhuang/note/1478325\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/zhaojizhuang/note/1478325</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【左耳听风】系列专栏\"><a href=\"#【左耳听风】系列专栏\" class=\"headerlink\" title=\"【左耳听风】系列专栏\"></a>【左耳听风】系列专栏</h1><p><img src=\"https://static001.geekbang.org/resource/image/ba/d8/bab8205ba79564ca7fc10046aa4279d8.jpg?x-oss-process=image/resize,m_fill,h_390,w_296\" alt=\"\"> </p>\n<p><strong>洞悉技术的本质，享受科技的乐趣</strong><br>陈皓<br>网名“左耳朵耗子”，资深技术专家，骨灰级程序员</p>\n<h2 id=\"专栏介绍\"><a href=\"#专栏介绍\" class=\"headerlink\" title=\"专栏介绍\"></a>专栏介绍</h2><p>“左耳听风”专栏是由陈皓（网名“左耳朵耗子”）贡献和维护的全年付费专栏。</p>\n<p>陈皓，人称耗子叔，是一位四十多岁的中年老男人，体型肥胖，白发苍苍，观点鲜明，个性十足。</p>\n<p>他有 20 年软件开发及相关工作经验，先后在阿里巴巴、亚马逊、汤森路透等知名公司任职，对 IT底层技术平台有深入的了解，尤其在大规模分布式系统的基础架构方面颇有研究。此外，他在团队管理、项目管理，以及程序员个人成长等方面也有自己一套独特的见解和方法。</p>\n<p>从 2002 年开始写技术博客，到 2009 年左右在独立域名 CoolShell.cn（酷壳）上分享技术观点和实践总结，陈皓通过一篇篇观点鲜明、文风犀利的文章吸引了大量IT从业人员的关注，影响了成千上万程序员在技术选型、求职就业、个人成长等方面的思考和发展。</p>\n<p>虽然有些会被读者认同，有些则会引来争议，但他一直坚持观点鲜明的写作风格，并希望这些观点能引起大家的讨论和点评。他认为，只有这样，分享才更有意义，也能让大家都能从中收获更多。</p>\n<p>除了继续保持观点鲜明、犀利的行文风格，在“左耳听风”专栏中的每篇文章都是陈皓对自己多年“堵过的枪眼儿”“填过的坑儿”的深入思考和凝练，是一些与个人或企业切身利益相关的内容，或者说是更具指导性、更为商业化的内容。用他自己的话说，是一些非常来之不易的宝贵经验。</p>\n<h2 id=\"福利地址\"><a href=\"#福利地址\" class=\"headerlink\" title=\"福利地址\"></a>福利地址</h2><p><a href=\"https://www.zybuluo.com/zhaojizhuang/note/1478325\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/zhaojizhuang/note/1478325</a></p>\n"},{"title":"Go 深入分析","date":"2020-04-02T06:19:10.000Z","author":"zhaojizhuang","mathjax":true,"_content":"\n\n# Go深入分析\n\n\n## go程序是如何运行的\n\n[参考链接1](https://juejin.im/post/5d1c087af265da1bb5651356)\n\n## defer 源码分析\n\n[参考链接](https://eddycjy.com/posts/go/defer/2019-05-27-defer/)\n\ndefer、return、返回值三者的执行逻辑应该是：return最先执行，return负责将结果写入返回值中；接着defer开始执行一些收尾工作；最后函数携带当前返回值退出\n\n## 逃逸分析 堆栈分配\n\n[参考链接](https://eddycjy.com/posts/go/talk/2019-05-20-stack-heap/)\n\n`go build -gcflags '-m -l' xxx.go` 就可以看到逃逸分析的过程和结果\n\n## go性能大杀器 pprof\n\n[参考链接1](https://zhuanlan.zhihu.com/p/71529062)\n[参考链接2](https://github.com/eddycjy/blog/blob/master/content/posts/go/tools/2018-09-15-go-tool-pprof.md)\n\n### \n\n- pprof中自带 web 火焰图，需要安装graphviz\n`go tool pprof -http=:8181 xxx,pprof`\n\n- 下面的语句 可以**结合代码查看哪个函数**用时最多\n`go tool pprof main.go xxxx.prof  进入pprof后执行 list  <函数名> `\n\n### 对于web开放的pprof （在http的go程序中 添加 `_ \"net/http/pprof\"`的import,会增加 debug/pprof 的endpoint),结束后将默认进入 pprof 的交互式命令模式\n\n    ```shell\n    go tool pprof http://localhost:6060/debug/pprof/profile?seconds=60\n    go tool pprof http://localhost:6060/debug/pprof/heap\n    ```\n    \n## go性能大杀器 trace\n\n同pprof\n\n- 对于web开放的pprof （在http的go程序中 添加 `_ \"net/http/pprof\"`的import\n\n```shell    \ncurl http://127.0.0.1:6060/debug/pprof/trace\\?seconds\\=20 > trace.out\ngo tool trace trace.out # 此处和pprof不同，不用加 -http=:8181 这里他会自动选择端口\n```\n\n- 对于后台应用,后台程序main启动时添加 trace.Start(os.Stderr)直接运行下面的命令即可 \n\n`go run main.go 2> trace.out`\n\n它能够跟踪捕获各种执行中的事件，例如 Goroutine 的创建/阻塞/解除阻塞，Syscall 的进入/退出/阻止，GC 事件，Heap 的大小改变，Processor 启动/停止等等\n\n## map原理分析\n\nmap 结构体\n\n```go\ntype hmap struct {\n    count     int    // 元素的个数\n    flags     uint8  // 状态标志\n    B         uint8  // 可以最多容纳 6.5 * 2 ^ B 个元素，6.5为装载因子\n    noverflow uint16 // 溢出的个数\n    hash0     uint32 // 哈希种子\n\n    buckets    unsafe.Pointer // 桶的地址\n    oldbuckets unsafe.Pointer // 旧桶的地址，用于扩容\n    nevacuate  uintptr        // 搬迁进度，小于nevacuate的已经搬迁\n    overflow *[2]*[]*bmap \n}\n// A bucket for a Go map.\ntype bmap struct {\n    // 每个元素hash值的高8位，如果tophash[0] < minTopHash，表示这个桶的搬迁状态\n    tophash [bucketCnt]uint8\n    // bucketCnt是常量8,接下来是8个key、8个value，但是我们不能直接看到；为了优化对齐，go采用了key放在一起，value放在一起的存储方式，\n8个k，8个v得内存地址\n    // 再接下来是hash冲突发生时，下一个溢出桶的地址\n}\n```\nbmap不只tophash还有两个方法 overflow 和setoverflow\n\n```go\nfunc (b *bmap) overflow(t *maptype) *bmap {\n\treturn *(**bmap)(add(unsafe.Pointer(b), uintptr(t.bucketsize)-sys.PtrSize))\n}\n\nfunc (b *bmap) setoverflow(t *maptype, ovf *bmap) {\n\t*(**bmap)(add(unsafe.Pointer(b), uintptr(t.bucketsize)-sys.PtrSize)) = ovf\n}\n```\n\nhmap中的buckets中的原色bucket就是bmap，即 buckets[0],bucket[1],... bucket[2^B-1]如下图\n\n![](https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/hmap.png)\n\n**bucket就是bmap**\n\nbmap 是存放 k-v 的地方，我们把视角拉近，仔细看 bmap 的内部组成。\n\n![](https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/bmap.png)\n\nkey 经过哈希计算后得到哈希值，共 64 个 bit 位（64位机，32位机就不讨论了，现在主流都是64位机），计算它到底要落在哪个桶时，只会用到**最后 B 个 bit 位**。还记得前面提到过的 B 吗？如果 B = 5，那么桶的数量，也就是 buckets 数组的长度是 2^5 = 32\n\n例如，现在有一个 key 经过哈希函数计算后，得到的哈希结果是：\n\n `10010111 | 000011110110110010001111001010100010010110010101010 │ 01010`\n \n用最后的 5 个 bit 位，也就是 `01010`，值为 10，也就是 10 号桶。这个操作实际上就是取余操作，但是取余开销太大，所以代码实现上用的位操作代替。\n\n再用哈希值的高 8 位，找到此 key 在 bucket 中的位置，这是在寻找已有的 key。最开始桶内还没有 key，新加入的 key 会找到第一个空位，放入。\n\nbuckets 编号就是桶编号，当两个不同的 key 落在同一个桶中，也就是发生了哈希冲突。冲突的解决手段是用链表法：在 bucket 中，从前往后找到第一个空位。这样，在查找某个 key 时，先找到对应的桶，再去遍历 bucket 中的 key\n\n**map的两种表示方式**：\n\n- 开放寻址法（hash冲突时，在当前index往后查找第一个空的位置即可）\n- 拉链法\n\nmap在写入过程会发生扩容，`runtime.mapassign` **函数会在以下两种情况发生时触发哈希的扩容**：\n\n- 装载因子已经超过 6.5；装载因子=总数量/桶的数量\n- 哈希使用了太多溢出桶；溢出捅的数量 超过正常桶的数量 即 noverflow 大于 1<<B buckets\n\n**每次都会将桶的数量翻倍**\n\n\n扩容机制：\n- **翻倍扩容**：哈希在存储元素过多时状态会触发扩容操作，每次都会将桶的数量翻倍，整个扩容过程并不是原子的，而是通过 runtime.growWork 增量触发的，在扩容期间访问哈希表时会使用旧桶，向哈希表**写入数据时**会触发旧桶元素的分流；\n- **等量扩容**，**为了解决大量写入、删除造成的内存泄漏问题**，哈希引入了 sameSizeGrow这一机制，在出现较多溢出桶时会对哈希进行『内存整理』减少对空间的占用。\n\n参考链接 \n- [https://www.jianshu.com/p/aa0d4808cbb8](https://www.jianshu.com/p/aa0d4808cbb8)\n\n- [https://segmentfault.com/a/1190000018387055](https://segmentfault.com/a/1190000018387055)\n\n- draveness [https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-hashmap/](https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-hashmap/)\n\n## interface \n\n1. 不含有任何方法的 `interface`\n```go\ntype eface struct { // 16 bytes\n\t_type *_type\n\tdata  unsafe.Pointer\n}\n```\n2. 含有 方法的 `interface`\n\n```go\ntype iface struct { // 16 bytes\n\ttab  *itab\n\tdata unsafe.Pointer\n}\n```\n\t\t\n\n\n|变量类型|结构体实现接口|结构体指针实现接口|\n|----|----|----|\n|结构体初始化变量|\t通过|\t**不通过**|\n|结构体指针初始化变量|\t通过|\t通过|\n\n不通过的如下\n\n```go\ntype Duck interface {\n\tQuack()\n}\n\ntype Cat struct{}\n\nfunc (c *Cat) Quack() {\n\tfmt.Println(\"meow\")\n}\n\nfunc main() {\n\tvar c Duck = Cat{}  // 将结构体变量传到指针类型接受的函数是不行的，反过来可行\n\tc.Quack()\n}\n\n$ go build interface.go\n./interface.go:20:6: cannot use Cat literal (type Cat) as type Duck in assignment:\n\tCat does not implement Duck (Quack method has pointer receiver)\n```\n\nGo中函数调用都是值拷贝，使用 c.Quack() 调用方法时都会发生**值拷贝**：\n\n- 对于 &Cat{} 来说，这意味着拷贝一个新的 &Cat{} 指针，这个指针与原来的指针指向一个相同并且唯一的结构体，所以编译器可以隐式的对变量解引用（dereference）获取指针指向的结构体；\n- 对于 Cat{} 来说，这意味着 Quack 方法会接受一个全新的 Cat{}，因为方法的参数是*Cat，编译器不会无中生有创建一个新的指针；即使编译器可以创建新指针，这个指针指向的也不是最初调用该方法的结构体；\n\n## panic\n\npanic只会调用当前Goroutine的defer（）\n\n```go\nfunc main() {\n\tdefer println(\"in main\")\n\tgo func() {\n\t\tdefer println(\"in goroutine\")\n\t\tpanic(\"\")\n\t}()\n\n\ttime.Sleep(1 * time.Second)\n}\n\n$ go run main.go\nin goroutine\npanic:\n```\n\n![](https://img.draveness.me/2020-01-19-15794253176199-golang-panic-and-defers.png)\n\n## make  new\n\nnew 返回的是指针，指向一个type类型内存空间的指针\nnew等价于   \n\n```go\nvar  a  typeA  // tpyeA的零值\nb:=&a\n\n```\n但是 new不能对 chanel map  slice进行初始化 ，这几个必须经过make进行结构体的初始化才能用\n\n\n## epoll\n\n参考文章 \n1. https://www.jianshu.com/p/dfd940e7fca2\n\n[2 罗培羽：如果这篇文章说不清epoll的本质，那就过来掐死我吧！(1)](https://zhuanlan.zhihu.com/p/63179839)\n\n[3 罗培羽：如果这篇文章说不清epoll的本质，那就过来掐死我吧！(2)](https://zhuanlan.zhihu.com/p/64138532)\n\n[4 罗培羽：如果这篇文章说不清epoll的本质，那就过来掐死我吧！(3)](https://zhuanlan.zhihu.com/p/64746509)\n\n## IO 多路复用 & epoll\n\n目前支持I/O多路复用的系统调用有 `select，pselect，poll，epoll` ，I/O多路复用就是通过一种机制，`一个进程可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作`\n\n### select\n\n调用后select函数会阻塞，直到有描述符就绪（有数据可读、可写），或者超时，函数返回。当select函数返回后，**可以通过遍历fdset，来找到就绪的描述符**。\n\nselect的流程\n\n假如程序同时监视如下图的sock1、sock2和sock3三个socket，那么在调用select之后，**操作系统把进程A分别加入这三个socket的等待队列中**\n\n![](https://pic4.zhimg.com/80/v2-0cccb4976f8f2c2f8107f2b3a5bc46b3_720w.jpg)\n\n当任何一个socket收到数据后，中断程序将唤起进程,将进程从所有**fd（socket）的等待队列中**移除，再将进程加入到工作队列里面\n\n进程A被唤醒后，它知道至少有一个socket接收了数据。**程序需遍历一遍socket列表，可以得到就绪的socket**\n\n缺点：\n\n- 其一，每次调用select都需要将进程加入到所有监视socket的等待队列，每次唤醒都需要从每个队列中移除。这里涉及了两次遍历，而且每次都要将整个fds列表传递给内核，有一定的开销。正是因为遍历操作开销大，出于效率的考量，才会规定select的最大监视数量，**默认只能监视1024个socket**。\n\n- 其二，进程被唤醒后，程序并不知道哪些socket收到数据，还需要遍历一次。\n\n### poll与select一样，只是去掉了 1024的限制\n\n### epoll\n\n`epoll` 事先通过 `epoll_ctl()` 来注册一个文件描述符，一旦基于某个文件描述符就绪时，内核会采用类似 `callback` 的回调机制，迅速激活这个文件描述符，当进程调用 `epoll_wait()` 时便得到通知。(**此处去掉了遍历文件描述符，而是通过监听回调的的机制。这正是epoll的魅力所在**。)\n\nepoll使**用一个文件描述符(`eventpoll`)管理多个描述符**，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次\n\n```c\nint s = socket(AF_INET, SOCK_STREAM, 0);   \nbind(s, ...)\nlisten(s, ...)\n\nint epfd = epoll_create(...);\nepoll_ctl(epfd, ...); //将所有需要监听的socket添加到epfd中\n\nwhile(1){\n    int n = epoll_wait(...)\n    for(接收到数据的socket){\n        //处理\n    }\n}\n```\n流程：\n首先创建 epoll对象\n创建epoll对象后，可以用epoll_ctl添加或删除所要监听的socket\n\n假设计算机中正在运行进程A和进程B，在某时刻进程A运行到了epoll_wait语句。如下图所示，内核会将进程A放入eventpoll的等待队列中，阻塞进程\n\n![](https://pic1.zhimg.com/80/v2-90632d0dc3ded7f91379b848ab53974c_720w.jpg)\n\n当socket接收到数据，**中断程序一方面修改rdlist**，另一方面唤醒eventpoll等待队列中的进程，进程A再次进入运行状态（如下图）。也因为rdlist的存在，**进程A可以知道哪些socket发生了变化**。\n\n![](https://pic4.zhimg.com/80/v2-40bd5825e27cf49b7fd9a59dfcbe4d6f_720w.jpg)\n\n\n","source":"_posts/go shen ru fen xi.md","raw":"---\ntitle:  \"Go 深入分析\"\ndate:   2020-04-02 14:19:10 +0800\ncategories: Go\ntags:  [\"Go\",\"epoll\",\"linux\"]\nauthor: zhaojizhuang\nmathjax: true\n---\n\n\n# Go深入分析\n\n\n## go程序是如何运行的\n\n[参考链接1](https://juejin.im/post/5d1c087af265da1bb5651356)\n\n## defer 源码分析\n\n[参考链接](https://eddycjy.com/posts/go/defer/2019-05-27-defer/)\n\ndefer、return、返回值三者的执行逻辑应该是：return最先执行，return负责将结果写入返回值中；接着defer开始执行一些收尾工作；最后函数携带当前返回值退出\n\n## 逃逸分析 堆栈分配\n\n[参考链接](https://eddycjy.com/posts/go/talk/2019-05-20-stack-heap/)\n\n`go build -gcflags '-m -l' xxx.go` 就可以看到逃逸分析的过程和结果\n\n## go性能大杀器 pprof\n\n[参考链接1](https://zhuanlan.zhihu.com/p/71529062)\n[参考链接2](https://github.com/eddycjy/blog/blob/master/content/posts/go/tools/2018-09-15-go-tool-pprof.md)\n\n### \n\n- pprof中自带 web 火焰图，需要安装graphviz\n`go tool pprof -http=:8181 xxx,pprof`\n\n- 下面的语句 可以**结合代码查看哪个函数**用时最多\n`go tool pprof main.go xxxx.prof  进入pprof后执行 list  <函数名> `\n\n### 对于web开放的pprof （在http的go程序中 添加 `_ \"net/http/pprof\"`的import,会增加 debug/pprof 的endpoint),结束后将默认进入 pprof 的交互式命令模式\n\n    ```shell\n    go tool pprof http://localhost:6060/debug/pprof/profile?seconds=60\n    go tool pprof http://localhost:6060/debug/pprof/heap\n    ```\n    \n## go性能大杀器 trace\n\n同pprof\n\n- 对于web开放的pprof （在http的go程序中 添加 `_ \"net/http/pprof\"`的import\n\n```shell    \ncurl http://127.0.0.1:6060/debug/pprof/trace\\?seconds\\=20 > trace.out\ngo tool trace trace.out # 此处和pprof不同，不用加 -http=:8181 这里他会自动选择端口\n```\n\n- 对于后台应用,后台程序main启动时添加 trace.Start(os.Stderr)直接运行下面的命令即可 \n\n`go run main.go 2> trace.out`\n\n它能够跟踪捕获各种执行中的事件，例如 Goroutine 的创建/阻塞/解除阻塞，Syscall 的进入/退出/阻止，GC 事件，Heap 的大小改变，Processor 启动/停止等等\n\n## map原理分析\n\nmap 结构体\n\n```go\ntype hmap struct {\n    count     int    // 元素的个数\n    flags     uint8  // 状态标志\n    B         uint8  // 可以最多容纳 6.5 * 2 ^ B 个元素，6.5为装载因子\n    noverflow uint16 // 溢出的个数\n    hash0     uint32 // 哈希种子\n\n    buckets    unsafe.Pointer // 桶的地址\n    oldbuckets unsafe.Pointer // 旧桶的地址，用于扩容\n    nevacuate  uintptr        // 搬迁进度，小于nevacuate的已经搬迁\n    overflow *[2]*[]*bmap \n}\n// A bucket for a Go map.\ntype bmap struct {\n    // 每个元素hash值的高8位，如果tophash[0] < minTopHash，表示这个桶的搬迁状态\n    tophash [bucketCnt]uint8\n    // bucketCnt是常量8,接下来是8个key、8个value，但是我们不能直接看到；为了优化对齐，go采用了key放在一起，value放在一起的存储方式，\n8个k，8个v得内存地址\n    // 再接下来是hash冲突发生时，下一个溢出桶的地址\n}\n```\nbmap不只tophash还有两个方法 overflow 和setoverflow\n\n```go\nfunc (b *bmap) overflow(t *maptype) *bmap {\n\treturn *(**bmap)(add(unsafe.Pointer(b), uintptr(t.bucketsize)-sys.PtrSize))\n}\n\nfunc (b *bmap) setoverflow(t *maptype, ovf *bmap) {\n\t*(**bmap)(add(unsafe.Pointer(b), uintptr(t.bucketsize)-sys.PtrSize)) = ovf\n}\n```\n\nhmap中的buckets中的原色bucket就是bmap，即 buckets[0],bucket[1],... bucket[2^B-1]如下图\n\n![](https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/hmap.png)\n\n**bucket就是bmap**\n\nbmap 是存放 k-v 的地方，我们把视角拉近，仔细看 bmap 的内部组成。\n\n![](https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/bmap.png)\n\nkey 经过哈希计算后得到哈希值，共 64 个 bit 位（64位机，32位机就不讨论了，现在主流都是64位机），计算它到底要落在哪个桶时，只会用到**最后 B 个 bit 位**。还记得前面提到过的 B 吗？如果 B = 5，那么桶的数量，也就是 buckets 数组的长度是 2^5 = 32\n\n例如，现在有一个 key 经过哈希函数计算后，得到的哈希结果是：\n\n `10010111 | 000011110110110010001111001010100010010110010101010 │ 01010`\n \n用最后的 5 个 bit 位，也就是 `01010`，值为 10，也就是 10 号桶。这个操作实际上就是取余操作，但是取余开销太大，所以代码实现上用的位操作代替。\n\n再用哈希值的高 8 位，找到此 key 在 bucket 中的位置，这是在寻找已有的 key。最开始桶内还没有 key，新加入的 key 会找到第一个空位，放入。\n\nbuckets 编号就是桶编号，当两个不同的 key 落在同一个桶中，也就是发生了哈希冲突。冲突的解决手段是用链表法：在 bucket 中，从前往后找到第一个空位。这样，在查找某个 key 时，先找到对应的桶，再去遍历 bucket 中的 key\n\n**map的两种表示方式**：\n\n- 开放寻址法（hash冲突时，在当前index往后查找第一个空的位置即可）\n- 拉链法\n\nmap在写入过程会发生扩容，`runtime.mapassign` **函数会在以下两种情况发生时触发哈希的扩容**：\n\n- 装载因子已经超过 6.5；装载因子=总数量/桶的数量\n- 哈希使用了太多溢出桶；溢出捅的数量 超过正常桶的数量 即 noverflow 大于 1<<B buckets\n\n**每次都会将桶的数量翻倍**\n\n\n扩容机制：\n- **翻倍扩容**：哈希在存储元素过多时状态会触发扩容操作，每次都会将桶的数量翻倍，整个扩容过程并不是原子的，而是通过 runtime.growWork 增量触发的，在扩容期间访问哈希表时会使用旧桶，向哈希表**写入数据时**会触发旧桶元素的分流；\n- **等量扩容**，**为了解决大量写入、删除造成的内存泄漏问题**，哈希引入了 sameSizeGrow这一机制，在出现较多溢出桶时会对哈希进行『内存整理』减少对空间的占用。\n\n参考链接 \n- [https://www.jianshu.com/p/aa0d4808cbb8](https://www.jianshu.com/p/aa0d4808cbb8)\n\n- [https://segmentfault.com/a/1190000018387055](https://segmentfault.com/a/1190000018387055)\n\n- draveness [https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-hashmap/](https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-hashmap/)\n\n## interface \n\n1. 不含有任何方法的 `interface`\n```go\ntype eface struct { // 16 bytes\n\t_type *_type\n\tdata  unsafe.Pointer\n}\n```\n2. 含有 方法的 `interface`\n\n```go\ntype iface struct { // 16 bytes\n\ttab  *itab\n\tdata unsafe.Pointer\n}\n```\n\t\t\n\n\n|变量类型|结构体实现接口|结构体指针实现接口|\n|----|----|----|\n|结构体初始化变量|\t通过|\t**不通过**|\n|结构体指针初始化变量|\t通过|\t通过|\n\n不通过的如下\n\n```go\ntype Duck interface {\n\tQuack()\n}\n\ntype Cat struct{}\n\nfunc (c *Cat) Quack() {\n\tfmt.Println(\"meow\")\n}\n\nfunc main() {\n\tvar c Duck = Cat{}  // 将结构体变量传到指针类型接受的函数是不行的，反过来可行\n\tc.Quack()\n}\n\n$ go build interface.go\n./interface.go:20:6: cannot use Cat literal (type Cat) as type Duck in assignment:\n\tCat does not implement Duck (Quack method has pointer receiver)\n```\n\nGo中函数调用都是值拷贝，使用 c.Quack() 调用方法时都会发生**值拷贝**：\n\n- 对于 &Cat{} 来说，这意味着拷贝一个新的 &Cat{} 指针，这个指针与原来的指针指向一个相同并且唯一的结构体，所以编译器可以隐式的对变量解引用（dereference）获取指针指向的结构体；\n- 对于 Cat{} 来说，这意味着 Quack 方法会接受一个全新的 Cat{}，因为方法的参数是*Cat，编译器不会无中生有创建一个新的指针；即使编译器可以创建新指针，这个指针指向的也不是最初调用该方法的结构体；\n\n## panic\n\npanic只会调用当前Goroutine的defer（）\n\n```go\nfunc main() {\n\tdefer println(\"in main\")\n\tgo func() {\n\t\tdefer println(\"in goroutine\")\n\t\tpanic(\"\")\n\t}()\n\n\ttime.Sleep(1 * time.Second)\n}\n\n$ go run main.go\nin goroutine\npanic:\n```\n\n![](https://img.draveness.me/2020-01-19-15794253176199-golang-panic-and-defers.png)\n\n## make  new\n\nnew 返回的是指针，指向一个type类型内存空间的指针\nnew等价于   \n\n```go\nvar  a  typeA  // tpyeA的零值\nb:=&a\n\n```\n但是 new不能对 chanel map  slice进行初始化 ，这几个必须经过make进行结构体的初始化才能用\n\n\n## epoll\n\n参考文章 \n1. https://www.jianshu.com/p/dfd940e7fca2\n\n[2 罗培羽：如果这篇文章说不清epoll的本质，那就过来掐死我吧！(1)](https://zhuanlan.zhihu.com/p/63179839)\n\n[3 罗培羽：如果这篇文章说不清epoll的本质，那就过来掐死我吧！(2)](https://zhuanlan.zhihu.com/p/64138532)\n\n[4 罗培羽：如果这篇文章说不清epoll的本质，那就过来掐死我吧！(3)](https://zhuanlan.zhihu.com/p/64746509)\n\n## IO 多路复用 & epoll\n\n目前支持I/O多路复用的系统调用有 `select，pselect，poll，epoll` ，I/O多路复用就是通过一种机制，`一个进程可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作`\n\n### select\n\n调用后select函数会阻塞，直到有描述符就绪（有数据可读、可写），或者超时，函数返回。当select函数返回后，**可以通过遍历fdset，来找到就绪的描述符**。\n\nselect的流程\n\n假如程序同时监视如下图的sock1、sock2和sock3三个socket，那么在调用select之后，**操作系统把进程A分别加入这三个socket的等待队列中**\n\n![](https://pic4.zhimg.com/80/v2-0cccb4976f8f2c2f8107f2b3a5bc46b3_720w.jpg)\n\n当任何一个socket收到数据后，中断程序将唤起进程,将进程从所有**fd（socket）的等待队列中**移除，再将进程加入到工作队列里面\n\n进程A被唤醒后，它知道至少有一个socket接收了数据。**程序需遍历一遍socket列表，可以得到就绪的socket**\n\n缺点：\n\n- 其一，每次调用select都需要将进程加入到所有监视socket的等待队列，每次唤醒都需要从每个队列中移除。这里涉及了两次遍历，而且每次都要将整个fds列表传递给内核，有一定的开销。正是因为遍历操作开销大，出于效率的考量，才会规定select的最大监视数量，**默认只能监视1024个socket**。\n\n- 其二，进程被唤醒后，程序并不知道哪些socket收到数据，还需要遍历一次。\n\n### poll与select一样，只是去掉了 1024的限制\n\n### epoll\n\n`epoll` 事先通过 `epoll_ctl()` 来注册一个文件描述符，一旦基于某个文件描述符就绪时，内核会采用类似 `callback` 的回调机制，迅速激活这个文件描述符，当进程调用 `epoll_wait()` 时便得到通知。(**此处去掉了遍历文件描述符，而是通过监听回调的的机制。这正是epoll的魅力所在**。)\n\nepoll使**用一个文件描述符(`eventpoll`)管理多个描述符**，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次\n\n```c\nint s = socket(AF_INET, SOCK_STREAM, 0);   \nbind(s, ...)\nlisten(s, ...)\n\nint epfd = epoll_create(...);\nepoll_ctl(epfd, ...); //将所有需要监听的socket添加到epfd中\n\nwhile(1){\n    int n = epoll_wait(...)\n    for(接收到数据的socket){\n        //处理\n    }\n}\n```\n流程：\n首先创建 epoll对象\n创建epoll对象后，可以用epoll_ctl添加或删除所要监听的socket\n\n假设计算机中正在运行进程A和进程B，在某时刻进程A运行到了epoll_wait语句。如下图所示，内核会将进程A放入eventpoll的等待队列中，阻塞进程\n\n![](https://pic1.zhimg.com/80/v2-90632d0dc3ded7f91379b848ab53974c_720w.jpg)\n\n当socket接收到数据，**中断程序一方面修改rdlist**，另一方面唤醒eventpoll等待队列中的进程，进程A再次进入运行状态（如下图）。也因为rdlist的存在，**进程A可以知道哪些socket发生了变化**。\n\n![](https://pic4.zhimg.com/80/v2-40bd5825e27cf49b7fd9a59dfcbe4d6f_720w.jpg)\n\n\n","slug":"go shen ru fen xi","published":1,"updated":"2020-05-06T15:54:48.209Z","_id":"ck9vivqjg000bbbfljd9lpawu","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Go深入分析\"><a href=\"#Go深入分析\" class=\"headerlink\" title=\"Go深入分析\"></a>Go深入分析</h1><h2 id=\"go程序是如何运行的\"><a href=\"#go程序是如何运行的\" class=\"headerlink\" title=\"go程序是如何运行的\"></a>go程序是如何运行的</h2><p><a href=\"https://juejin.im/post/5d1c087af265da1bb5651356\" target=\"_blank\" rel=\"noopener\">参考链接1</a></p>\n<h2 id=\"defer-源码分析\"><a href=\"#defer-源码分析\" class=\"headerlink\" title=\"defer 源码分析\"></a>defer 源码分析</h2><p><a href=\"https://eddycjy.com/posts/go/defer/2019-05-27-defer/\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<p>defer、return、返回值三者的执行逻辑应该是：return最先执行，return负责将结果写入返回值中；接着defer开始执行一些收尾工作；最后函数携带当前返回值退出</p>\n<h2 id=\"逃逸分析-堆栈分配\"><a href=\"#逃逸分析-堆栈分配\" class=\"headerlink\" title=\"逃逸分析 堆栈分配\"></a>逃逸分析 堆栈分配</h2><p><a href=\"https://eddycjy.com/posts/go/talk/2019-05-20-stack-heap/\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<p><code>go build -gcflags &#39;-m -l&#39; xxx.go</code> 就可以看到逃逸分析的过程和结果</p>\n<h2 id=\"go性能大杀器-pprof\"><a href=\"#go性能大杀器-pprof\" class=\"headerlink\" title=\"go性能大杀器 pprof\"></a>go性能大杀器 pprof</h2><p><a href=\"https://zhuanlan.zhihu.com/p/71529062\" target=\"_blank\" rel=\"noopener\">参考链接1</a><br><a href=\"https://github.com/eddycjy/blog/blob/master/content/posts/go/tools/2018-09-15-go-tool-pprof.md\" target=\"_blank\" rel=\"noopener\">参考链接2</a></p>\n<p>### </p>\n<ul>\n<li><p>pprof中自带 web 火焰图，需要安装graphviz<br><code>go tool pprof -http=:8181 xxx,pprof</code></p>\n</li>\n<li><p>下面的语句 可以<strong>结合代码查看哪个函数</strong>用时最多<br><code>go tool pprof main.go xxxx.prof  进入pprof后执行 list  &lt;函数名&gt;</code></p>\n</li>\n</ul>\n<h3 id=\"对于web开放的pprof-（在http的go程序中-添加-quot-net-http-pprof-quot-的import-会增加-debug-pprof-的endpoint-结束后将默认进入-pprof-的交互式命令模式\"><a href=\"#对于web开放的pprof-（在http的go程序中-添加-quot-net-http-pprof-quot-的import-会增加-debug-pprof-的endpoint-结束后将默认进入-pprof-的交互式命令模式\" class=\"headerlink\" title=\"对于web开放的pprof （在http的go程序中 添加 _ &quot;net/http/pprof&quot;的import,会增加 debug/pprof 的endpoint),结束后将默认进入 pprof 的交互式命令模式\"></a>对于web开放的pprof （在http的go程序中 添加 <code>_ &quot;net/http/pprof&quot;</code>的import,会增加 debug/pprof 的endpoint),结束后将默认进入 pprof 的交互式命令模式</h3><pre><code><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go tool pprof http://localhost:6060/debug/pprof/profile?seconds=60</span><br><span class=\"line\">go tool pprof http://localhost:6060/debug/pprof/heap</span><br></pre></td></tr></table></figure>\n</code></pre><h2 id=\"go性能大杀器-trace\"><a href=\"#go性能大杀器-trace\" class=\"headerlink\" title=\"go性能大杀器 trace\"></a>go性能大杀器 trace</h2><p>同pprof</p>\n<ul>\n<li>对于web开放的pprof （在http的go程序中 添加 <code>_ &quot;net/http/pprof&quot;</code>的import</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://127.0.0.1:6060/debug/pprof/trace\\?seconds\\=20 &gt; trace.out</span><br><span class=\"line\">go tool trace trace.out # 此处和pprof不同，不用加 -http=:8181 这里他会自动选择端口</span><br></pre></td></tr></table></figure>\n<ul>\n<li>对于后台应用,后台程序main启动时添加 trace.Start(os.Stderr)直接运行下面的命令即可 </li>\n</ul>\n<p><code>go run main.go 2&gt; trace.out</code></p>\n<p>它能够跟踪捕获各种执行中的事件，例如 Goroutine 的创建/阻塞/解除阻塞，Syscall 的进入/退出/阻止，GC 事件，Heap 的大小改变，Processor 启动/停止等等</p>\n<h2 id=\"map原理分析\"><a href=\"#map原理分析\" class=\"headerlink\" title=\"map原理分析\"></a>map原理分析</h2><p>map 结构体</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> hmap <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    count     <span class=\"keyword\">int</span>    <span class=\"comment\">// 元素的个数</span></span><br><span class=\"line\">    flags     <span class=\"keyword\">uint8</span>  <span class=\"comment\">// 状态标志</span></span><br><span class=\"line\">    B         <span class=\"keyword\">uint8</span>  <span class=\"comment\">// 可以最多容纳 6.5 * 2 ^ B 个元素，6.5为装载因子</span></span><br><span class=\"line\">    noverflow <span class=\"keyword\">uint16</span> <span class=\"comment\">// 溢出的个数</span></span><br><span class=\"line\">    hash0     <span class=\"keyword\">uint32</span> <span class=\"comment\">// 哈希种子</span></span><br><span class=\"line\"></span><br><span class=\"line\">    buckets    unsafe.Pointer <span class=\"comment\">// 桶的地址</span></span><br><span class=\"line\">    oldbuckets unsafe.Pointer <span class=\"comment\">// 旧桶的地址，用于扩容</span></span><br><span class=\"line\">    nevacuate  <span class=\"keyword\">uintptr</span>        <span class=\"comment\">// 搬迁进度，小于nevacuate的已经搬迁</span></span><br><span class=\"line\">    overflow *[<span class=\"number\">2</span>]*[]*bmap </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// A bucket for a Go map.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> bmap <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 每个元素hash值的高8位，如果tophash[0] &lt; minTopHash，表示这个桶的搬迁状态</span></span><br><span class=\"line\">    tophash [bucketCnt]<span class=\"keyword\">uint8</span></span><br><span class=\"line\">    <span class=\"comment\">// bucketCnt是常量8,接下来是8个key、8个value，但是我们不能直接看到；为了优化对齐，go采用了key放在一起，value放在一起的存储方式，</span></span><br><span class=\"line\"><span class=\"number\">8</span>个k，<span class=\"number\">8</span>个v得内存地址</span><br><span class=\"line\">    <span class=\"comment\">// 再接下来是hash冲突发生时，下一个溢出桶的地址</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>bmap不只tophash还有两个方法 overflow 和setoverflow</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b *bmap)</span> <span class=\"title\">overflow</span><span class=\"params\">(t *maptype)</span> *<span class=\"title\">bmap</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *(**bmap)(add(unsafe.Pointer(b), <span class=\"keyword\">uintptr</span>(t.bucketsize)-sys.PtrSize))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b *bmap)</span> <span class=\"title\">setoverflow</span><span class=\"params\">(t *maptype, ovf *bmap)</span></span> &#123;</span><br><span class=\"line\">\t*(**bmap)(add(unsafe.Pointer(b), <span class=\"keyword\">uintptr</span>(t.bucketsize)-sys.PtrSize)) = ovf</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>hmap中的buckets中的原色bucket就是bmap，即 buckets[0],bucket[1],… bucket[2^B-1]如下图</p>\n<p><img src=\"https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/hmap.png\" alt=\"\"></p>\n<p><strong>bucket就是bmap</strong></p>\n<p>bmap 是存放 k-v 的地方，我们把视角拉近，仔细看 bmap 的内部组成。</p>\n<p><img src=\"https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/bmap.png\" alt=\"\"></p>\n<p>key 经过哈希计算后得到哈希值，共 64 个 bit 位（64位机，32位机就不讨论了，现在主流都是64位机），计算它到底要落在哪个桶时，只会用到<strong>最后 B 个 bit 位</strong>。还记得前面提到过的 B 吗？如果 B = 5，那么桶的数量，也就是 buckets 数组的长度是 2^5 = 32</p>\n<p>例如，现在有一个 key 经过哈希函数计算后，得到的哈希结果是：</p>\n<p> <code>10010111 | 000011110110110010001111001010100010010110010101010 │ 01010</code></p>\n<p>用最后的 5 个 bit 位，也就是 <code>01010</code>，值为 10，也就是 10 号桶。这个操作实际上就是取余操作，但是取余开销太大，所以代码实现上用的位操作代替。</p>\n<p>再用哈希值的高 8 位，找到此 key 在 bucket 中的位置，这是在寻找已有的 key。最开始桶内还没有 key，新加入的 key 会找到第一个空位，放入。</p>\n<p>buckets 编号就是桶编号，当两个不同的 key 落在同一个桶中，也就是发生了哈希冲突。冲突的解决手段是用链表法：在 bucket 中，从前往后找到第一个空位。这样，在查找某个 key 时，先找到对应的桶，再去遍历 bucket 中的 key</p>\n<p><strong>map的两种表示方式</strong>：</p>\n<ul>\n<li>开放寻址法（hash冲突时，在当前index往后查找第一个空的位置即可）</li>\n<li>拉链法</li>\n</ul>\n<p>map在写入过程会发生扩容，<code>runtime.mapassign</code> <strong>函数会在以下两种情况发生时触发哈希的扩容</strong>：</p>\n<ul>\n<li>装载因子已经超过 6.5；装载因子=总数量/桶的数量</li>\n<li>哈希使用了太多溢出桶；溢出捅的数量 超过正常桶的数量 即 noverflow 大于 1&lt;&lt;B buckets</li>\n</ul>\n<p><strong>每次都会将桶的数量翻倍</strong></p>\n<p>扩容机制：</p>\n<ul>\n<li><strong>翻倍扩容</strong>：哈希在存储元素过多时状态会触发扩容操作，每次都会将桶的数量翻倍，整个扩容过程并不是原子的，而是通过 runtime.growWork 增量触发的，在扩容期间访问哈希表时会使用旧桶，向哈希表<strong>写入数据时</strong>会触发旧桶元素的分流；</li>\n<li><strong>等量扩容</strong>，<strong>为了解决大量写入、删除造成的内存泄漏问题</strong>，哈希引入了 sameSizeGrow这一机制，在出现较多溢出桶时会对哈希进行『内存整理』减少对空间的占用。</li>\n</ul>\n<p>参考链接 </p>\n<ul>\n<li><p><a href=\"https://www.jianshu.com/p/aa0d4808cbb8\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/aa0d4808cbb8</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000018387055\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000018387055</a></p>\n</li>\n<li><p>draveness <a href=\"https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-hashmap/\" target=\"_blank\" rel=\"noopener\">https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-hashmap/</a></p>\n</li>\n</ul>\n<h2 id=\"interface\"><a href=\"#interface\" class=\"headerlink\" title=\"interface\"></a>interface</h2><ol>\n<li><p>不含有任何方法的 <code>interface</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> eface <span class=\"keyword\">struct</span> &#123; <span class=\"comment\">// 16 bytes</span></span><br><span class=\"line\">\t_type *_type</span><br><span class=\"line\">\tdata  unsafe.Pointer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>含有 方法的 <code>interface</code></p>\n</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> iface <span class=\"keyword\">struct</span> &#123; <span class=\"comment\">// 16 bytes</span></span><br><span class=\"line\">\ttab  *itab</span><br><span class=\"line\">\tdata unsafe.Pointer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>变量类型</th>\n<th>结构体实现接口</th>\n<th>结构体指针实现接口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>结构体初始化变量</td>\n<td>通过</td>\n<td><strong>不通过</strong></td>\n</tr>\n<tr>\n<td>结构体指针初始化变量</td>\n<td>通过</td>\n<td>通过</td>\n</tr>\n</tbody>\n</table>\n<p>不通过的如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Duck <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tQuack()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Cat <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Cat)</span> <span class=\"title\">Quack</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"meow\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> c Duck = Cat&#123;&#125;  <span class=\"comment\">// 将结构体变量传到指针类型接受的函数是不行的，反过来可行</span></span><br><span class=\"line\">\tc.Quack()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"keyword\">go</span> build <span class=\"keyword\">interface</span>.<span class=\"keyword\">go</span></span><br><span class=\"line\">./<span class=\"keyword\">interface</span>.<span class=\"keyword\">go</span>:<span class=\"number\">20</span>:<span class=\"number\">6</span>: cannot use Cat literal (<span class=\"keyword\">type</span> Cat) as <span class=\"keyword\">type</span> Duck in assignment:</span><br><span class=\"line\">\tCat does not implement Duck (Quack method has pointer receiver)</span><br></pre></td></tr></table></figure>\n<p>Go中函数调用都是值拷贝，使用 c.Quack() 调用方法时都会发生<strong>值拷贝</strong>：</p>\n<ul>\n<li>对于 &amp;Cat{} 来说，这意味着拷贝一个新的 &amp;Cat{} 指针，这个指针与原来的指针指向一个相同并且唯一的结构体，所以编译器可以隐式的对变量解引用（dereference）获取指针指向的结构体；</li>\n<li>对于 Cat{} 来说，这意味着 Quack 方法会接受一个全新的 Cat{}，因为方法的参数是*Cat，编译器不会无中生有创建一个新的指针；即使编译器可以创建新指针，这个指针指向的也不是最初调用该方法的结构体；</li>\n</ul>\n<h2 id=\"panic\"><a href=\"#panic\" class=\"headerlink\" title=\"panic\"></a>panic</h2><p>panic只会调用当前Goroutine的defer（）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"built_in\">println</span>(<span class=\"string\">\"in main\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> <span class=\"built_in\">println</span>(<span class=\"string\">\"in goroutine\"</span>)</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">1</span> * time.Second)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"keyword\">go</span> run main.<span class=\"keyword\">go</span></span><br><span class=\"line\">in goroutine</span><br><span class=\"line\"><span class=\"built_in\">panic</span>:</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img.draveness.me/2020-01-19-15794253176199-golang-panic-and-defers.png\" alt=\"\"></p>\n<h2 id=\"make-new\"><a href=\"#make-new\" class=\"headerlink\" title=\"make  new\"></a>make  new</h2><p>new 返回的是指针，指向一个type类型内存空间的指针<br>new等价于   </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span>  a  typeA  <span class=\"comment\">// tpyeA的零值</span></span><br><span class=\"line\">b:=&amp;a</span><br></pre></td></tr></table></figure>\n<p>但是 new不能对 chanel map  slice进行初始化 ，这几个必须经过make进行结构体的初始化才能用</p>\n<h2 id=\"epoll\"><a href=\"#epoll\" class=\"headerlink\" title=\"epoll\"></a>epoll</h2><p>参考文章 </p>\n<ol>\n<li><a href=\"https://www.jianshu.com/p/dfd940e7fca2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/dfd940e7fca2</a></li>\n</ol>\n<p><a href=\"https://zhuanlan.zhihu.com/p/63179839\" target=\"_blank\" rel=\"noopener\">2 罗培羽：如果这篇文章说不清epoll的本质，那就过来掐死我吧！(1)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/64138532\" target=\"_blank\" rel=\"noopener\">3 罗培羽：如果这篇文章说不清epoll的本质，那就过来掐死我吧！(2)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/64746509\" target=\"_blank\" rel=\"noopener\">4 罗培羽：如果这篇文章说不清epoll的本质，那就过来掐死我吧！(3)</a></p>\n<h2 id=\"IO-多路复用-amp-epoll\"><a href=\"#IO-多路复用-amp-epoll\" class=\"headerlink\" title=\"IO 多路复用 &amp; epoll\"></a>IO 多路复用 &amp; epoll</h2><p>目前支持I/O多路复用的系统调用有 <code>select，pselect，poll，epoll</code> ，I/O多路复用就是通过一种机制，<code>一个进程可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作</code></p>\n<h3 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a>select</h3><p>调用后select函数会阻塞，直到有描述符就绪（有数据可读、可写），或者超时，函数返回。当select函数返回后，<strong>可以通过遍历fdset，来找到就绪的描述符</strong>。</p>\n<p>select的流程</p>\n<p>假如程序同时监视如下图的sock1、sock2和sock3三个socket，那么在调用select之后，<strong>操作系统把进程A分别加入这三个socket的等待队列中</strong></p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-0cccb4976f8f2c2f8107f2b3a5bc46b3_720w.jpg\" alt=\"\"></p>\n<p>当任何一个socket收到数据后，中断程序将唤起进程,将进程从所有<strong>fd（socket）的等待队列中</strong>移除，再将进程加入到工作队列里面</p>\n<p>进程A被唤醒后，它知道至少有一个socket接收了数据。<strong>程序需遍历一遍socket列表，可以得到就绪的socket</strong></p>\n<p>缺点：</p>\n<ul>\n<li><p>其一，每次调用select都需要将进程加入到所有监视socket的等待队列，每次唤醒都需要从每个队列中移除。这里涉及了两次遍历，而且每次都要将整个fds列表传递给内核，有一定的开销。正是因为遍历操作开销大，出于效率的考量，才会规定select的最大监视数量，<strong>默认只能监视1024个socket</strong>。</p>\n</li>\n<li><p>其二，进程被唤醒后，程序并不知道哪些socket收到数据，还需要遍历一次。</p>\n</li>\n</ul>\n<h3 id=\"poll与select一样，只是去掉了-1024的限制\"><a href=\"#poll与select一样，只是去掉了-1024的限制\" class=\"headerlink\" title=\"poll与select一样，只是去掉了 1024的限制\"></a>poll与select一样，只是去掉了 1024的限制</h3><h3 id=\"epoll-1\"><a href=\"#epoll-1\" class=\"headerlink\" title=\"epoll\"></a>epoll</h3><p><code>epoll</code> 事先通过 <code>epoll_ctl()</code> 来注册一个文件描述符，一旦基于某个文件描述符就绪时，内核会采用类似 <code>callback</code> 的回调机制，迅速激活这个文件描述符，当进程调用 <code>epoll_wait()</code> 时便得到通知。(<strong>此处去掉了遍历文件描述符，而是通过监听回调的的机制。这正是epoll的魅力所在</strong>。)</p>\n<p>epoll使<strong>用一个文件描述符(<code>eventpoll</code>)管理多个描述符</strong>，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> s = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);   </span><br><span class=\"line\">bind(s, ...)</span><br><span class=\"line\">listen(s, ...)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> epfd = epoll_create(...);</span><br><span class=\"line\">epoll_ctl(epfd, ...); <span class=\"comment\">//将所有需要监听的socket添加到epfd中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = epoll_wait(...)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(接收到数据的socket)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//处理</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>流程：<br>首先创建 epoll对象<br>创建epoll对象后，可以用epoll_ctl添加或删除所要监听的socket</p>\n<p>假设计算机中正在运行进程A和进程B，在某时刻进程A运行到了epoll_wait语句。如下图所示，内核会将进程A放入eventpoll的等待队列中，阻塞进程</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-90632d0dc3ded7f91379b848ab53974c_720w.jpg\" alt=\"\"></p>\n<p>当socket接收到数据，<strong>中断程序一方面修改rdlist</strong>，另一方面唤醒eventpoll等待队列中的进程，进程A再次进入运行状态（如下图）。也因为rdlist的存在，<strong>进程A可以知道哪些socket发生了变化</strong>。</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-40bd5825e27cf49b7fd9a59dfcbe4d6f_720w.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Go深入分析\"><a href=\"#Go深入分析\" class=\"headerlink\" title=\"Go深入分析\"></a>Go深入分析</h1><h2 id=\"go程序是如何运行的\"><a href=\"#go程序是如何运行的\" class=\"headerlink\" title=\"go程序是如何运行的\"></a>go程序是如何运行的</h2><p><a href=\"https://juejin.im/post/5d1c087af265da1bb5651356\" target=\"_blank\" rel=\"noopener\">参考链接1</a></p>\n<h2 id=\"defer-源码分析\"><a href=\"#defer-源码分析\" class=\"headerlink\" title=\"defer 源码分析\"></a>defer 源码分析</h2><p><a href=\"https://eddycjy.com/posts/go/defer/2019-05-27-defer/\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<p>defer、return、返回值三者的执行逻辑应该是：return最先执行，return负责将结果写入返回值中；接着defer开始执行一些收尾工作；最后函数携带当前返回值退出</p>\n<h2 id=\"逃逸分析-堆栈分配\"><a href=\"#逃逸分析-堆栈分配\" class=\"headerlink\" title=\"逃逸分析 堆栈分配\"></a>逃逸分析 堆栈分配</h2><p><a href=\"https://eddycjy.com/posts/go/talk/2019-05-20-stack-heap/\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<p><code>go build -gcflags &#39;-m -l&#39; xxx.go</code> 就可以看到逃逸分析的过程和结果</p>\n<h2 id=\"go性能大杀器-pprof\"><a href=\"#go性能大杀器-pprof\" class=\"headerlink\" title=\"go性能大杀器 pprof\"></a>go性能大杀器 pprof</h2><p><a href=\"https://zhuanlan.zhihu.com/p/71529062\" target=\"_blank\" rel=\"noopener\">参考链接1</a><br><a href=\"https://github.com/eddycjy/blog/blob/master/content/posts/go/tools/2018-09-15-go-tool-pprof.md\" target=\"_blank\" rel=\"noopener\">参考链接2</a></p>\n<p>### </p>\n<ul>\n<li><p>pprof中自带 web 火焰图，需要安装graphviz<br><code>go tool pprof -http=:8181 xxx,pprof</code></p>\n</li>\n<li><p>下面的语句 可以<strong>结合代码查看哪个函数</strong>用时最多<br><code>go tool pprof main.go xxxx.prof  进入pprof后执行 list  &lt;函数名&gt;</code></p>\n</li>\n</ul>\n<h3 id=\"对于web开放的pprof-（在http的go程序中-添加-quot-net-http-pprof-quot-的import-会增加-debug-pprof-的endpoint-结束后将默认进入-pprof-的交互式命令模式\"><a href=\"#对于web开放的pprof-（在http的go程序中-添加-quot-net-http-pprof-quot-的import-会增加-debug-pprof-的endpoint-结束后将默认进入-pprof-的交互式命令模式\" class=\"headerlink\" title=\"对于web开放的pprof （在http的go程序中 添加 _ &quot;net/http/pprof&quot;的import,会增加 debug/pprof 的endpoint),结束后将默认进入 pprof 的交互式命令模式\"></a>对于web开放的pprof （在http的go程序中 添加 <code>_ &quot;net/http/pprof&quot;</code>的import,会增加 debug/pprof 的endpoint),结束后将默认进入 pprof 的交互式命令模式</h3><pre><code><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go tool pprof http://localhost:6060/debug/pprof/profile?seconds=60</span><br><span class=\"line\">go tool pprof http://localhost:6060/debug/pprof/heap</span><br></pre></td></tr></table></figure>\n</code></pre><h2 id=\"go性能大杀器-trace\"><a href=\"#go性能大杀器-trace\" class=\"headerlink\" title=\"go性能大杀器 trace\"></a>go性能大杀器 trace</h2><p>同pprof</p>\n<ul>\n<li>对于web开放的pprof （在http的go程序中 添加 <code>_ &quot;net/http/pprof&quot;</code>的import</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://127.0.0.1:6060/debug/pprof/trace\\?seconds\\=20 &gt; trace.out</span><br><span class=\"line\">go tool trace trace.out # 此处和pprof不同，不用加 -http=:8181 这里他会自动选择端口</span><br></pre></td></tr></table></figure>\n<ul>\n<li>对于后台应用,后台程序main启动时添加 trace.Start(os.Stderr)直接运行下面的命令即可 </li>\n</ul>\n<p><code>go run main.go 2&gt; trace.out</code></p>\n<p>它能够跟踪捕获各种执行中的事件，例如 Goroutine 的创建/阻塞/解除阻塞，Syscall 的进入/退出/阻止，GC 事件，Heap 的大小改变，Processor 启动/停止等等</p>\n<h2 id=\"map原理分析\"><a href=\"#map原理分析\" class=\"headerlink\" title=\"map原理分析\"></a>map原理分析</h2><p>map 结构体</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> hmap <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    count     <span class=\"keyword\">int</span>    <span class=\"comment\">// 元素的个数</span></span><br><span class=\"line\">    flags     <span class=\"keyword\">uint8</span>  <span class=\"comment\">// 状态标志</span></span><br><span class=\"line\">    B         <span class=\"keyword\">uint8</span>  <span class=\"comment\">// 可以最多容纳 6.5 * 2 ^ B 个元素，6.5为装载因子</span></span><br><span class=\"line\">    noverflow <span class=\"keyword\">uint16</span> <span class=\"comment\">// 溢出的个数</span></span><br><span class=\"line\">    hash0     <span class=\"keyword\">uint32</span> <span class=\"comment\">// 哈希种子</span></span><br><span class=\"line\"></span><br><span class=\"line\">    buckets    unsafe.Pointer <span class=\"comment\">// 桶的地址</span></span><br><span class=\"line\">    oldbuckets unsafe.Pointer <span class=\"comment\">// 旧桶的地址，用于扩容</span></span><br><span class=\"line\">    nevacuate  <span class=\"keyword\">uintptr</span>        <span class=\"comment\">// 搬迁进度，小于nevacuate的已经搬迁</span></span><br><span class=\"line\">    overflow *[<span class=\"number\">2</span>]*[]*bmap </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// A bucket for a Go map.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> bmap <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 每个元素hash值的高8位，如果tophash[0] &lt; minTopHash，表示这个桶的搬迁状态</span></span><br><span class=\"line\">    tophash [bucketCnt]<span class=\"keyword\">uint8</span></span><br><span class=\"line\">    <span class=\"comment\">// bucketCnt是常量8,接下来是8个key、8个value，但是我们不能直接看到；为了优化对齐，go采用了key放在一起，value放在一起的存储方式，</span></span><br><span class=\"line\"><span class=\"number\">8</span>个k，<span class=\"number\">8</span>个v得内存地址</span><br><span class=\"line\">    <span class=\"comment\">// 再接下来是hash冲突发生时，下一个溢出桶的地址</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>bmap不只tophash还有两个方法 overflow 和setoverflow</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b *bmap)</span> <span class=\"title\">overflow</span><span class=\"params\">(t *maptype)</span> *<span class=\"title\">bmap</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *(**bmap)(add(unsafe.Pointer(b), <span class=\"keyword\">uintptr</span>(t.bucketsize)-sys.PtrSize))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b *bmap)</span> <span class=\"title\">setoverflow</span><span class=\"params\">(t *maptype, ovf *bmap)</span></span> &#123;</span><br><span class=\"line\">\t*(**bmap)(add(unsafe.Pointer(b), <span class=\"keyword\">uintptr</span>(t.bucketsize)-sys.PtrSize)) = ovf</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>hmap中的buckets中的原色bucket就是bmap，即 buckets[0],bucket[1],… bucket[2^B-1]如下图</p>\n<p><img src=\"https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/hmap.png\" alt=\"\"></p>\n<p><strong>bucket就是bmap</strong></p>\n<p>bmap 是存放 k-v 的地方，我们把视角拉近，仔细看 bmap 的内部组成。</p>\n<p><img src=\"https://raw.githubusercontent.com/zhaojizhuang/zhaojizhuang.github.io/master/_posts/images/bmap.png\" alt=\"\"></p>\n<p>key 经过哈希计算后得到哈希值，共 64 个 bit 位（64位机，32位机就不讨论了，现在主流都是64位机），计算它到底要落在哪个桶时，只会用到<strong>最后 B 个 bit 位</strong>。还记得前面提到过的 B 吗？如果 B = 5，那么桶的数量，也就是 buckets 数组的长度是 2^5 = 32</p>\n<p>例如，现在有一个 key 经过哈希函数计算后，得到的哈希结果是：</p>\n<p> <code>10010111 | 000011110110110010001111001010100010010110010101010 │ 01010</code></p>\n<p>用最后的 5 个 bit 位，也就是 <code>01010</code>，值为 10，也就是 10 号桶。这个操作实际上就是取余操作，但是取余开销太大，所以代码实现上用的位操作代替。</p>\n<p>再用哈希值的高 8 位，找到此 key 在 bucket 中的位置，这是在寻找已有的 key。最开始桶内还没有 key，新加入的 key 会找到第一个空位，放入。</p>\n<p>buckets 编号就是桶编号，当两个不同的 key 落在同一个桶中，也就是发生了哈希冲突。冲突的解决手段是用链表法：在 bucket 中，从前往后找到第一个空位。这样，在查找某个 key 时，先找到对应的桶，再去遍历 bucket 中的 key</p>\n<p><strong>map的两种表示方式</strong>：</p>\n<ul>\n<li>开放寻址法（hash冲突时，在当前index往后查找第一个空的位置即可）</li>\n<li>拉链法</li>\n</ul>\n<p>map在写入过程会发生扩容，<code>runtime.mapassign</code> <strong>函数会在以下两种情况发生时触发哈希的扩容</strong>：</p>\n<ul>\n<li>装载因子已经超过 6.5；装载因子=总数量/桶的数量</li>\n<li>哈希使用了太多溢出桶；溢出捅的数量 超过正常桶的数量 即 noverflow 大于 1&lt;&lt;B buckets</li>\n</ul>\n<p><strong>每次都会将桶的数量翻倍</strong></p>\n<p>扩容机制：</p>\n<ul>\n<li><strong>翻倍扩容</strong>：哈希在存储元素过多时状态会触发扩容操作，每次都会将桶的数量翻倍，整个扩容过程并不是原子的，而是通过 runtime.growWork 增量触发的，在扩容期间访问哈希表时会使用旧桶，向哈希表<strong>写入数据时</strong>会触发旧桶元素的分流；</li>\n<li><strong>等量扩容</strong>，<strong>为了解决大量写入、删除造成的内存泄漏问题</strong>，哈希引入了 sameSizeGrow这一机制，在出现较多溢出桶时会对哈希进行『内存整理』减少对空间的占用。</li>\n</ul>\n<p>参考链接 </p>\n<ul>\n<li><p><a href=\"https://www.jianshu.com/p/aa0d4808cbb8\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/aa0d4808cbb8</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000018387055\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000018387055</a></p>\n</li>\n<li><p>draveness <a href=\"https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-hashmap/\" target=\"_blank\" rel=\"noopener\">https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-hashmap/</a></p>\n</li>\n</ul>\n<h2 id=\"interface\"><a href=\"#interface\" class=\"headerlink\" title=\"interface\"></a>interface</h2><ol>\n<li><p>不含有任何方法的 <code>interface</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> eface <span class=\"keyword\">struct</span> &#123; <span class=\"comment\">// 16 bytes</span></span><br><span class=\"line\">\t_type *_type</span><br><span class=\"line\">\tdata  unsafe.Pointer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>含有 方法的 <code>interface</code></p>\n</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> iface <span class=\"keyword\">struct</span> &#123; <span class=\"comment\">// 16 bytes</span></span><br><span class=\"line\">\ttab  *itab</span><br><span class=\"line\">\tdata unsafe.Pointer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>变量类型</th>\n<th>结构体实现接口</th>\n<th>结构体指针实现接口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>结构体初始化变量</td>\n<td>通过</td>\n<td><strong>不通过</strong></td>\n</tr>\n<tr>\n<td>结构体指针初始化变量</td>\n<td>通过</td>\n<td>通过</td>\n</tr>\n</tbody>\n</table>\n<p>不通过的如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Duck <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tQuack()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Cat <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Cat)</span> <span class=\"title\">Quack</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"meow\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> c Duck = Cat&#123;&#125;  <span class=\"comment\">// 将结构体变量传到指针类型接受的函数是不行的，反过来可行</span></span><br><span class=\"line\">\tc.Quack()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"keyword\">go</span> build <span class=\"keyword\">interface</span>.<span class=\"keyword\">go</span></span><br><span class=\"line\">./<span class=\"keyword\">interface</span>.<span class=\"keyword\">go</span>:<span class=\"number\">20</span>:<span class=\"number\">6</span>: cannot use Cat literal (<span class=\"keyword\">type</span> Cat) as <span class=\"keyword\">type</span> Duck in assignment:</span><br><span class=\"line\">\tCat does not implement Duck (Quack method has pointer receiver)</span><br></pre></td></tr></table></figure>\n<p>Go中函数调用都是值拷贝，使用 c.Quack() 调用方法时都会发生<strong>值拷贝</strong>：</p>\n<ul>\n<li>对于 &amp;Cat{} 来说，这意味着拷贝一个新的 &amp;Cat{} 指针，这个指针与原来的指针指向一个相同并且唯一的结构体，所以编译器可以隐式的对变量解引用（dereference）获取指针指向的结构体；</li>\n<li>对于 Cat{} 来说，这意味着 Quack 方法会接受一个全新的 Cat{}，因为方法的参数是*Cat，编译器不会无中生有创建一个新的指针；即使编译器可以创建新指针，这个指针指向的也不是最初调用该方法的结构体；</li>\n</ul>\n<h2 id=\"panic\"><a href=\"#panic\" class=\"headerlink\" title=\"panic\"></a>panic</h2><p>panic只会调用当前Goroutine的defer（）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"built_in\">println</span>(<span class=\"string\">\"in main\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> <span class=\"built_in\">println</span>(<span class=\"string\">\"in goroutine\"</span>)</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">1</span> * time.Second)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"keyword\">go</span> run main.<span class=\"keyword\">go</span></span><br><span class=\"line\">in goroutine</span><br><span class=\"line\"><span class=\"built_in\">panic</span>:</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img.draveness.me/2020-01-19-15794253176199-golang-panic-and-defers.png\" alt=\"\"></p>\n<h2 id=\"make-new\"><a href=\"#make-new\" class=\"headerlink\" title=\"make  new\"></a>make  new</h2><p>new 返回的是指针，指向一个type类型内存空间的指针<br>new等价于   </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span>  a  typeA  <span class=\"comment\">// tpyeA的零值</span></span><br><span class=\"line\">b:=&amp;a</span><br></pre></td></tr></table></figure>\n<p>但是 new不能对 chanel map  slice进行初始化 ，这几个必须经过make进行结构体的初始化才能用</p>\n<h2 id=\"epoll\"><a href=\"#epoll\" class=\"headerlink\" title=\"epoll\"></a>epoll</h2><p>参考文章 </p>\n<ol>\n<li><a href=\"https://www.jianshu.com/p/dfd940e7fca2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/dfd940e7fca2</a></li>\n</ol>\n<p><a href=\"https://zhuanlan.zhihu.com/p/63179839\" target=\"_blank\" rel=\"noopener\">2 罗培羽：如果这篇文章说不清epoll的本质，那就过来掐死我吧！(1)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/64138532\" target=\"_blank\" rel=\"noopener\">3 罗培羽：如果这篇文章说不清epoll的本质，那就过来掐死我吧！(2)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/64746509\" target=\"_blank\" rel=\"noopener\">4 罗培羽：如果这篇文章说不清epoll的本质，那就过来掐死我吧！(3)</a></p>\n<h2 id=\"IO-多路复用-amp-epoll\"><a href=\"#IO-多路复用-amp-epoll\" class=\"headerlink\" title=\"IO 多路复用 &amp; epoll\"></a>IO 多路复用 &amp; epoll</h2><p>目前支持I/O多路复用的系统调用有 <code>select，pselect，poll，epoll</code> ，I/O多路复用就是通过一种机制，<code>一个进程可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作</code></p>\n<h3 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a>select</h3><p>调用后select函数会阻塞，直到有描述符就绪（有数据可读、可写），或者超时，函数返回。当select函数返回后，<strong>可以通过遍历fdset，来找到就绪的描述符</strong>。</p>\n<p>select的流程</p>\n<p>假如程序同时监视如下图的sock1、sock2和sock3三个socket，那么在调用select之后，<strong>操作系统把进程A分别加入这三个socket的等待队列中</strong></p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-0cccb4976f8f2c2f8107f2b3a5bc46b3_720w.jpg\" alt=\"\"></p>\n<p>当任何一个socket收到数据后，中断程序将唤起进程,将进程从所有<strong>fd（socket）的等待队列中</strong>移除，再将进程加入到工作队列里面</p>\n<p>进程A被唤醒后，它知道至少有一个socket接收了数据。<strong>程序需遍历一遍socket列表，可以得到就绪的socket</strong></p>\n<p>缺点：</p>\n<ul>\n<li><p>其一，每次调用select都需要将进程加入到所有监视socket的等待队列，每次唤醒都需要从每个队列中移除。这里涉及了两次遍历，而且每次都要将整个fds列表传递给内核，有一定的开销。正是因为遍历操作开销大，出于效率的考量，才会规定select的最大监视数量，<strong>默认只能监视1024个socket</strong>。</p>\n</li>\n<li><p>其二，进程被唤醒后，程序并不知道哪些socket收到数据，还需要遍历一次。</p>\n</li>\n</ul>\n<h3 id=\"poll与select一样，只是去掉了-1024的限制\"><a href=\"#poll与select一样，只是去掉了-1024的限制\" class=\"headerlink\" title=\"poll与select一样，只是去掉了 1024的限制\"></a>poll与select一样，只是去掉了 1024的限制</h3><h3 id=\"epoll-1\"><a href=\"#epoll-1\" class=\"headerlink\" title=\"epoll\"></a>epoll</h3><p><code>epoll</code> 事先通过 <code>epoll_ctl()</code> 来注册一个文件描述符，一旦基于某个文件描述符就绪时，内核会采用类似 <code>callback</code> 的回调机制，迅速激活这个文件描述符，当进程调用 <code>epoll_wait()</code> 时便得到通知。(<strong>此处去掉了遍历文件描述符，而是通过监听回调的的机制。这正是epoll的魅力所在</strong>。)</p>\n<p>epoll使<strong>用一个文件描述符(<code>eventpoll</code>)管理多个描述符</strong>，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> s = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);   </span><br><span class=\"line\">bind(s, ...)</span><br><span class=\"line\">listen(s, ...)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> epfd = epoll_create(...);</span><br><span class=\"line\">epoll_ctl(epfd, ...); <span class=\"comment\">//将所有需要监听的socket添加到epfd中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = epoll_wait(...)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(接收到数据的socket)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//处理</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>流程：<br>首先创建 epoll对象<br>创建epoll对象后，可以用epoll_ctl添加或删除所要监听的socket</p>\n<p>假设计算机中正在运行进程A和进程B，在某时刻进程A运行到了epoll_wait语句。如下图所示，内核会将进程A放入eventpoll的等待队列中，阻塞进程</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-90632d0dc3ded7f91379b848ab53974c_720w.jpg\" alt=\"\"></p>\n<p>当socket接收到数据，<strong>中断程序一方面修改rdlist</strong>，另一方面唤醒eventpoll等待队列中的进程，进程A再次进入运行状态（如下图）。也因为rdlist的存在，<strong>进程A可以知道哪些socket发生了变化</strong>。</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-40bd5825e27cf49b7fd9a59dfcbe4d6f_720w.jpg\" alt=\"\"></p>\n"},{"layout":"post","title":"k8s iptables","date":"2020-03-28T05:19:10.000Z","author":"zhaojizhuang","_content":"\n\n# k8s svc之 iptables规则\n\n\n## iptables规则\n\n> 参考 [http://www.zsythink.net/archives/tag/iptables/](http://www.zsythink.net/archives/tag/iptables/)\n\n![](http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_2.png)\n\n**用户空间，例如从pod中流出的流量就是从ouput链流出**\n\n上图表示的`iptables`的链，链 和表的关系如下，以`PREROUTING`链为例\n\n![](http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_4.png)\n\n这幅图是什么意思呢？它的意思是说，prerouting\"链\"只拥有nat表、raw表和mangle表所对应的功能，所以，prerouting中的规则只能存放于nat表、raw表和mangle表中。\n\n## NAT \n\n**NAT的三种类型:**\n\n- SNAT  \n```shell\niptables -t nat -A POSTROUTING -s 10.8.0.0/255.255.255.0 -o eth0 -j SNAT --to-source192.168.5.3\n# 目标流向eth0，源地址是xxx的，做SNAT，源地址改为xxx\n```\n- DNAT\n```shell\niptables-t nat -A POSTROUTING -s 10.8.0.0/255.255.255.0 -o eth0 -j SNAT --to-source192.168.5.3-192.168.5.5\n```\n- MASQUERADE 是SNAT的一种，可以自动获取网卡的ip来做SNAT，如果是ADSL这种动态ip的，如果用SNAT需要经常更改iptables规则 \n```shell\niptables-t nat -A POSTROUTING -s 10.8.0.0/255.255.255.0 -o eth0 -j MASQUERADE\n# 源地址是xxx，流向eth0的，流向做自动化SNAT\n```\n*masquerade* 应为英文伪装\n\n## iptabels 常用命令\n\n```shell\niptables [-t 表名] 管理选项 [链名] [匹配条件] [-j 控制类型]\n# 控制类型包括 ACCETP REJECT DROP LOG 还有自定义的链（k8s的链）等\niptabels -t nat（表名） -nvL POSTROUTING(链的名字)\n```\nhttps://www.jianshu.com/p/ee4ee15d3658\n\n## 分析k8s下的iptables规则\n\n以如下 `service` 为例 \n\n```yaml\nName:                     testapi-smzdm-com\nNamespace:                zhongce-v2-0\nLabels:                   <none>\nSelector:                 zdm-app-owner=testapi-smzdm-com\nType:                     LoadBalancer\nIP:                       172.17.185.22\nLoadBalancer Ingress:     10.42.162.216\nPort:                     <unset>  809/TCP\nTargetPort:               809/TCP\nNodePort:                 <unset>  39746/TCP\nEndpoints:                10.42.147.255:809,10.42.38.222:809\nSession Affinity:         None\nExternal Traffic Policy:  Cluster\nEvents:                   <none>\n```\n\n即 `cluster ip` 为 `172.17.185.22` 后端 `podip` 为 `10.42.147.25510.42.38.222`\n此外还有1个 `loadbalancer ip` `10.42.162.216`\n\n### svc的访问路径\n\n    - 集群内部，通过 `clusterip` 到访问到后端 `pod\n    - 集群外部，通过直接访问`nodeport`；或者通过 `elb` 负载均衡到 `node` 上再通过 `nodeport` 访问\n\n### cluster ip 的基本原理\n\n如果是集群内的应用访问 cluster ip，那就是从**用户空间**访问**内核空间网络协议栈**,走的是 `OUTPUT` 链\n\n1. 从`OUTPUT` 链开始\n\n```shell\n[root@10-42-8-102 ~]# iptables -t nat -nvL OUTPUT\nChain OUTPUT (policy ACCEPT 4 packets, 240 bytes)\n pkts bytes target     prot opt in     out     source               destination         \n3424K  209M KUBE-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */\n\n```\n2. `OUTPUT`下的规则 直接把流量交给 `KUBE-SERVICES` 链\n\n```shell\n[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-SERVICES\nChain KUBE-SERVICES (2 references)\n pkts bytes target     prot opt in     out     source               destination     \n    0     0 KUBE-MARK-MASQ  tcp  --  *      *      0.0.0.0/0        172.17.185.22        /* zhongce-v2-0/testapi-smzdm-com: cluster IP */ tcp dpt:809\n    0     0 KUBE-SVC-G3OM5DSD2HHDMN6U  tcp  --  *      *       0.0.0.0/0            172.17.185.22        /* zhongce-v2-0/testapi-smzdm-com: cluster IP */ tcp dpt:809\n   10   520 KUBE-FW-G3OM5DSD2HHDMN6U  tcp  --  *      *       0.0.0.0/0            10.42.162.216        /* zhongce-v2-0/testapi-smzdm-com: loadbalancer IP */ tcp dpt:809\n     0     0 KUBE-NODEPORTS  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service nodeports; NOTE: this must be the last rule in this chain */ ADDRTY\n```\n上述3条规则是顺序执行的：\n\n- 第1条规则匹配发往 `Cluster IP` `172.17.185.22` 的流量，跳转到了 `KUBE-MARK-MASQ` 链进一步处理，其作用就是打了一个 `MARK` ，稍后展开说明。\n- 第2条规则匹配发往 `Cluster IP` `172.17.185.22` 的流量，跳转到了 `KUBE-SVC-G3OM5DSD2HHDMN6U` 链进一步处理，稍后展开说明。\n- 第3条规则匹配发往集群外 `LB IP` 的 `10.42.162.216` 的流量，跳转到了\n`KUBE-FW-G3OM5DSD2HHDMN6U` 链进一步处理，稍后展开说明。\n- 第4条  KUBE-NODEPORTS的规则在末尾，只要dst ip是node 本机ip的话 （（–dst-type LOCAL），就跳转到KUBE-NODEPORTS做进一步判定：）\n    **第2条规则要做dnat转发到后端具体的后端pod上**\n\n```shell\n[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-SVC-G3OM5DSD2HHDMN6U\nChain KUBE-SVC-G3OM5DSD2HHDMN6U (3 references)\n pkts bytes target     prot opt in     out     source               destination         \n   18   936 KUBE-SEP-JT2KW6YUTVPLLGV6  all  --  *      *       0.0.0.0/0            0.0.0.0/0            statistic mode random probability 0.50000000000\n   21  1092 KUBE-SEP-VETLC6CJY2HOK3EL  all  --  *      *       0.0.0.0/0            0.0.0.0/0\n```\n\n**两条 对应 后端pod的链**\n\n```shell\n[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-SEP-JT2KW6YUTVPLLGV6\nChain KUBE-SEP-JT2KW6YUTVPLLGV6 (1 references)\n pkts bytes target     prot opt in     out     source               destination         \n    0     0 KUBE-MARK-MASQ  all  --  *      *       10.42.147.255        0.0.0.0/0           \n   26  1352 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp to:10.42.147.255:809\n\n[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-SEP-VETLC6CJY2HOK3EL\nChain KUBE-SEP-VETLC6CJY2HOK3EL (1 references)\n pkts bytes target     prot opt in     out     source               destination         \n    0     0 KUBE-MARK-MASQ  all  --  *      *       10.42.38.222         0.0.0.0/0           \n    2   104 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp to:10.42.38.222:809\n```\n\n流量经过路由表从eth0出去，在流量流出本机之前会经过POSTROUTING 链\n\n### 在流量离开本机的时候会经过 `POSTROUTING` 链\n\n```shell\n[root@10-42-8-102 ~]# iptables -t nat -nvL POSTROUTING\nChain POSTROUTING (policy ACCEPT 274 packets, 17340 bytes)\n pkts bytes target     prot opt in     out     source               destination         \n 632M   36G KUBE-POSTROUTING  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes postrouting rules */\n\n[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-POSTROUTING\nChain KUBE-POSTROUTING (1 references)\n pkts bytes target     prot opt in     out     source               destination         \n  526 27352 MASQUERADE  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service traffic requiring SNAT */ mark match 0x4000/0x4000\n```\n\n其实直接就跳转到了 `KUBE-POSTROUTING`，然后匹配打过`0x4000 MARK` 的流量，将其做 `SNAT` 转换，而这个 `MARK` 其实就是之前没说的 `KUBE-MARK-MASQ` 做的事情\n\n```shell\n[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-MARK-MASQ\nChain KUBE-MARK-MASQ (183 references)\n pkts bytes target     prot opt in     out     source               destination         \n  492 25604 MARK       all  --  *      *       0.0.0.0/0            0.0.0.0/0            MARK or 0x4000\n```\n当流量离开本机时，src IP会被修改为node的IP，而不是发出流量的POD IP了\n\n### 通过loadbalance ip进行访问\n\n最后还有一个KUBE-FW-G3OM5DSD2HHDMN6U链没有讲，从本机发往LB IP的流量要做啥事情呢？\n\n**其实也是让流量直接发往具体某个Endpoints，就别真的发往LB了，这样才能获得最佳的延迟**：\n```shell\n[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-FW-G3OM5DSD2HHDMN6U\nChain KUBE-FW-G3OM5DSD2HHDMN6U (1 references)\n pkts bytes target     prot opt in     out     source               destination         \n    2   104 KUBE-MARK-MASQ  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* zhongce-v2-0/testapi-smzdm-com: loadbalancer IP */\n    2   104 KUBE-SVC-G3OM5DSD2HHDMN6U  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* zhongce-v2-0/testapi-smzdm-com: loadbalancer IP */\n    0     0 KUBE-MARK-DROP  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* zhongce-v2-0/testapi-smzdm-com: loadbalancer IP */\n```\n\n### 通过nodeport 来访问\n\n回顾一下 KUBE_SERVICES规则\n\n```shell\n[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-SERVICES\nChain KUBE-SERVICES (2 references)\n pkts bytes target     prot opt in     out     source               destination     \n    0     0 KUBE-MARK-MASQ  tcp  --  *      *      !172.17.0.0/16        172.17.185.22        /* zhongce-v2-0/testapi-smzdm-com: cluster IP */ tcp dpt:809\n    0     0 KUBE-SVC-G3OM5DSD2HHDMN6U  tcp  --  *      *       0.0.0.0/0            172.17.185.22        /* zhongce-v2-0/testapi-smzdm-com: cluster IP */ tcp dpt:809\n   10   520 KUBE-FW-G3OM5DSD2HHDMN6U  tcp  --  *      *       0.0.0.0/0            10.42.162.216        /* zhongce-v2-0/testapi-smzdm-com: loadbalancer IP */ tcp dpt:809\n    0     0 KUBE-NODEPORTS  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service nodeports; NOTE: this must be the last rule in this chain */ ADDRTYPE match dst-type LOCAL\n```\n**`KUBE-NODEPORTS` 是最后一条规则**\n\n```shell\n[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-NODEPORTS\nChain KUBE-NODEPORTS (1 references)\n pkts bytes target     prot opt in     out     source               destination        \n    0     0 KUBE-MARK-MASQ  tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* zhongce-v2-0/testapi-smzdm-com: */ tcp dpt:39746\n    0     0 KUBE-SVC-G3OM5DSD2HHDMN6U  tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* zhongce-v2-0/testapi-smzdm-com: */ tcp dpt:39746\n```\n第1条匹配dst port如果是39746，那么就打mark。\n第2条匹配dst port如果是39746，那么就跳到负载均衡链做DNAT改写。\n\n\n### 总结\n\n- `KUBE-SERVICES` 链的规则存在于 `OUTPUT POSTROUTING PREROUTING` 三个链上\n- 对于 `KUBE-SERVICES KUBE-NDOEPORTS-xxx KUBE-SEP-xxx` 下都会对符合条件（匹配条件）的规则打上MARK 可以重复打MARK\n- 在流量出node的时候做SNAT\n\n\n## 从集群内出去的流量怎么回来\n\n出node的流量在做SNAT的时候，netfilter有个连接跟踪机制，保存在 conntrack记录中\n\n这就是Netfilter的连接跟踪（conntrack）功能了。对于TCP协议来讲，肯定是上来先建立一个连接，可以用`源/目的IP+源/目的端口`  （四元组），唯一标识一条连接，这个连接会放在conntrack表里面。\n当时是这台机器去请求163网站的，虽然源地址已经Snat成公网IP地址了，但是 `conntrack` 表里面还是有这个连接的记录的。当163网站返回数据的时候，会找到记录，从而找到正确的私网IP地\n址。\n\n## 参考文档\n[k8s 的iptales规则详解](https://yuerblog.cc/2019/12/09/k8s-%E6%89%8B%E6%8A%8A%E6%89%8B%E5%88%86%E6%9E%90service%E7%94%9F%E6%88%90%E7%9A%84iptables%E8%A7%84%E5%88%99/)\n\n","source":"_posts/k8s-iptageles.md","raw":"---\nlayout: post\ntitle:  \"k8s iptables\"\ndate:   2020-03-28 13:19:10 +0800\ncategories: k8s\ntags:  [\"k8s\", \"iptables\"]\nauthor: zhaojizhuang\n\n---\n\n\n# k8s svc之 iptables规则\n\n\n## iptables规则\n\n> 参考 [http://www.zsythink.net/archives/tag/iptables/](http://www.zsythink.net/archives/tag/iptables/)\n\n![](http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_2.png)\n\n**用户空间，例如从pod中流出的流量就是从ouput链流出**\n\n上图表示的`iptables`的链，链 和表的关系如下，以`PREROUTING`链为例\n\n![](http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_4.png)\n\n这幅图是什么意思呢？它的意思是说，prerouting\"链\"只拥有nat表、raw表和mangle表所对应的功能，所以，prerouting中的规则只能存放于nat表、raw表和mangle表中。\n\n## NAT \n\n**NAT的三种类型:**\n\n- SNAT  \n```shell\niptables -t nat -A POSTROUTING -s 10.8.0.0/255.255.255.0 -o eth0 -j SNAT --to-source192.168.5.3\n# 目标流向eth0，源地址是xxx的，做SNAT，源地址改为xxx\n```\n- DNAT\n```shell\niptables-t nat -A POSTROUTING -s 10.8.0.0/255.255.255.0 -o eth0 -j SNAT --to-source192.168.5.3-192.168.5.5\n```\n- MASQUERADE 是SNAT的一种，可以自动获取网卡的ip来做SNAT，如果是ADSL这种动态ip的，如果用SNAT需要经常更改iptables规则 \n```shell\niptables-t nat -A POSTROUTING -s 10.8.0.0/255.255.255.0 -o eth0 -j MASQUERADE\n# 源地址是xxx，流向eth0的，流向做自动化SNAT\n```\n*masquerade* 应为英文伪装\n\n## iptabels 常用命令\n\n```shell\niptables [-t 表名] 管理选项 [链名] [匹配条件] [-j 控制类型]\n# 控制类型包括 ACCETP REJECT DROP LOG 还有自定义的链（k8s的链）等\niptabels -t nat（表名） -nvL POSTROUTING(链的名字)\n```\nhttps://www.jianshu.com/p/ee4ee15d3658\n\n## 分析k8s下的iptables规则\n\n以如下 `service` 为例 \n\n```yaml\nName:                     testapi-smzdm-com\nNamespace:                zhongce-v2-0\nLabels:                   <none>\nSelector:                 zdm-app-owner=testapi-smzdm-com\nType:                     LoadBalancer\nIP:                       172.17.185.22\nLoadBalancer Ingress:     10.42.162.216\nPort:                     <unset>  809/TCP\nTargetPort:               809/TCP\nNodePort:                 <unset>  39746/TCP\nEndpoints:                10.42.147.255:809,10.42.38.222:809\nSession Affinity:         None\nExternal Traffic Policy:  Cluster\nEvents:                   <none>\n```\n\n即 `cluster ip` 为 `172.17.185.22` 后端 `podip` 为 `10.42.147.25510.42.38.222`\n此外还有1个 `loadbalancer ip` `10.42.162.216`\n\n### svc的访问路径\n\n    - 集群内部，通过 `clusterip` 到访问到后端 `pod\n    - 集群外部，通过直接访问`nodeport`；或者通过 `elb` 负载均衡到 `node` 上再通过 `nodeport` 访问\n\n### cluster ip 的基本原理\n\n如果是集群内的应用访问 cluster ip，那就是从**用户空间**访问**内核空间网络协议栈**,走的是 `OUTPUT` 链\n\n1. 从`OUTPUT` 链开始\n\n```shell\n[root@10-42-8-102 ~]# iptables -t nat -nvL OUTPUT\nChain OUTPUT (policy ACCEPT 4 packets, 240 bytes)\n pkts bytes target     prot opt in     out     source               destination         \n3424K  209M KUBE-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */\n\n```\n2. `OUTPUT`下的规则 直接把流量交给 `KUBE-SERVICES` 链\n\n```shell\n[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-SERVICES\nChain KUBE-SERVICES (2 references)\n pkts bytes target     prot opt in     out     source               destination     \n    0     0 KUBE-MARK-MASQ  tcp  --  *      *      0.0.0.0/0        172.17.185.22        /* zhongce-v2-0/testapi-smzdm-com: cluster IP */ tcp dpt:809\n    0     0 KUBE-SVC-G3OM5DSD2HHDMN6U  tcp  --  *      *       0.0.0.0/0            172.17.185.22        /* zhongce-v2-0/testapi-smzdm-com: cluster IP */ tcp dpt:809\n   10   520 KUBE-FW-G3OM5DSD2HHDMN6U  tcp  --  *      *       0.0.0.0/0            10.42.162.216        /* zhongce-v2-0/testapi-smzdm-com: loadbalancer IP */ tcp dpt:809\n     0     0 KUBE-NODEPORTS  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service nodeports; NOTE: this must be the last rule in this chain */ ADDRTY\n```\n上述3条规则是顺序执行的：\n\n- 第1条规则匹配发往 `Cluster IP` `172.17.185.22` 的流量，跳转到了 `KUBE-MARK-MASQ` 链进一步处理，其作用就是打了一个 `MARK` ，稍后展开说明。\n- 第2条规则匹配发往 `Cluster IP` `172.17.185.22` 的流量，跳转到了 `KUBE-SVC-G3OM5DSD2HHDMN6U` 链进一步处理，稍后展开说明。\n- 第3条规则匹配发往集群外 `LB IP` 的 `10.42.162.216` 的流量，跳转到了\n`KUBE-FW-G3OM5DSD2HHDMN6U` 链进一步处理，稍后展开说明。\n- 第4条  KUBE-NODEPORTS的规则在末尾，只要dst ip是node 本机ip的话 （（–dst-type LOCAL），就跳转到KUBE-NODEPORTS做进一步判定：）\n    **第2条规则要做dnat转发到后端具体的后端pod上**\n\n```shell\n[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-SVC-G3OM5DSD2HHDMN6U\nChain KUBE-SVC-G3OM5DSD2HHDMN6U (3 references)\n pkts bytes target     prot opt in     out     source               destination         \n   18   936 KUBE-SEP-JT2KW6YUTVPLLGV6  all  --  *      *       0.0.0.0/0            0.0.0.0/0            statistic mode random probability 0.50000000000\n   21  1092 KUBE-SEP-VETLC6CJY2HOK3EL  all  --  *      *       0.0.0.0/0            0.0.0.0/0\n```\n\n**两条 对应 后端pod的链**\n\n```shell\n[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-SEP-JT2KW6YUTVPLLGV6\nChain KUBE-SEP-JT2KW6YUTVPLLGV6 (1 references)\n pkts bytes target     prot opt in     out     source               destination         \n    0     0 KUBE-MARK-MASQ  all  --  *      *       10.42.147.255        0.0.0.0/0           \n   26  1352 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp to:10.42.147.255:809\n\n[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-SEP-VETLC6CJY2HOK3EL\nChain KUBE-SEP-VETLC6CJY2HOK3EL (1 references)\n pkts bytes target     prot opt in     out     source               destination         \n    0     0 KUBE-MARK-MASQ  all  --  *      *       10.42.38.222         0.0.0.0/0           \n    2   104 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp to:10.42.38.222:809\n```\n\n流量经过路由表从eth0出去，在流量流出本机之前会经过POSTROUTING 链\n\n### 在流量离开本机的时候会经过 `POSTROUTING` 链\n\n```shell\n[root@10-42-8-102 ~]# iptables -t nat -nvL POSTROUTING\nChain POSTROUTING (policy ACCEPT 274 packets, 17340 bytes)\n pkts bytes target     prot opt in     out     source               destination         \n 632M   36G KUBE-POSTROUTING  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes postrouting rules */\n\n[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-POSTROUTING\nChain KUBE-POSTROUTING (1 references)\n pkts bytes target     prot opt in     out     source               destination         \n  526 27352 MASQUERADE  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service traffic requiring SNAT */ mark match 0x4000/0x4000\n```\n\n其实直接就跳转到了 `KUBE-POSTROUTING`，然后匹配打过`0x4000 MARK` 的流量，将其做 `SNAT` 转换，而这个 `MARK` 其实就是之前没说的 `KUBE-MARK-MASQ` 做的事情\n\n```shell\n[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-MARK-MASQ\nChain KUBE-MARK-MASQ (183 references)\n pkts bytes target     prot opt in     out     source               destination         \n  492 25604 MARK       all  --  *      *       0.0.0.0/0            0.0.0.0/0            MARK or 0x4000\n```\n当流量离开本机时，src IP会被修改为node的IP，而不是发出流量的POD IP了\n\n### 通过loadbalance ip进行访问\n\n最后还有一个KUBE-FW-G3OM5DSD2HHDMN6U链没有讲，从本机发往LB IP的流量要做啥事情呢？\n\n**其实也是让流量直接发往具体某个Endpoints，就别真的发往LB了，这样才能获得最佳的延迟**：\n```shell\n[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-FW-G3OM5DSD2HHDMN6U\nChain KUBE-FW-G3OM5DSD2HHDMN6U (1 references)\n pkts bytes target     prot opt in     out     source               destination         \n    2   104 KUBE-MARK-MASQ  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* zhongce-v2-0/testapi-smzdm-com: loadbalancer IP */\n    2   104 KUBE-SVC-G3OM5DSD2HHDMN6U  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* zhongce-v2-0/testapi-smzdm-com: loadbalancer IP */\n    0     0 KUBE-MARK-DROP  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* zhongce-v2-0/testapi-smzdm-com: loadbalancer IP */\n```\n\n### 通过nodeport 来访问\n\n回顾一下 KUBE_SERVICES规则\n\n```shell\n[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-SERVICES\nChain KUBE-SERVICES (2 references)\n pkts bytes target     prot opt in     out     source               destination     \n    0     0 KUBE-MARK-MASQ  tcp  --  *      *      !172.17.0.0/16        172.17.185.22        /* zhongce-v2-0/testapi-smzdm-com: cluster IP */ tcp dpt:809\n    0     0 KUBE-SVC-G3OM5DSD2HHDMN6U  tcp  --  *      *       0.0.0.0/0            172.17.185.22        /* zhongce-v2-0/testapi-smzdm-com: cluster IP */ tcp dpt:809\n   10   520 KUBE-FW-G3OM5DSD2HHDMN6U  tcp  --  *      *       0.0.0.0/0            10.42.162.216        /* zhongce-v2-0/testapi-smzdm-com: loadbalancer IP */ tcp dpt:809\n    0     0 KUBE-NODEPORTS  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service nodeports; NOTE: this must be the last rule in this chain */ ADDRTYPE match dst-type LOCAL\n```\n**`KUBE-NODEPORTS` 是最后一条规则**\n\n```shell\n[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-NODEPORTS\nChain KUBE-NODEPORTS (1 references)\n pkts bytes target     prot opt in     out     source               destination        \n    0     0 KUBE-MARK-MASQ  tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* zhongce-v2-0/testapi-smzdm-com: */ tcp dpt:39746\n    0     0 KUBE-SVC-G3OM5DSD2HHDMN6U  tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* zhongce-v2-0/testapi-smzdm-com: */ tcp dpt:39746\n```\n第1条匹配dst port如果是39746，那么就打mark。\n第2条匹配dst port如果是39746，那么就跳到负载均衡链做DNAT改写。\n\n\n### 总结\n\n- `KUBE-SERVICES` 链的规则存在于 `OUTPUT POSTROUTING PREROUTING` 三个链上\n- 对于 `KUBE-SERVICES KUBE-NDOEPORTS-xxx KUBE-SEP-xxx` 下都会对符合条件（匹配条件）的规则打上MARK 可以重复打MARK\n- 在流量出node的时候做SNAT\n\n\n## 从集群内出去的流量怎么回来\n\n出node的流量在做SNAT的时候，netfilter有个连接跟踪机制，保存在 conntrack记录中\n\n这就是Netfilter的连接跟踪（conntrack）功能了。对于TCP协议来讲，肯定是上来先建立一个连接，可以用`源/目的IP+源/目的端口`  （四元组），唯一标识一条连接，这个连接会放在conntrack表里面。\n当时是这台机器去请求163网站的，虽然源地址已经Snat成公网IP地址了，但是 `conntrack` 表里面还是有这个连接的记录的。当163网站返回数据的时候，会找到记录，从而找到正确的私网IP地\n址。\n\n## 参考文档\n[k8s 的iptales规则详解](https://yuerblog.cc/2019/12/09/k8s-%E6%89%8B%E6%8A%8A%E6%89%8B%E5%88%86%E6%9E%90service%E7%94%9F%E6%88%90%E7%9A%84iptables%E8%A7%84%E5%88%99/)\n\n","slug":"k8s-iptageles","published":1,"updated":"2020-05-06T15:55:07.050Z","_id":"ck9vivtel000gbbflzopiufwy","comments":1,"photos":[],"link":"","content":"<h1 id=\"k8s-svc之-iptables规则\"><a href=\"#k8s-svc之-iptables规则\" class=\"headerlink\" title=\"k8s svc之 iptables规则\"></a>k8s svc之 iptables规则</h1><h2 id=\"iptables规则\"><a href=\"#iptables规则\" class=\"headerlink\" title=\"iptables规则\"></a>iptables规则</h2><blockquote>\n<p>参考 <a href=\"http://www.zsythink.net/archives/tag/iptables/\" target=\"_blank\" rel=\"noopener\">http://www.zsythink.net/archives/tag/iptables/</a></p>\n</blockquote>\n<p><img src=\"http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_2.png\" alt=\"\"></p>\n<p><strong>用户空间，例如从pod中流出的流量就是从ouput链流出</strong></p>\n<p>上图表示的<code>iptables</code>的链，链 和表的关系如下，以<code>PREROUTING</code>链为例</p>\n<p><img src=\"http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_4.png\" alt=\"\"></p>\n<p>这幅图是什么意思呢？它的意思是说，prerouting”链”只拥有nat表、raw表和mangle表所对应的功能，所以，prerouting中的规则只能存放于nat表、raw表和mangle表中。</p>\n<h2 id=\"NAT\"><a href=\"#NAT\" class=\"headerlink\" title=\"NAT\"></a>NAT</h2><p><strong>NAT的三种类型:</strong></p>\n<ul>\n<li><p>SNAT  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A POSTROUTING -s 10.8.0.0/255.255.255.0 -o eth0 -j SNAT --to-source192.168.5.3</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 目标流向eth0，源地址是xxx的，做SNAT，源地址改为xxx</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DNAT</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables-t nat -A POSTROUTING -s 10.8.0.0/255.255.255.0 -o eth0 -j SNAT --to-source192.168.5.3-192.168.5.5</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MASQUERADE 是SNAT的一种，可以自动获取网卡的ip来做SNAT，如果是ADSL这种动态ip的，如果用SNAT需要经常更改iptables规则 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables-t nat -A POSTROUTING -s 10.8.0.0/255.255.255.0 -o eth0 -j MASQUERADE</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 源地址是xxx，流向eth0的，流向做自动化SNAT</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><em>masquerade</em> 应为英文伪装</p>\n<h2 id=\"iptabels-常用命令\"><a href=\"#iptabels-常用命令\" class=\"headerlink\" title=\"iptabels 常用命令\"></a>iptabels 常用命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables [-t 表名] 管理选项 [链名] [匹配条件] [-j 控制类型]</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 控制类型包括 ACCETP REJECT DROP LOG 还有自定义的链（k8s的链）等</span></span><br><span class=\"line\">iptabels -t nat（表名） -nvL POSTROUTING(链的名字)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.jianshu.com/p/ee4ee15d3658\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ee4ee15d3658</a></p>\n<h2 id=\"分析k8s下的iptables规则\"><a href=\"#分析k8s下的iptables规则\" class=\"headerlink\" title=\"分析k8s下的iptables规则\"></a>分析k8s下的iptables规则</h2><p>以如下 <code>service</code> 为例 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Name:</span>                     <span class=\"string\">testapi-smzdm-com</span></span><br><span class=\"line\"><span class=\"attr\">Namespace:</span>                <span class=\"string\">zhongce-v2-0</span></span><br><span class=\"line\"><span class=\"attr\">Labels:</span>                   <span class=\"string\">&lt;none&gt;</span></span><br><span class=\"line\"><span class=\"attr\">Selector:</span>                 <span class=\"string\">zdm-app-owner=testapi-smzdm-com</span></span><br><span class=\"line\"><span class=\"attr\">Type:</span>                     <span class=\"string\">LoadBalancer</span></span><br><span class=\"line\"><span class=\"attr\">IP:</span>                       <span class=\"number\">172.17</span><span class=\"number\">.185</span><span class=\"number\">.22</span></span><br><span class=\"line\"><span class=\"string\">LoadBalancer</span> <span class=\"attr\">Ingress:</span>     <span class=\"number\">10.42</span><span class=\"number\">.162</span><span class=\"number\">.216</span></span><br><span class=\"line\"><span class=\"attr\">Port:</span>                     <span class=\"string\">&lt;unset&gt;</span>  <span class=\"number\">809</span><span class=\"string\">/TCP</span></span><br><span class=\"line\"><span class=\"attr\">TargetPort:</span>               <span class=\"number\">809</span><span class=\"string\">/TCP</span></span><br><span class=\"line\"><span class=\"attr\">NodePort:</span>                 <span class=\"string\">&lt;unset&gt;</span>  <span class=\"number\">39746</span><span class=\"string\">/TCP</span></span><br><span class=\"line\"><span class=\"attr\">Endpoints:</span>                <span class=\"number\">10.42</span><span class=\"number\">.147</span><span class=\"number\">.255</span><span class=\"string\">:809,10.42.38.222:809</span></span><br><span class=\"line\"><span class=\"string\">Session</span> <span class=\"attr\">Affinity:</span>         <span class=\"string\">None</span></span><br><span class=\"line\"><span class=\"string\">External</span> <span class=\"string\">Traffic</span> <span class=\"attr\">Policy:</span>  <span class=\"string\">Cluster</span></span><br><span class=\"line\"><span class=\"attr\">Events:</span>                   <span class=\"string\">&lt;none&gt;</span></span><br></pre></td></tr></table></figure>\n<p>即 <code>cluster ip</code> 为 <code>172.17.185.22</code> 后端 <code>podip</code> 为 <code>10.42.147.25510.42.38.222</code><br>此外还有1个 <code>loadbalancer ip</code> <code>10.42.162.216</code></p>\n<h3 id=\"svc的访问路径\"><a href=\"#svc的访问路径\" class=\"headerlink\" title=\"svc的访问路径\"></a>svc的访问路径</h3><pre><code>- 集群内部，通过 `clusterip` 到访问到后端 `pod\n- 集群外部，通过直接访问`nodeport`；或者通过 `elb` 负载均衡到 `node` 上再通过 `nodeport` 访问\n</code></pre><h3 id=\"cluster-ip-的基本原理\"><a href=\"#cluster-ip-的基本原理\" class=\"headerlink\" title=\"cluster ip 的基本原理\"></a>cluster ip 的基本原理</h3><p>如果是集群内的应用访问 cluster ip，那就是从<strong>用户空间</strong>访问<strong>内核空间网络协议栈</strong>,走的是 <code>OUTPUT</code> 链</p>\n<ol>\n<li>从<code>OUTPUT</code> 链开始</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@10-42-8-102 ~]# iptables -t nat -nvL OUTPUT</span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT 4 packets, 240 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">3424K  209M KUBE-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>OUTPUT</code>下的规则 直接把流量交给 <code>KUBE-SERVICES</code> 链</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-SERVICES</span><br><span class=\"line\">Chain KUBE-SERVICES (2 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination     </span><br><span class=\"line\">    0     0 KUBE-MARK-MASQ  tcp  --  *      *      0.0.0.0/0        172.17.185.22        /* zhongce-v2-0/testapi-smzdm-com: cluster IP */ tcp dpt:809</span><br><span class=\"line\">    0     0 KUBE-SVC-G3OM5DSD2HHDMN6U  tcp  --  *      *       0.0.0.0/0            172.17.185.22        /* zhongce-v2-0/testapi-smzdm-com: cluster IP */ tcp dpt:809</span><br><span class=\"line\">   10   520 KUBE-FW-G3OM5DSD2HHDMN6U  tcp  --  *      *       0.0.0.0/0            10.42.162.216        /* zhongce-v2-0/testapi-smzdm-com: loadbalancer IP */ tcp dpt:809</span><br><span class=\"line\">     0     0 KUBE-NODEPORTS  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service nodeports; NOTE: this must be the last rule in this chain */ ADDRTY</span><br></pre></td></tr></table></figure>\n<p>上述3条规则是顺序执行的：</p>\n<ul>\n<li>第1条规则匹配发往 <code>Cluster IP</code> <code>172.17.185.22</code> 的流量，跳转到了 <code>KUBE-MARK-MASQ</code> 链进一步处理，其作用就是打了一个 <code>MARK</code> ，稍后展开说明。</li>\n<li>第2条规则匹配发往 <code>Cluster IP</code> <code>172.17.185.22</code> 的流量，跳转到了 <code>KUBE-SVC-G3OM5DSD2HHDMN6U</code> 链进一步处理，稍后展开说明。</li>\n<li>第3条规则匹配发往集群外 <code>LB IP</code> 的 <code>10.42.162.216</code> 的流量，跳转到了<br><code>KUBE-FW-G3OM5DSD2HHDMN6U</code> 链进一步处理，稍后展开说明。</li>\n<li>第4条  KUBE-NODEPORTS的规则在末尾，只要dst ip是node 本机ip的话 （（–dst-type LOCAL），就跳转到KUBE-NODEPORTS做进一步判定：）<br>  <strong>第2条规则要做dnat转发到后端具体的后端pod上</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-SVC-G3OM5DSD2HHDMN6U</span><br><span class=\"line\">Chain KUBE-SVC-G3OM5DSD2HHDMN6U (3 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">   18   936 KUBE-SEP-JT2KW6YUTVPLLGV6  all  --  *      *       0.0.0.0/0            0.0.0.0/0            statistic mode random probability 0.50000000000</span><br><span class=\"line\">   21  1092 KUBE-SEP-VETLC6CJY2HOK3EL  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br></pre></td></tr></table></figure>\n<p><strong>两条 对应 后端pod的链</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-SEP-JT2KW6YUTVPLLGV6</span><br><span class=\"line\">Chain KUBE-SEP-JT2KW6YUTVPLLGV6 (1 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">    0     0 KUBE-MARK-MASQ  all  --  *      *       10.42.147.255        0.0.0.0/0           </span><br><span class=\"line\">   26  1352 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp to:10.42.147.255:809</span><br><span class=\"line\"></span><br><span class=\"line\">[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-SEP-VETLC6CJY2HOK3EL</span><br><span class=\"line\">Chain KUBE-SEP-VETLC6CJY2HOK3EL (1 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">    0     0 KUBE-MARK-MASQ  all  --  *      *       10.42.38.222         0.0.0.0/0           </span><br><span class=\"line\">    2   104 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp to:10.42.38.222:809</span><br></pre></td></tr></table></figure>\n<p>流量经过路由表从eth0出去，在流量流出本机之前会经过POSTROUTING 链</p>\n<h3 id=\"在流量离开本机的时候会经过-POSTROUTING-链\"><a href=\"#在流量离开本机的时候会经过-POSTROUTING-链\" class=\"headerlink\" title=\"在流量离开本机的时候会经过 POSTROUTING 链\"></a>在流量离开本机的时候会经过 <code>POSTROUTING</code> 链</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@10-42-8-102 ~]# iptables -t nat -nvL POSTROUTING</span><br><span class=\"line\">Chain POSTROUTING (policy ACCEPT 274 packets, 17340 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\"> 632M   36G KUBE-POSTROUTING  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes postrouting rules */</span><br><span class=\"line\"></span><br><span class=\"line\">[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-POSTROUTING</span><br><span class=\"line\">Chain KUBE-POSTROUTING (1 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">  526 27352 MASQUERADE  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service traffic requiring SNAT */ mark match 0x4000/0x4000</span><br></pre></td></tr></table></figure>\n<p>其实直接就跳转到了 <code>KUBE-POSTROUTING</code>，然后匹配打过<code>0x4000 MARK</code> 的流量，将其做 <code>SNAT</code> 转换，而这个 <code>MARK</code> 其实就是之前没说的 <code>KUBE-MARK-MASQ</code> 做的事情</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-MARK-MASQ</span><br><span class=\"line\">Chain KUBE-MARK-MASQ (183 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">  492 25604 MARK       all  --  *      *       0.0.0.0/0            0.0.0.0/0            MARK or 0x4000</span><br></pre></td></tr></table></figure>\n<p>当流量离开本机时，src IP会被修改为node的IP，而不是发出流量的POD IP了</p>\n<h3 id=\"通过loadbalance-ip进行访问\"><a href=\"#通过loadbalance-ip进行访问\" class=\"headerlink\" title=\"通过loadbalance ip进行访问\"></a>通过loadbalance ip进行访问</h3><p>最后还有一个KUBE-FW-G3OM5DSD2HHDMN6U链没有讲，从本机发往LB IP的流量要做啥事情呢？</p>\n<p><strong>其实也是让流量直接发往具体某个Endpoints，就别真的发往LB了，这样才能获得最佳的延迟</strong>：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-FW-G3OM5DSD2HHDMN6U</span><br><span class=\"line\">Chain KUBE-FW-G3OM5DSD2HHDMN6U (1 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">    2   104 KUBE-MARK-MASQ  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* zhongce-v2-0/testapi-smzdm-com: loadbalancer IP */</span><br><span class=\"line\">    2   104 KUBE-SVC-G3OM5DSD2HHDMN6U  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* zhongce-v2-0/testapi-smzdm-com: loadbalancer IP */</span><br><span class=\"line\">    0     0 KUBE-MARK-DROP  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* zhongce-v2-0/testapi-smzdm-com: loadbalancer IP */</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"通过nodeport-来访问\"><a href=\"#通过nodeport-来访问\" class=\"headerlink\" title=\"通过nodeport 来访问\"></a>通过nodeport 来访问</h3><p>回顾一下 KUBE_SERVICES规则</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-SERVICES</span><br><span class=\"line\">Chain KUBE-SERVICES (2 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination     </span><br><span class=\"line\">    0     0 KUBE-MARK-MASQ  tcp  --  *      *      !172.17.0.0/16        172.17.185.22        /* zhongce-v2-0/testapi-smzdm-com: cluster IP */ tcp dpt:809</span><br><span class=\"line\">    0     0 KUBE-SVC-G3OM5DSD2HHDMN6U  tcp  --  *      *       0.0.0.0/0            172.17.185.22        /* zhongce-v2-0/testapi-smzdm-com: cluster IP */ tcp dpt:809</span><br><span class=\"line\">   10   520 KUBE-FW-G3OM5DSD2HHDMN6U  tcp  --  *      *       0.0.0.0/0            10.42.162.216        /* zhongce-v2-0/testapi-smzdm-com: loadbalancer IP */ tcp dpt:809</span><br><span class=\"line\">    0     0 KUBE-NODEPORTS  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service nodeports; NOTE: this must be the last rule in this chain */ ADDRTYPE match dst-type LOCAL</span><br></pre></td></tr></table></figure>\n<p><strong><code>KUBE-NODEPORTS</code> 是最后一条规则</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-NODEPORTS</span><br><span class=\"line\">Chain KUBE-NODEPORTS (1 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination        </span><br><span class=\"line\">    0     0 KUBE-MARK-MASQ  tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* zhongce-v2-0/testapi-smzdm-com: */ tcp dpt:39746</span><br><span class=\"line\">    0     0 KUBE-SVC-G3OM5DSD2HHDMN6U  tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* zhongce-v2-0/testapi-smzdm-com: */ tcp dpt:39746</span><br></pre></td></tr></table></figure>\n<p>第1条匹配dst port如果是39746，那么就打mark。<br>第2条匹配dst port如果是39746，那么就跳到负载均衡链做DNAT改写。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><code>KUBE-SERVICES</code> 链的规则存在于 <code>OUTPUT POSTROUTING PREROUTING</code> 三个链上</li>\n<li>对于 <code>KUBE-SERVICES KUBE-NDOEPORTS-xxx KUBE-SEP-xxx</code> 下都会对符合条件（匹配条件）的规则打上MARK 可以重复打MARK</li>\n<li>在流量出node的时候做SNAT</li>\n</ul>\n<h2 id=\"从集群内出去的流量怎么回来\"><a href=\"#从集群内出去的流量怎么回来\" class=\"headerlink\" title=\"从集群内出去的流量怎么回来\"></a>从集群内出去的流量怎么回来</h2><p>出node的流量在做SNAT的时候，netfilter有个连接跟踪机制，保存在 conntrack记录中</p>\n<p>这就是Netfilter的连接跟踪（conntrack）功能了。对于TCP协议来讲，肯定是上来先建立一个连接，可以用<code>源/目的IP+源/目的端口</code>  （四元组），唯一标识一条连接，这个连接会放在conntrack表里面。<br>当时是这台机器去请求163网站的，虽然源地址已经Snat成公网IP地址了，但是 <code>conntrack</code> 表里面还是有这个连接的记录的。当163网站返回数据的时候，会找到记录，从而找到正确的私网IP地<br>址。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p><a href=\"https://yuerblog.cc/2019/12/09/k8s-%E6%89%8B%E6%8A%8A%E6%89%8B%E5%88%86%E6%9E%90service%E7%94%9F%E6%88%90%E7%9A%84iptables%E8%A7%84%E5%88%99/\" target=\"_blank\" rel=\"noopener\">k8s 的iptales规则详解</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"k8s-svc之-iptables规则\"><a href=\"#k8s-svc之-iptables规则\" class=\"headerlink\" title=\"k8s svc之 iptables规则\"></a>k8s svc之 iptables规则</h1><h2 id=\"iptables规则\"><a href=\"#iptables规则\" class=\"headerlink\" title=\"iptables规则\"></a>iptables规则</h2><blockquote>\n<p>参考 <a href=\"http://www.zsythink.net/archives/tag/iptables/\" target=\"_blank\" rel=\"noopener\">http://www.zsythink.net/archives/tag/iptables/</a></p>\n</blockquote>\n<p><img src=\"http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_2.png\" alt=\"\"></p>\n<p><strong>用户空间，例如从pod中流出的流量就是从ouput链流出</strong></p>\n<p>上图表示的<code>iptables</code>的链，链 和表的关系如下，以<code>PREROUTING</code>链为例</p>\n<p><img src=\"http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_4.png\" alt=\"\"></p>\n<p>这幅图是什么意思呢？它的意思是说，prerouting”链”只拥有nat表、raw表和mangle表所对应的功能，所以，prerouting中的规则只能存放于nat表、raw表和mangle表中。</p>\n<h2 id=\"NAT\"><a href=\"#NAT\" class=\"headerlink\" title=\"NAT\"></a>NAT</h2><p><strong>NAT的三种类型:</strong></p>\n<ul>\n<li><p>SNAT  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A POSTROUTING -s 10.8.0.0/255.255.255.0 -o eth0 -j SNAT --to-source192.168.5.3</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 目标流向eth0，源地址是xxx的，做SNAT，源地址改为xxx</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DNAT</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables-t nat -A POSTROUTING -s 10.8.0.0/255.255.255.0 -o eth0 -j SNAT --to-source192.168.5.3-192.168.5.5</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MASQUERADE 是SNAT的一种，可以自动获取网卡的ip来做SNAT，如果是ADSL这种动态ip的，如果用SNAT需要经常更改iptables规则 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables-t nat -A POSTROUTING -s 10.8.0.0/255.255.255.0 -o eth0 -j MASQUERADE</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 源地址是xxx，流向eth0的，流向做自动化SNAT</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><em>masquerade</em> 应为英文伪装</p>\n<h2 id=\"iptabels-常用命令\"><a href=\"#iptabels-常用命令\" class=\"headerlink\" title=\"iptabels 常用命令\"></a>iptabels 常用命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables [-t 表名] 管理选项 [链名] [匹配条件] [-j 控制类型]</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 控制类型包括 ACCETP REJECT DROP LOG 还有自定义的链（k8s的链）等</span></span><br><span class=\"line\">iptabels -t nat（表名） -nvL POSTROUTING(链的名字)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.jianshu.com/p/ee4ee15d3658\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ee4ee15d3658</a></p>\n<h2 id=\"分析k8s下的iptables规则\"><a href=\"#分析k8s下的iptables规则\" class=\"headerlink\" title=\"分析k8s下的iptables规则\"></a>分析k8s下的iptables规则</h2><p>以如下 <code>service</code> 为例 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Name:</span>                     <span class=\"string\">testapi-smzdm-com</span></span><br><span class=\"line\"><span class=\"attr\">Namespace:</span>                <span class=\"string\">zhongce-v2-0</span></span><br><span class=\"line\"><span class=\"attr\">Labels:</span>                   <span class=\"string\">&lt;none&gt;</span></span><br><span class=\"line\"><span class=\"attr\">Selector:</span>                 <span class=\"string\">zdm-app-owner=testapi-smzdm-com</span></span><br><span class=\"line\"><span class=\"attr\">Type:</span>                     <span class=\"string\">LoadBalancer</span></span><br><span class=\"line\"><span class=\"attr\">IP:</span>                       <span class=\"number\">172.17</span><span class=\"number\">.185</span><span class=\"number\">.22</span></span><br><span class=\"line\"><span class=\"string\">LoadBalancer</span> <span class=\"attr\">Ingress:</span>     <span class=\"number\">10.42</span><span class=\"number\">.162</span><span class=\"number\">.216</span></span><br><span class=\"line\"><span class=\"attr\">Port:</span>                     <span class=\"string\">&lt;unset&gt;</span>  <span class=\"number\">809</span><span class=\"string\">/TCP</span></span><br><span class=\"line\"><span class=\"attr\">TargetPort:</span>               <span class=\"number\">809</span><span class=\"string\">/TCP</span></span><br><span class=\"line\"><span class=\"attr\">NodePort:</span>                 <span class=\"string\">&lt;unset&gt;</span>  <span class=\"number\">39746</span><span class=\"string\">/TCP</span></span><br><span class=\"line\"><span class=\"attr\">Endpoints:</span>                <span class=\"number\">10.42</span><span class=\"number\">.147</span><span class=\"number\">.255</span><span class=\"string\">:809,10.42.38.222:809</span></span><br><span class=\"line\"><span class=\"string\">Session</span> <span class=\"attr\">Affinity:</span>         <span class=\"string\">None</span></span><br><span class=\"line\"><span class=\"string\">External</span> <span class=\"string\">Traffic</span> <span class=\"attr\">Policy:</span>  <span class=\"string\">Cluster</span></span><br><span class=\"line\"><span class=\"attr\">Events:</span>                   <span class=\"string\">&lt;none&gt;</span></span><br></pre></td></tr></table></figure>\n<p>即 <code>cluster ip</code> 为 <code>172.17.185.22</code> 后端 <code>podip</code> 为 <code>10.42.147.25510.42.38.222</code><br>此外还有1个 <code>loadbalancer ip</code> <code>10.42.162.216</code></p>\n<h3 id=\"svc的访问路径\"><a href=\"#svc的访问路径\" class=\"headerlink\" title=\"svc的访问路径\"></a>svc的访问路径</h3><pre><code>- 集群内部，通过 `clusterip` 到访问到后端 `pod\n- 集群外部，通过直接访问`nodeport`；或者通过 `elb` 负载均衡到 `node` 上再通过 `nodeport` 访问\n</code></pre><h3 id=\"cluster-ip-的基本原理\"><a href=\"#cluster-ip-的基本原理\" class=\"headerlink\" title=\"cluster ip 的基本原理\"></a>cluster ip 的基本原理</h3><p>如果是集群内的应用访问 cluster ip，那就是从<strong>用户空间</strong>访问<strong>内核空间网络协议栈</strong>,走的是 <code>OUTPUT</code> 链</p>\n<ol>\n<li>从<code>OUTPUT</code> 链开始</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@10-42-8-102 ~]# iptables -t nat -nvL OUTPUT</span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT 4 packets, 240 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">3424K  209M KUBE-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>OUTPUT</code>下的规则 直接把流量交给 <code>KUBE-SERVICES</code> 链</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-SERVICES</span><br><span class=\"line\">Chain KUBE-SERVICES (2 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination     </span><br><span class=\"line\">    0     0 KUBE-MARK-MASQ  tcp  --  *      *      0.0.0.0/0        172.17.185.22        /* zhongce-v2-0/testapi-smzdm-com: cluster IP */ tcp dpt:809</span><br><span class=\"line\">    0     0 KUBE-SVC-G3OM5DSD2HHDMN6U  tcp  --  *      *       0.0.0.0/0            172.17.185.22        /* zhongce-v2-0/testapi-smzdm-com: cluster IP */ tcp dpt:809</span><br><span class=\"line\">   10   520 KUBE-FW-G3OM5DSD2HHDMN6U  tcp  --  *      *       0.0.0.0/0            10.42.162.216        /* zhongce-v2-0/testapi-smzdm-com: loadbalancer IP */ tcp dpt:809</span><br><span class=\"line\">     0     0 KUBE-NODEPORTS  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service nodeports; NOTE: this must be the last rule in this chain */ ADDRTY</span><br></pre></td></tr></table></figure>\n<p>上述3条规则是顺序执行的：</p>\n<ul>\n<li>第1条规则匹配发往 <code>Cluster IP</code> <code>172.17.185.22</code> 的流量，跳转到了 <code>KUBE-MARK-MASQ</code> 链进一步处理，其作用就是打了一个 <code>MARK</code> ，稍后展开说明。</li>\n<li>第2条规则匹配发往 <code>Cluster IP</code> <code>172.17.185.22</code> 的流量，跳转到了 <code>KUBE-SVC-G3OM5DSD2HHDMN6U</code> 链进一步处理，稍后展开说明。</li>\n<li>第3条规则匹配发往集群外 <code>LB IP</code> 的 <code>10.42.162.216</code> 的流量，跳转到了<br><code>KUBE-FW-G3OM5DSD2HHDMN6U</code> 链进一步处理，稍后展开说明。</li>\n<li>第4条  KUBE-NODEPORTS的规则在末尾，只要dst ip是node 本机ip的话 （（–dst-type LOCAL），就跳转到KUBE-NODEPORTS做进一步判定：）<br>  <strong>第2条规则要做dnat转发到后端具体的后端pod上</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-SVC-G3OM5DSD2HHDMN6U</span><br><span class=\"line\">Chain KUBE-SVC-G3OM5DSD2HHDMN6U (3 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">   18   936 KUBE-SEP-JT2KW6YUTVPLLGV6  all  --  *      *       0.0.0.0/0            0.0.0.0/0            statistic mode random probability 0.50000000000</span><br><span class=\"line\">   21  1092 KUBE-SEP-VETLC6CJY2HOK3EL  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br></pre></td></tr></table></figure>\n<p><strong>两条 对应 后端pod的链</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-SEP-JT2KW6YUTVPLLGV6</span><br><span class=\"line\">Chain KUBE-SEP-JT2KW6YUTVPLLGV6 (1 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">    0     0 KUBE-MARK-MASQ  all  --  *      *       10.42.147.255        0.0.0.0/0           </span><br><span class=\"line\">   26  1352 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp to:10.42.147.255:809</span><br><span class=\"line\"></span><br><span class=\"line\">[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-SEP-VETLC6CJY2HOK3EL</span><br><span class=\"line\">Chain KUBE-SEP-VETLC6CJY2HOK3EL (1 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">    0     0 KUBE-MARK-MASQ  all  --  *      *       10.42.38.222         0.0.0.0/0           </span><br><span class=\"line\">    2   104 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp to:10.42.38.222:809</span><br></pre></td></tr></table></figure>\n<p>流量经过路由表从eth0出去，在流量流出本机之前会经过POSTROUTING 链</p>\n<h3 id=\"在流量离开本机的时候会经过-POSTROUTING-链\"><a href=\"#在流量离开本机的时候会经过-POSTROUTING-链\" class=\"headerlink\" title=\"在流量离开本机的时候会经过 POSTROUTING 链\"></a>在流量离开本机的时候会经过 <code>POSTROUTING</code> 链</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@10-42-8-102 ~]# iptables -t nat -nvL POSTROUTING</span><br><span class=\"line\">Chain POSTROUTING (policy ACCEPT 274 packets, 17340 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\"> 632M   36G KUBE-POSTROUTING  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes postrouting rules */</span><br><span class=\"line\"></span><br><span class=\"line\">[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-POSTROUTING</span><br><span class=\"line\">Chain KUBE-POSTROUTING (1 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">  526 27352 MASQUERADE  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service traffic requiring SNAT */ mark match 0x4000/0x4000</span><br></pre></td></tr></table></figure>\n<p>其实直接就跳转到了 <code>KUBE-POSTROUTING</code>，然后匹配打过<code>0x4000 MARK</code> 的流量，将其做 <code>SNAT</code> 转换，而这个 <code>MARK</code> 其实就是之前没说的 <code>KUBE-MARK-MASQ</code> 做的事情</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-MARK-MASQ</span><br><span class=\"line\">Chain KUBE-MARK-MASQ (183 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">  492 25604 MARK       all  --  *      *       0.0.0.0/0            0.0.0.0/0            MARK or 0x4000</span><br></pre></td></tr></table></figure>\n<p>当流量离开本机时，src IP会被修改为node的IP，而不是发出流量的POD IP了</p>\n<h3 id=\"通过loadbalance-ip进行访问\"><a href=\"#通过loadbalance-ip进行访问\" class=\"headerlink\" title=\"通过loadbalance ip进行访问\"></a>通过loadbalance ip进行访问</h3><p>最后还有一个KUBE-FW-G3OM5DSD2HHDMN6U链没有讲，从本机发往LB IP的流量要做啥事情呢？</p>\n<p><strong>其实也是让流量直接发往具体某个Endpoints，就别真的发往LB了，这样才能获得最佳的延迟</strong>：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-FW-G3OM5DSD2HHDMN6U</span><br><span class=\"line\">Chain KUBE-FW-G3OM5DSD2HHDMN6U (1 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">    2   104 KUBE-MARK-MASQ  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* zhongce-v2-0/testapi-smzdm-com: loadbalancer IP */</span><br><span class=\"line\">    2   104 KUBE-SVC-G3OM5DSD2HHDMN6U  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* zhongce-v2-0/testapi-smzdm-com: loadbalancer IP */</span><br><span class=\"line\">    0     0 KUBE-MARK-DROP  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* zhongce-v2-0/testapi-smzdm-com: loadbalancer IP */</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"通过nodeport-来访问\"><a href=\"#通过nodeport-来访问\" class=\"headerlink\" title=\"通过nodeport 来访问\"></a>通过nodeport 来访问</h3><p>回顾一下 KUBE_SERVICES规则</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-SERVICES</span><br><span class=\"line\">Chain KUBE-SERVICES (2 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination     </span><br><span class=\"line\">    0     0 KUBE-MARK-MASQ  tcp  --  *      *      !172.17.0.0/16        172.17.185.22        /* zhongce-v2-0/testapi-smzdm-com: cluster IP */ tcp dpt:809</span><br><span class=\"line\">    0     0 KUBE-SVC-G3OM5DSD2HHDMN6U  tcp  --  *      *       0.0.0.0/0            172.17.185.22        /* zhongce-v2-0/testapi-smzdm-com: cluster IP */ tcp dpt:809</span><br><span class=\"line\">   10   520 KUBE-FW-G3OM5DSD2HHDMN6U  tcp  --  *      *       0.0.0.0/0            10.42.162.216        /* zhongce-v2-0/testapi-smzdm-com: loadbalancer IP */ tcp dpt:809</span><br><span class=\"line\">    0     0 KUBE-NODEPORTS  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service nodeports; NOTE: this must be the last rule in this chain */ ADDRTYPE match dst-type LOCAL</span><br></pre></td></tr></table></figure>\n<p><strong><code>KUBE-NODEPORTS</code> 是最后一条规则</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@10-42-8-102 ~]# iptables -t nat -nvL KUBE-NODEPORTS</span><br><span class=\"line\">Chain KUBE-NODEPORTS (1 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination        </span><br><span class=\"line\">    0     0 KUBE-MARK-MASQ  tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* zhongce-v2-0/testapi-smzdm-com: */ tcp dpt:39746</span><br><span class=\"line\">    0     0 KUBE-SVC-G3OM5DSD2HHDMN6U  tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* zhongce-v2-0/testapi-smzdm-com: */ tcp dpt:39746</span><br></pre></td></tr></table></figure>\n<p>第1条匹配dst port如果是39746，那么就打mark。<br>第2条匹配dst port如果是39746，那么就跳到负载均衡链做DNAT改写。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><code>KUBE-SERVICES</code> 链的规则存在于 <code>OUTPUT POSTROUTING PREROUTING</code> 三个链上</li>\n<li>对于 <code>KUBE-SERVICES KUBE-NDOEPORTS-xxx KUBE-SEP-xxx</code> 下都会对符合条件（匹配条件）的规则打上MARK 可以重复打MARK</li>\n<li>在流量出node的时候做SNAT</li>\n</ul>\n<h2 id=\"从集群内出去的流量怎么回来\"><a href=\"#从集群内出去的流量怎么回来\" class=\"headerlink\" title=\"从集群内出去的流量怎么回来\"></a>从集群内出去的流量怎么回来</h2><p>出node的流量在做SNAT的时候，netfilter有个连接跟踪机制，保存在 conntrack记录中</p>\n<p>这就是Netfilter的连接跟踪（conntrack）功能了。对于TCP协议来讲，肯定是上来先建立一个连接，可以用<code>源/目的IP+源/目的端口</code>  （四元组），唯一标识一条连接，这个连接会放在conntrack表里面。<br>当时是这台机器去请求163网站的，虽然源地址已经Snat成公网IP地址了，但是 <code>conntrack</code> 表里面还是有这个连接的记录的。当163网站返回数据的时候，会找到记录，从而找到正确的私网IP地<br>址。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p><a href=\"https://yuerblog.cc/2019/12/09/k8s-%E6%89%8B%E6%8A%8A%E6%89%8B%E5%88%86%E6%9E%90service%E7%94%9F%E6%88%90%E7%9A%84iptables%E8%A7%84%E5%88%99/\" target=\"_blank\" rel=\"noopener\">k8s 的iptales规则详解</a></p>\n"},{"layout":"post","title":"容器网络","date":"2020-03-25T09:29:18.000Z","author":"zhaojizhuang","_content":"\n# 容器网络\n\n\n##  vxlan \n\nvxlan原理 overlay网络\nVXLAN通过MAC-in-UDP的报文封装，实现了二层报文在三层网络上的透传\n\n## Flannel\n\n首先，flannel利用**`Kubernetes-API(这里就是取node.spec.podCIDR)或者etcd`**用于存储整个集群的网络配置，其中最主要的内容为设置集群的网络地址空间。例如，设定整个集群内所有容器的IP都取自网段“10.1.0.0/16”。\n\n接着，flannel在每个主机中运行flanneld作为agent，它会为所在主机从集群的网络地址空间中，获取一个小的网段subnet，本主机内所有容器的IP地址都将从中分配。\n\n`flannel` 的 `UDP` 模式和 `Vxlan` 模式 `host-gw` 模式\n\n- `UDP` 模式是 三层 `overlay`,即，将原始数据包的三层包（IP包）装在 `UDP` 包里,通过 ip+端口 传到目的地，ip为目标node ip 端口为目标节点上flanneld进程监听的8285端口，解析后传入flannel0设备进入内核网络协议栈，\nUDP模式下 封包解包是在 flanneld里进行的也就是用户态下\n\n![](https://static001.geekbang.org/resource/image/84/8d/84caa6dc3f9dcdf8b88b56bd2e22138d.png)\n\n![](https://static001.geekbang.org/resource/image/e6/f0/e6827cecb75641d3c8838f2213543cf0.png)\n\n**重要！！！ 《深入解析kubernetes》** 33章  https://time.geekbang.org/column/article/65287\n\n- VxLan 模式 是二层 `overlay`,即将原始Ethernet包（MAC包）封装起来，通过vtep设备发到目的vtep，vxlan是内核模块，vtep是flannneld创建的，vxlan封包解封完全是在内核态完成的\n- \n\n![](https://static001.geekbang.org/resource/image/43/41/43f5ebb001145ecd896fd10fb27c5c41.png)\n\n - 注意点 \n  - inner mac 为 目的vtep的mac\n  - outer ip为目的node的ip **这一点和UDP有区别**\n下一跳ip对应的mac地址是ARP表里记录的，inner mac对应的arp记录是 flanneld维护的，outer mac arp表是node自学习的\n\n![](https://static001.geekbang.org/resource/image/ce/38/cefe6b99422fba768c53f0093947cd38.png)\n\n- `host-gw` 模式的工作原理,是在 节点上加路由表，其实就是将每个 Flannel 子网（Flannel Subnet，比如：10.244.1.0/24）的“下一跳”，设置成了该子网对应的宿主机的 IP 地址。\n这台“主机”（Host）会充当这条容器通信路径里的“网关”（Gateway）。这也正是“host-gw”的含义。\n\n```shell\n$ ip route\n...\n<目的容器IP地址段> via <网关的IP地址> dev eth0# 网关的 IP 地址，正是目的容器所在宿主机的 IP 地址\n```\n\n**Flannel host-gw 模式必须要求集群宿主机之间是二层连通的。如果分布在不同的子网里是不行的，只是三层可达**\n\n### POD IP的分配\n#### 使用CNI后，即配置了 `kubelet` 的 `--network-plugin=cni`，容器的IP分配：\nkubelet 先创建pause容器生成network namespace\n调用 网络driver CNI driver\nCNI driver 根据配置调用具体的cni 插件\ncni 插件给pause 容器配置网络\npod 中其他的容器都使用 pause 容器的网络\n\n#### CNM模式\nPod IP是docker engine分配的，Pod也是以docker0为网关，通过veth连接network namespace\n#### flannel的两种方式 CNI CNM总结\nCNI中，docker0的ip与Pod无关，Pod总是生成的时候才去动态的申请自己的IP，而CNM模式下，Pod的网段在docker engine启动时就已经决定。\nCNI只是一个网络接口规范，各种功能都由插件实现，flannel只是插件的一种，而且docker也只是容器载体的一种选择，Kubernetes还可以使用其他的，\n\n## cluster IP的分配\n    是在kube-apiserver中 `pkg/registry/core/service/ipallocator`中分配的\n    \n    \n## network policy \n\n```yaml\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          user: alice\n    - podSelector:\n        matchLabels:\n          role: client\n```\n\n像上面这样定义的 namespaceSelector 和 podSelector，是“或”（OR）的关系，表示的是yaml数组里的两个元素\n\n```yaml\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          user: alice\n      podSelector:\n        matchLabels:\n          role: client\n```\n\n像上面这样定义的 namespaceSelector 和 podSelector，是“与”（AND）的关系，yaml里表示的是一个数组元素的两个字段\n\nKubernetes 网络插件对 Pod 进行隔离，其实是靠在宿主机上生成 NetworkPolicy 对应的 iptable 规则来实现的。\n\n\n## 通过NodePort来访问service的话，client的源ip会被做SNAT\n\n```yaml\n          client\n             \\ ^\n              \\ \\\n               v \\\n   node 1 <--- node 2\n    | ^   SNAT\n    | |   --->\n    v |\n endpoint\n```\n\n流程：\n\n- 客户端发送数据包到 node2:nodePort\n- node2 使用它自己的 IP 地址替换数据包的源 IP 地址（SNAT）\n- node2 使用 pod IP 地址替换数据包的目的 IP 地址\n- 数据包被路由到 node 1，然后交给 endpoint\n- Pod 的回复被路由回 node2\n- Pod 的回复被发送回给客户端\n\n可以将 `service.spec.externalTrafficPolicy` 的值为 Local，请求就只会被代理到本地 endpoints 而不会被转发到其它节点。这样就保留了最初的源 IP 地址 **不会对访问NodePort的client ip做 SNAT了**。如果没有本地 endpoints，发送到这个节点的数据包将会被丢弃。","source":"_posts/container-network.md","raw":"---\nlayout: post\ntitle:  \"容器网络\"\ndate:   2020-03-25 17:29:18 +0800\ncategories: k8s\ntags:  [\"k8s\", \"容器网络\"]\nauthor: zhaojizhuang\n\n---\n\n# 容器网络\n\n\n##  vxlan \n\nvxlan原理 overlay网络\nVXLAN通过MAC-in-UDP的报文封装，实现了二层报文在三层网络上的透传\n\n## Flannel\n\n首先，flannel利用**`Kubernetes-API(这里就是取node.spec.podCIDR)或者etcd`**用于存储整个集群的网络配置，其中最主要的内容为设置集群的网络地址空间。例如，设定整个集群内所有容器的IP都取自网段“10.1.0.0/16”。\n\n接着，flannel在每个主机中运行flanneld作为agent，它会为所在主机从集群的网络地址空间中，获取一个小的网段subnet，本主机内所有容器的IP地址都将从中分配。\n\n`flannel` 的 `UDP` 模式和 `Vxlan` 模式 `host-gw` 模式\n\n- `UDP` 模式是 三层 `overlay`,即，将原始数据包的三层包（IP包）装在 `UDP` 包里,通过 ip+端口 传到目的地，ip为目标node ip 端口为目标节点上flanneld进程监听的8285端口，解析后传入flannel0设备进入内核网络协议栈，\nUDP模式下 封包解包是在 flanneld里进行的也就是用户态下\n\n![](https://static001.geekbang.org/resource/image/84/8d/84caa6dc3f9dcdf8b88b56bd2e22138d.png)\n\n![](https://static001.geekbang.org/resource/image/e6/f0/e6827cecb75641d3c8838f2213543cf0.png)\n\n**重要！！！ 《深入解析kubernetes》** 33章  https://time.geekbang.org/column/article/65287\n\n- VxLan 模式 是二层 `overlay`,即将原始Ethernet包（MAC包）封装起来，通过vtep设备发到目的vtep，vxlan是内核模块，vtep是flannneld创建的，vxlan封包解封完全是在内核态完成的\n- \n\n![](https://static001.geekbang.org/resource/image/43/41/43f5ebb001145ecd896fd10fb27c5c41.png)\n\n - 注意点 \n  - inner mac 为 目的vtep的mac\n  - outer ip为目的node的ip **这一点和UDP有区别**\n下一跳ip对应的mac地址是ARP表里记录的，inner mac对应的arp记录是 flanneld维护的，outer mac arp表是node自学习的\n\n![](https://static001.geekbang.org/resource/image/ce/38/cefe6b99422fba768c53f0093947cd38.png)\n\n- `host-gw` 模式的工作原理,是在 节点上加路由表，其实就是将每个 Flannel 子网（Flannel Subnet，比如：10.244.1.0/24）的“下一跳”，设置成了该子网对应的宿主机的 IP 地址。\n这台“主机”（Host）会充当这条容器通信路径里的“网关”（Gateway）。这也正是“host-gw”的含义。\n\n```shell\n$ ip route\n...\n<目的容器IP地址段> via <网关的IP地址> dev eth0# 网关的 IP 地址，正是目的容器所在宿主机的 IP 地址\n```\n\n**Flannel host-gw 模式必须要求集群宿主机之间是二层连通的。如果分布在不同的子网里是不行的，只是三层可达**\n\n### POD IP的分配\n#### 使用CNI后，即配置了 `kubelet` 的 `--network-plugin=cni`，容器的IP分配：\nkubelet 先创建pause容器生成network namespace\n调用 网络driver CNI driver\nCNI driver 根据配置调用具体的cni 插件\ncni 插件给pause 容器配置网络\npod 中其他的容器都使用 pause 容器的网络\n\n#### CNM模式\nPod IP是docker engine分配的，Pod也是以docker0为网关，通过veth连接network namespace\n#### flannel的两种方式 CNI CNM总结\nCNI中，docker0的ip与Pod无关，Pod总是生成的时候才去动态的申请自己的IP，而CNM模式下，Pod的网段在docker engine启动时就已经决定。\nCNI只是一个网络接口规范，各种功能都由插件实现，flannel只是插件的一种，而且docker也只是容器载体的一种选择，Kubernetes还可以使用其他的，\n\n## cluster IP的分配\n    是在kube-apiserver中 `pkg/registry/core/service/ipallocator`中分配的\n    \n    \n## network policy \n\n```yaml\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          user: alice\n    - podSelector:\n        matchLabels:\n          role: client\n```\n\n像上面这样定义的 namespaceSelector 和 podSelector，是“或”（OR）的关系，表示的是yaml数组里的两个元素\n\n```yaml\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          user: alice\n      podSelector:\n        matchLabels:\n          role: client\n```\n\n像上面这样定义的 namespaceSelector 和 podSelector，是“与”（AND）的关系，yaml里表示的是一个数组元素的两个字段\n\nKubernetes 网络插件对 Pod 进行隔离，其实是靠在宿主机上生成 NetworkPolicy 对应的 iptable 规则来实现的。\n\n\n## 通过NodePort来访问service的话，client的源ip会被做SNAT\n\n```yaml\n          client\n             \\ ^\n              \\ \\\n               v \\\n   node 1 <--- node 2\n    | ^   SNAT\n    | |   --->\n    v |\n endpoint\n```\n\n流程：\n\n- 客户端发送数据包到 node2:nodePort\n- node2 使用它自己的 IP 地址替换数据包的源 IP 地址（SNAT）\n- node2 使用 pod IP 地址替换数据包的目的 IP 地址\n- 数据包被路由到 node 1，然后交给 endpoint\n- Pod 的回复被路由回 node2\n- Pod 的回复被发送回给客户端\n\n可以将 `service.spec.externalTrafficPolicy` 的值为 Local，请求就只会被代理到本地 endpoints 而不会被转发到其它节点。这样就保留了最初的源 IP 地址 **不会对访问NodePort的client ip做 SNAT了**。如果没有本地 endpoints，发送到这个节点的数据包将会被丢弃。","slug":"container-network","published":1,"updated":"2020-05-06T15:55:07.050Z","_id":"ck9vivw91000jbbfl4x58496o","comments":1,"photos":[],"link":"","content":"<h1 id=\"容器网络\"><a href=\"#容器网络\" class=\"headerlink\" title=\"容器网络\"></a>容器网络</h1><h2 id=\"vxlan\"><a href=\"#vxlan\" class=\"headerlink\" title=\"vxlan\"></a>vxlan</h2><p>vxlan原理 overlay网络<br>VXLAN通过MAC-in-UDP的报文封装，实现了二层报文在三层网络上的透传</p>\n<h2 id=\"Flannel\"><a href=\"#Flannel\" class=\"headerlink\" title=\"Flannel\"></a>Flannel</h2><p>首先，flannel利用<strong><code>Kubernetes-API(这里就是取node.spec.podCIDR)或者etcd</code></strong>用于存储整个集群的网络配置，其中最主要的内容为设置集群的网络地址空间。例如，设定整个集群内所有容器的IP都取自网段“10.1.0.0/16”。</p>\n<p>接着，flannel在每个主机中运行flanneld作为agent，它会为所在主机从集群的网络地址空间中，获取一个小的网段subnet，本主机内所有容器的IP地址都将从中分配。</p>\n<p><code>flannel</code> 的 <code>UDP</code> 模式和 <code>Vxlan</code> 模式 <code>host-gw</code> 模式</p>\n<ul>\n<li><code>UDP</code> 模式是 三层 <code>overlay</code>,即，将原始数据包的三层包（IP包）装在 <code>UDP</code> 包里,通过 ip+端口 传到目的地，ip为目标node ip 端口为目标节点上flanneld进程监听的8285端口，解析后传入flannel0设备进入内核网络协议栈，<br>UDP模式下 封包解包是在 flanneld里进行的也就是用户态下</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/84/8d/84caa6dc3f9dcdf8b88b56bd2e22138d.png\" alt=\"\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/e6/f0/e6827cecb75641d3c8838f2213543cf0.png\" alt=\"\"></p>\n<p><strong>重要！！！ 《深入解析kubernetes》</strong> 33章  <a href=\"https://time.geekbang.org/column/article/65287\" target=\"_blank\" rel=\"noopener\">https://time.geekbang.org/column/article/65287</a></p>\n<ul>\n<li>VxLan 模式 是二层 <code>overlay</code>,即将原始Ethernet包（MAC包）封装起来，通过vtep设备发到目的vtep，vxlan是内核模块，vtep是flannneld创建的，vxlan封包解封完全是在内核态完成的</li>\n<li></li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/43/41/43f5ebb001145ecd896fd10fb27c5c41.png\" alt=\"\"></p>\n<ul>\n<li>注意点 <ul>\n<li>inner mac 为 目的vtep的mac</li>\n<li>outer ip为目的node的ip <strong>这一点和UDP有区别</strong><br>下一跳ip对应的mac地址是ARP表里记录的，inner mac对应的arp记录是 flanneld维护的，outer mac arp表是node自学习的</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/ce/38/cefe6b99422fba768c53f0093947cd38.png\" alt=\"\"></p>\n<ul>\n<li><code>host-gw</code> 模式的工作原理,是在 节点上加路由表，其实就是将每个 Flannel 子网（Flannel Subnet，比如：10.244.1.0/24）的“下一跳”，设置成了该子网对应的宿主机的 IP 地址。<br>这台“主机”（Host）会充当这条容器通信路径里的“网关”（Gateway）。这也正是“host-gw”的含义。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ip route</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;目的容器IP地址段&gt; via &lt;网关的IP地址&gt; dev eth0# 网关的 IP 地址，正是目的容器所在宿主机的 IP 地址</span><br></pre></td></tr></table></figure>\n<p><strong>Flannel host-gw 模式必须要求集群宿主机之间是二层连通的。如果分布在不同的子网里是不行的，只是三层可达</strong></p>\n<h3 id=\"POD-IP的分配\"><a href=\"#POD-IP的分配\" class=\"headerlink\" title=\"POD IP的分配\"></a>POD IP的分配</h3><h4 id=\"使用CNI后，即配置了-kubelet-的-network-plugin-cni，容器的IP分配：\"><a href=\"#使用CNI后，即配置了-kubelet-的-network-plugin-cni，容器的IP分配：\" class=\"headerlink\" title=\"使用CNI后，即配置了 kubelet 的 --network-plugin=cni，容器的IP分配：\"></a>使用CNI后，即配置了 <code>kubelet</code> 的 <code>--network-plugin=cni</code>，容器的IP分配：</h4><p>kubelet 先创建pause容器生成network namespace<br>调用 网络driver CNI driver<br>CNI driver 根据配置调用具体的cni 插件<br>cni 插件给pause 容器配置网络<br>pod 中其他的容器都使用 pause 容器的网络</p>\n<h4 id=\"CNM模式\"><a href=\"#CNM模式\" class=\"headerlink\" title=\"CNM模式\"></a>CNM模式</h4><p>Pod IP是docker engine分配的，Pod也是以docker0为网关，通过veth连接network namespace</p>\n<h4 id=\"flannel的两种方式-CNI-CNM总结\"><a href=\"#flannel的两种方式-CNI-CNM总结\" class=\"headerlink\" title=\"flannel的两种方式 CNI CNM总结\"></a>flannel的两种方式 CNI CNM总结</h4><p>CNI中，docker0的ip与Pod无关，Pod总是生成的时候才去动态的申请自己的IP，而CNM模式下，Pod的网段在docker engine启动时就已经决定。<br>CNI只是一个网络接口规范，各种功能都由插件实现，flannel只是插件的一种，而且docker也只是容器载体的一种选择，Kubernetes还可以使用其他的，</p>\n<h2 id=\"cluster-IP的分配\"><a href=\"#cluster-IP的分配\" class=\"headerlink\" title=\"cluster IP的分配\"></a>cluster IP的分配</h2><pre><code>是在kube-apiserver中 `pkg/registry/core/service/ipallocator`中分配的\n</code></pre><h2 id=\"network-policy\"><a href=\"#network-policy\" class=\"headerlink\" title=\"network policy\"></a>network policy</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ingress:</span></span><br><span class=\"line\"><span class=\"attr\">- from:</span></span><br><span class=\"line\"><span class=\"attr\">  - namespaceSelector:</span></span><br><span class=\"line\"><span class=\"attr\">      matchLabels:</span></span><br><span class=\"line\"><span class=\"attr\">        user:</span> <span class=\"string\">alice</span></span><br><span class=\"line\"><span class=\"attr\">  - podSelector:</span></span><br><span class=\"line\"><span class=\"attr\">      matchLabels:</span></span><br><span class=\"line\"><span class=\"attr\">        role:</span> <span class=\"string\">client</span></span><br></pre></td></tr></table></figure>\n<p>像上面这样定义的 namespaceSelector 和 podSelector，是“或”（OR）的关系，表示的是yaml数组里的两个元素</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ingress:</span></span><br><span class=\"line\"><span class=\"attr\">- from:</span></span><br><span class=\"line\"><span class=\"attr\">  - namespaceSelector:</span></span><br><span class=\"line\"><span class=\"attr\">      matchLabels:</span></span><br><span class=\"line\"><span class=\"attr\">        user:</span> <span class=\"string\">alice</span></span><br><span class=\"line\"><span class=\"attr\">    podSelector:</span></span><br><span class=\"line\"><span class=\"attr\">      matchLabels:</span></span><br><span class=\"line\"><span class=\"attr\">        role:</span> <span class=\"string\">client</span></span><br></pre></td></tr></table></figure>\n<p>像上面这样定义的 namespaceSelector 和 podSelector，是“与”（AND）的关系，yaml里表示的是一个数组元素的两个字段</p>\n<p>Kubernetes 网络插件对 Pod 进行隔离，其实是靠在宿主机上生成 NetworkPolicy 对应的 iptable 规则来实现的。</p>\n<h2 id=\"通过NodePort来访问service的话，client的源ip会被做SNAT\"><a href=\"#通过NodePort来访问service的话，client的源ip会被做SNAT\" class=\"headerlink\" title=\"通过NodePort来访问service的话，client的源ip会被做SNAT\"></a>通过NodePort来访问service的话，client的源ip会被做SNAT</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">         <span class=\"string\">client</span></span><br><span class=\"line\">            <span class=\"string\">\\</span> <span class=\"string\">^</span></span><br><span class=\"line\">             <span class=\"string\">\\</span> <span class=\"string\">\\</span></span><br><span class=\"line\">              <span class=\"string\">v</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">node</span> <span class=\"number\">1</span> <span class=\"string\">&lt;---</span> <span class=\"string\">node</span> <span class=\"number\">2</span></span><br><span class=\"line\">   <span class=\"string\">| ^   SNAT</span></span><br><span class=\"line\"><span class=\"string\">   | |   ---&gt;</span></span><br><span class=\"line\"><span class=\"string\">   v |</span></span><br><span class=\"line\"><span class=\"string\">endpoint</span></span><br></pre></td></tr></table></figure>\n<p>流程：</p>\n<ul>\n<li>客户端发送数据包到 node2:nodePort</li>\n<li>node2 使用它自己的 IP 地址替换数据包的源 IP 地址（SNAT）</li>\n<li>node2 使用 pod IP 地址替换数据包的目的 IP 地址</li>\n<li>数据包被路由到 node 1，然后交给 endpoint</li>\n<li>Pod 的回复被路由回 node2</li>\n<li>Pod 的回复被发送回给客户端</li>\n</ul>\n<p>可以将 <code>service.spec.externalTrafficPolicy</code> 的值为 Local，请求就只会被代理到本地 endpoints 而不会被转发到其它节点。这样就保留了最初的源 IP 地址 <strong>不会对访问NodePort的client ip做 SNAT了</strong>。如果没有本地 endpoints，发送到这个节点的数据包将会被丢弃。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"容器网络\"><a href=\"#容器网络\" class=\"headerlink\" title=\"容器网络\"></a>容器网络</h1><h2 id=\"vxlan\"><a href=\"#vxlan\" class=\"headerlink\" title=\"vxlan\"></a>vxlan</h2><p>vxlan原理 overlay网络<br>VXLAN通过MAC-in-UDP的报文封装，实现了二层报文在三层网络上的透传</p>\n<h2 id=\"Flannel\"><a href=\"#Flannel\" class=\"headerlink\" title=\"Flannel\"></a>Flannel</h2><p>首先，flannel利用<strong><code>Kubernetes-API(这里就是取node.spec.podCIDR)或者etcd</code></strong>用于存储整个集群的网络配置，其中最主要的内容为设置集群的网络地址空间。例如，设定整个集群内所有容器的IP都取自网段“10.1.0.0/16”。</p>\n<p>接着，flannel在每个主机中运行flanneld作为agent，它会为所在主机从集群的网络地址空间中，获取一个小的网段subnet，本主机内所有容器的IP地址都将从中分配。</p>\n<p><code>flannel</code> 的 <code>UDP</code> 模式和 <code>Vxlan</code> 模式 <code>host-gw</code> 模式</p>\n<ul>\n<li><code>UDP</code> 模式是 三层 <code>overlay</code>,即，将原始数据包的三层包（IP包）装在 <code>UDP</code> 包里,通过 ip+端口 传到目的地，ip为目标node ip 端口为目标节点上flanneld进程监听的8285端口，解析后传入flannel0设备进入内核网络协议栈，<br>UDP模式下 封包解包是在 flanneld里进行的也就是用户态下</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/84/8d/84caa6dc3f9dcdf8b88b56bd2e22138d.png\" alt=\"\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/e6/f0/e6827cecb75641d3c8838f2213543cf0.png\" alt=\"\"></p>\n<p><strong>重要！！！ 《深入解析kubernetes》</strong> 33章  <a href=\"https://time.geekbang.org/column/article/65287\" target=\"_blank\" rel=\"noopener\">https://time.geekbang.org/column/article/65287</a></p>\n<ul>\n<li>VxLan 模式 是二层 <code>overlay</code>,即将原始Ethernet包（MAC包）封装起来，通过vtep设备发到目的vtep，vxlan是内核模块，vtep是flannneld创建的，vxlan封包解封完全是在内核态完成的</li>\n<li></li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/43/41/43f5ebb001145ecd896fd10fb27c5c41.png\" alt=\"\"></p>\n<ul>\n<li>注意点 <ul>\n<li>inner mac 为 目的vtep的mac</li>\n<li>outer ip为目的node的ip <strong>这一点和UDP有区别</strong><br>下一跳ip对应的mac地址是ARP表里记录的，inner mac对应的arp记录是 flanneld维护的，outer mac arp表是node自学习的</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/ce/38/cefe6b99422fba768c53f0093947cd38.png\" alt=\"\"></p>\n<ul>\n<li><code>host-gw</code> 模式的工作原理,是在 节点上加路由表，其实就是将每个 Flannel 子网（Flannel Subnet，比如：10.244.1.0/24）的“下一跳”，设置成了该子网对应的宿主机的 IP 地址。<br>这台“主机”（Host）会充当这条容器通信路径里的“网关”（Gateway）。这也正是“host-gw”的含义。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ip route</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;目的容器IP地址段&gt; via &lt;网关的IP地址&gt; dev eth0# 网关的 IP 地址，正是目的容器所在宿主机的 IP 地址</span><br></pre></td></tr></table></figure>\n<p><strong>Flannel host-gw 模式必须要求集群宿主机之间是二层连通的。如果分布在不同的子网里是不行的，只是三层可达</strong></p>\n<h3 id=\"POD-IP的分配\"><a href=\"#POD-IP的分配\" class=\"headerlink\" title=\"POD IP的分配\"></a>POD IP的分配</h3><h4 id=\"使用CNI后，即配置了-kubelet-的-network-plugin-cni，容器的IP分配：\"><a href=\"#使用CNI后，即配置了-kubelet-的-network-plugin-cni，容器的IP分配：\" class=\"headerlink\" title=\"使用CNI后，即配置了 kubelet 的 --network-plugin=cni，容器的IP分配：\"></a>使用CNI后，即配置了 <code>kubelet</code> 的 <code>--network-plugin=cni</code>，容器的IP分配：</h4><p>kubelet 先创建pause容器生成network namespace<br>调用 网络driver CNI driver<br>CNI driver 根据配置调用具体的cni 插件<br>cni 插件给pause 容器配置网络<br>pod 中其他的容器都使用 pause 容器的网络</p>\n<h4 id=\"CNM模式\"><a href=\"#CNM模式\" class=\"headerlink\" title=\"CNM模式\"></a>CNM模式</h4><p>Pod IP是docker engine分配的，Pod也是以docker0为网关，通过veth连接network namespace</p>\n<h4 id=\"flannel的两种方式-CNI-CNM总结\"><a href=\"#flannel的两种方式-CNI-CNM总结\" class=\"headerlink\" title=\"flannel的两种方式 CNI CNM总结\"></a>flannel的两种方式 CNI CNM总结</h4><p>CNI中，docker0的ip与Pod无关，Pod总是生成的时候才去动态的申请自己的IP，而CNM模式下，Pod的网段在docker engine启动时就已经决定。<br>CNI只是一个网络接口规范，各种功能都由插件实现，flannel只是插件的一种，而且docker也只是容器载体的一种选择，Kubernetes还可以使用其他的，</p>\n<h2 id=\"cluster-IP的分配\"><a href=\"#cluster-IP的分配\" class=\"headerlink\" title=\"cluster IP的分配\"></a>cluster IP的分配</h2><pre><code>是在kube-apiserver中 `pkg/registry/core/service/ipallocator`中分配的\n</code></pre><h2 id=\"network-policy\"><a href=\"#network-policy\" class=\"headerlink\" title=\"network policy\"></a>network policy</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ingress:</span></span><br><span class=\"line\"><span class=\"attr\">- from:</span></span><br><span class=\"line\"><span class=\"attr\">  - namespaceSelector:</span></span><br><span class=\"line\"><span class=\"attr\">      matchLabels:</span></span><br><span class=\"line\"><span class=\"attr\">        user:</span> <span class=\"string\">alice</span></span><br><span class=\"line\"><span class=\"attr\">  - podSelector:</span></span><br><span class=\"line\"><span class=\"attr\">      matchLabels:</span></span><br><span class=\"line\"><span class=\"attr\">        role:</span> <span class=\"string\">client</span></span><br></pre></td></tr></table></figure>\n<p>像上面这样定义的 namespaceSelector 和 podSelector，是“或”（OR）的关系，表示的是yaml数组里的两个元素</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ingress:</span></span><br><span class=\"line\"><span class=\"attr\">- from:</span></span><br><span class=\"line\"><span class=\"attr\">  - namespaceSelector:</span></span><br><span class=\"line\"><span class=\"attr\">      matchLabels:</span></span><br><span class=\"line\"><span class=\"attr\">        user:</span> <span class=\"string\">alice</span></span><br><span class=\"line\"><span class=\"attr\">    podSelector:</span></span><br><span class=\"line\"><span class=\"attr\">      matchLabels:</span></span><br><span class=\"line\"><span class=\"attr\">        role:</span> <span class=\"string\">client</span></span><br></pre></td></tr></table></figure>\n<p>像上面这样定义的 namespaceSelector 和 podSelector，是“与”（AND）的关系，yaml里表示的是一个数组元素的两个字段</p>\n<p>Kubernetes 网络插件对 Pod 进行隔离，其实是靠在宿主机上生成 NetworkPolicy 对应的 iptable 规则来实现的。</p>\n<h2 id=\"通过NodePort来访问service的话，client的源ip会被做SNAT\"><a href=\"#通过NodePort来访问service的话，client的源ip会被做SNAT\" class=\"headerlink\" title=\"通过NodePort来访问service的话，client的源ip会被做SNAT\"></a>通过NodePort来访问service的话，client的源ip会被做SNAT</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">         <span class=\"string\">client</span></span><br><span class=\"line\">            <span class=\"string\">\\</span> <span class=\"string\">^</span></span><br><span class=\"line\">             <span class=\"string\">\\</span> <span class=\"string\">\\</span></span><br><span class=\"line\">              <span class=\"string\">v</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">node</span> <span class=\"number\">1</span> <span class=\"string\">&lt;---</span> <span class=\"string\">node</span> <span class=\"number\">2</span></span><br><span class=\"line\">   <span class=\"string\">| ^   SNAT</span></span><br><span class=\"line\"><span class=\"string\">   | |   ---&gt;</span></span><br><span class=\"line\"><span class=\"string\">   v |</span></span><br><span class=\"line\"><span class=\"string\">endpoint</span></span><br></pre></td></tr></table></figure>\n<p>流程：</p>\n<ul>\n<li>客户端发送数据包到 node2:nodePort</li>\n<li>node2 使用它自己的 IP 地址替换数据包的源 IP 地址（SNAT）</li>\n<li>node2 使用 pod IP 地址替换数据包的目的 IP 地址</li>\n<li>数据包被路由到 node 1，然后交给 endpoint</li>\n<li>Pod 的回复被路由回 node2</li>\n<li>Pod 的回复被发送回给客户端</li>\n</ul>\n<p>可以将 <code>service.spec.externalTrafficPolicy</code> 的值为 Local，请求就只会被代理到本地 endpoints 而不会被转发到其它节点。这样就保留了最初的源 IP 地址 <strong>不会对访问NodePort的client ip做 SNAT了</strong>。如果没有本地 endpoints，发送到这个节点的数据包将会被丢弃。</p>\n"},{"layout":"post","title":"分布式锁","date":"2020-02-10T03:40:18.000Z","author":"zhaojizhuang","_content":"\n\n\n# 分布式锁\n\n## k8s 的选主机制\n\n通过生成一个 k8s资源来实现\n\n[https://blog.csdn.net/weixin_39961559/article/details/81877056](https://blog.csdn.net/weixin_39961559/article/details/81877056)\n\n\n## etcd自己实现的锁和选主\n[https://yq.aliyun.com/articles/70546](https://yq.aliyun.com/articles/70546)\n\n`Etcd` 的 `v3` 版本官方 `client` 里有一个 `concurrency` 的包，里面实现了分布式锁和选主。本文分析一下它是如何实现的。\n\n\n- 锁的code [https://github.com/coreos/etcd/blob/master/clientv3/concurrency/mutex.go#L26](https://github.com/coreos/etcd/blob/master/clientv3/concurrency/mutex.go#L26)\n\n- 选主的实现与锁的实现非常类似 [https://github.com/coreos/etcd/blob/master/clientv3/concurrency/election.go#L31](https://github.com/coreos/etcd/blob/master/clientv3/concurrency/election.go#L31)\n\n## `etcd` 的分布式锁，利用 `etcd` 的租约机制\n\n[https://blog.51cto.com/5660061/2381931](https://blog.51cto.com/5660061/2381931)\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/coreos/etcd/clientv3\"\n\t\"time\"\n)\n\nfunc main() {\n\tconfig := clientv3.Config{\n\t\tEndpoints:   []string{\"127.0.0.1:2379\"},\n\t\tDialTimeout: 5 * time.Second,\n\t}\n\tclient, err := clientv3.New(config)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tlease := clientv3.NewLease(client)\n\t// Grant：分配一个租约。\n\t// Revoke：释放一个租约。\n\t// TimeToLive：获取剩余TTL时间。\n\t// Leases：列举所有etcd中的租约。\n\t// KeepAlive：自动定时的续约某个租约。\n\tleaseResp, err := lease.Grant(context.TODO(), 10) //创建一个租约，它有10秒的TTL：\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tleaseID := leaseResp.ID\n\tctx, cancelFunc := context.WithCancel(context.TODO())\n\t// 两个defer用于释放锁\n\tdefer cancelFunc()\n\tdefer lease.Revoke(context.TODO(), leaseID)\n\n\t// 抢锁和占用期间，需要不停的续租，续租方法返回一个只读的channel\n\tkeepChan, err := lease.KeepAlive(ctx, leaseID)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\t// 处理续租返回的信息\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase keepResp := <-keepChan:\n\t\t\t\tif keepChan == nil {\n\t\t\t\t\tfmt.Println(\"lease out\")\n\t\t\t\t\tgoto END\n\t\t\t\t} else {\n\t\t\t\t\tfmt.Println(\"get resp\", keepResp.ID)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\tEND:\n\t}()\n\tkv := clientv3.NewKV(client)\n\t//put一个kv，让它与租约关联起来，从而实现10秒后自动过期\n\tputResp, err := kv.Put(context.TODO(), \"/cron/lock/job1\", \"\", clientv3.WithLease(leaseID))\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"写入成功:\", putResp.Header.Revision)\n\n\t//定时看key过期没\n\tfor {\n\t\tgetResp, err := kv.Get(context.TODO(), \"/cron/lock/job1\")\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\treturn\n\t\t}\n\t\tif getResp.Count == 0 {\n\t\t\tfmt.Println(\"kv过期了\")\n\t\t\tbreak\n\t\t}\n\t\tfmt.Println(\"还没过期:\", getResp.Kvs)\n\t\ttime.Sleep(time.Second)\n\t}\n}\n\n```\n\n\n\n```go \npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"go.etcd.io/etcd/clientv3\"\n\t\"time\"\n)\n\ntype ETCDMutex struct {\n\tTtl     int64\n\tConf    clientv3.Config\n\tKey     string\n\tcancel  context.CancelFunc\n\tlease   clientv3.Lease\n\tleaseID clientv3.LeaseID\n\ttxn     clientv3.Txn\n}\n\nfunc (em *ETCDMutex) init() error {\n\tclient, err := clientv3.New(em.Conf)\n\tif err != nil {\n\t\treturn err\n\t}\n\tem.txn = clientv3.KV(client).Txn(context.TODO())\n\n\tif err != nil {\n\t\treturn err\n\t}\n\tem.lease = clientv3.NewLease(client)\n\tleaseResp, err := em.lease.Grant(context.TODO(), em.Ttl)\n\tif err != nil {\n\t\treturn err\n\t}\n\tvar ctx context.Context\n\tctx, em.cancel = context.WithCancel(context.TODO())\n\tem.leaseID = leaseResp.ID\n\t_, err = em.lease.KeepAlive(ctx, em.leaseID)\n\treturn err\n}\nfunc (em *ETCDMutex) lock() error {\n\terr := em.init()\n\tif err != nil {\n\t\treturn err\n\t}\n\t// CreateRevision ==0 表示key不存在\n\t//LOCK:\n\ttxnResp, err := em.txn.If(clientv3.Compare(clientv3.CreateRevision(em.Key), \"=\", 0)).\n\t\tThen(clientv3.OpPut(em.Key, \"\", clientv3.WithLease(em.leaseID))).Commit()\n\tif err != nil {\n\t\treturn err\n\t}\n\tif !txnResp.Succeeded { //判断txn.if条件是否成立\n\t\treturn fmt.Errorf(\"抢锁失败\")\n\t}\n\treturn nil\n}\n\nfunc (em *ETCDMutex) UnLock() {\n\tem.cancel()\n\tem.lease.Revoke(context.TODO(), em.leaseID)\n\tfmt.Println(\"释放了锁\")\n}\n\nfunc main() {\n\tvar conf = clientv3.Config{\n\t\tEndpoints:   []string{\"172.16.196.129:2380\", \"192.168.50.250:2380\"},\n\t\tDialTimeout: 5 * time.Second,\n\t}\n\teMutex1 := &ETCDMutex{\n\t\tConf: conf,\n\t\tTtl:  10,\n\t\tKey:  \"lock\",\n\t}\n\teMutex2 := &ETCDMutex{\n\t\tConf: conf,\n\t\tTtl:  10,\n\t\tKey:  \"lock\",\n\t}\n\t//groutine1\n\tgo func() {\n\t\terr := eMutex1.lock()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"groutine1抢锁失败\")\n\t\t\tfmt.Println(err)\n\t\t\treturn\n\t\t}\n\t\t//可以做点其他事，比如访问和操作分布式资源\n\t\tfmt.Println(\"groutine1抢锁成功\")\n\t\ttime.Sleep(10 * time.Second)\n\t\tdefer eMutex1.UnLock()\n\t}()\n\n\t//groutine2\n\tgo func() {\n\t\terr := eMutex2.lock()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"groutine2抢锁失败\")\n\t\t\tfmt.Println(err)\n\t\t\treturn\n\t\t}\n\t\t//可以做点其他事，比如访问和操作分布式资源\n\t\tfmt.Println(\"groutine2抢锁成功\")\n\t\tdefer eMutex2.UnLock()\n\t}()\n\ttime.Sleep(30 * time.Second)\n}\n\n```\n\nhttps://studygolang.com/articles/16307?fr=sidebar","source":"_posts/fen-bu-shi-suo.md","raw":"---\nlayout: post\ntitle:  \"分布式锁\"\ndate:   2020-02-10 11:40:18 +0800\ncategories: 分布式\ntags:  [\"分布式\", \"go\"]\nauthor: zhaojizhuang\n\n---\n\n\n\n# 分布式锁\n\n## k8s 的选主机制\n\n通过生成一个 k8s资源来实现\n\n[https://blog.csdn.net/weixin_39961559/article/details/81877056](https://blog.csdn.net/weixin_39961559/article/details/81877056)\n\n\n## etcd自己实现的锁和选主\n[https://yq.aliyun.com/articles/70546](https://yq.aliyun.com/articles/70546)\n\n`Etcd` 的 `v3` 版本官方 `client` 里有一个 `concurrency` 的包，里面实现了分布式锁和选主。本文分析一下它是如何实现的。\n\n\n- 锁的code [https://github.com/coreos/etcd/blob/master/clientv3/concurrency/mutex.go#L26](https://github.com/coreos/etcd/blob/master/clientv3/concurrency/mutex.go#L26)\n\n- 选主的实现与锁的实现非常类似 [https://github.com/coreos/etcd/blob/master/clientv3/concurrency/election.go#L31](https://github.com/coreos/etcd/blob/master/clientv3/concurrency/election.go#L31)\n\n## `etcd` 的分布式锁，利用 `etcd` 的租约机制\n\n[https://blog.51cto.com/5660061/2381931](https://blog.51cto.com/5660061/2381931)\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/coreos/etcd/clientv3\"\n\t\"time\"\n)\n\nfunc main() {\n\tconfig := clientv3.Config{\n\t\tEndpoints:   []string{\"127.0.0.1:2379\"},\n\t\tDialTimeout: 5 * time.Second,\n\t}\n\tclient, err := clientv3.New(config)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tlease := clientv3.NewLease(client)\n\t// Grant：分配一个租约。\n\t// Revoke：释放一个租约。\n\t// TimeToLive：获取剩余TTL时间。\n\t// Leases：列举所有etcd中的租约。\n\t// KeepAlive：自动定时的续约某个租约。\n\tleaseResp, err := lease.Grant(context.TODO(), 10) //创建一个租约，它有10秒的TTL：\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tleaseID := leaseResp.ID\n\tctx, cancelFunc := context.WithCancel(context.TODO())\n\t// 两个defer用于释放锁\n\tdefer cancelFunc()\n\tdefer lease.Revoke(context.TODO(), leaseID)\n\n\t// 抢锁和占用期间，需要不停的续租，续租方法返回一个只读的channel\n\tkeepChan, err := lease.KeepAlive(ctx, leaseID)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\t// 处理续租返回的信息\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase keepResp := <-keepChan:\n\t\t\t\tif keepChan == nil {\n\t\t\t\t\tfmt.Println(\"lease out\")\n\t\t\t\t\tgoto END\n\t\t\t\t} else {\n\t\t\t\t\tfmt.Println(\"get resp\", keepResp.ID)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\tEND:\n\t}()\n\tkv := clientv3.NewKV(client)\n\t//put一个kv，让它与租约关联起来，从而实现10秒后自动过期\n\tputResp, err := kv.Put(context.TODO(), \"/cron/lock/job1\", \"\", clientv3.WithLease(leaseID))\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"写入成功:\", putResp.Header.Revision)\n\n\t//定时看key过期没\n\tfor {\n\t\tgetResp, err := kv.Get(context.TODO(), \"/cron/lock/job1\")\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\treturn\n\t\t}\n\t\tif getResp.Count == 0 {\n\t\t\tfmt.Println(\"kv过期了\")\n\t\t\tbreak\n\t\t}\n\t\tfmt.Println(\"还没过期:\", getResp.Kvs)\n\t\ttime.Sleep(time.Second)\n\t}\n}\n\n```\n\n\n\n```go \npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"go.etcd.io/etcd/clientv3\"\n\t\"time\"\n)\n\ntype ETCDMutex struct {\n\tTtl     int64\n\tConf    clientv3.Config\n\tKey     string\n\tcancel  context.CancelFunc\n\tlease   clientv3.Lease\n\tleaseID clientv3.LeaseID\n\ttxn     clientv3.Txn\n}\n\nfunc (em *ETCDMutex) init() error {\n\tclient, err := clientv3.New(em.Conf)\n\tif err != nil {\n\t\treturn err\n\t}\n\tem.txn = clientv3.KV(client).Txn(context.TODO())\n\n\tif err != nil {\n\t\treturn err\n\t}\n\tem.lease = clientv3.NewLease(client)\n\tleaseResp, err := em.lease.Grant(context.TODO(), em.Ttl)\n\tif err != nil {\n\t\treturn err\n\t}\n\tvar ctx context.Context\n\tctx, em.cancel = context.WithCancel(context.TODO())\n\tem.leaseID = leaseResp.ID\n\t_, err = em.lease.KeepAlive(ctx, em.leaseID)\n\treturn err\n}\nfunc (em *ETCDMutex) lock() error {\n\terr := em.init()\n\tif err != nil {\n\t\treturn err\n\t}\n\t// CreateRevision ==0 表示key不存在\n\t//LOCK:\n\ttxnResp, err := em.txn.If(clientv3.Compare(clientv3.CreateRevision(em.Key), \"=\", 0)).\n\t\tThen(clientv3.OpPut(em.Key, \"\", clientv3.WithLease(em.leaseID))).Commit()\n\tif err != nil {\n\t\treturn err\n\t}\n\tif !txnResp.Succeeded { //判断txn.if条件是否成立\n\t\treturn fmt.Errorf(\"抢锁失败\")\n\t}\n\treturn nil\n}\n\nfunc (em *ETCDMutex) UnLock() {\n\tem.cancel()\n\tem.lease.Revoke(context.TODO(), em.leaseID)\n\tfmt.Println(\"释放了锁\")\n}\n\nfunc main() {\n\tvar conf = clientv3.Config{\n\t\tEndpoints:   []string{\"172.16.196.129:2380\", \"192.168.50.250:2380\"},\n\t\tDialTimeout: 5 * time.Second,\n\t}\n\teMutex1 := &ETCDMutex{\n\t\tConf: conf,\n\t\tTtl:  10,\n\t\tKey:  \"lock\",\n\t}\n\teMutex2 := &ETCDMutex{\n\t\tConf: conf,\n\t\tTtl:  10,\n\t\tKey:  \"lock\",\n\t}\n\t//groutine1\n\tgo func() {\n\t\terr := eMutex1.lock()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"groutine1抢锁失败\")\n\t\t\tfmt.Println(err)\n\t\t\treturn\n\t\t}\n\t\t//可以做点其他事，比如访问和操作分布式资源\n\t\tfmt.Println(\"groutine1抢锁成功\")\n\t\ttime.Sleep(10 * time.Second)\n\t\tdefer eMutex1.UnLock()\n\t}()\n\n\t//groutine2\n\tgo func() {\n\t\terr := eMutex2.lock()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"groutine2抢锁失败\")\n\t\t\tfmt.Println(err)\n\t\t\treturn\n\t\t}\n\t\t//可以做点其他事，比如访问和操作分布式资源\n\t\tfmt.Println(\"groutine2抢锁成功\")\n\t\tdefer eMutex2.UnLock()\n\t}()\n\ttime.Sleep(30 * time.Second)\n}\n\n```\n\nhttps://studygolang.com/articles/16307?fr=sidebar","slug":"fen-bu-shi-suo","published":1,"updated":"2020-05-06T15:55:07.047Z","_id":"ck9vivyp2000mbbfld9fd0lwu","comments":1,"photos":[],"link":"","content":"<h1 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h1><h2 id=\"k8s-的选主机制\"><a href=\"#k8s-的选主机制\" class=\"headerlink\" title=\"k8s 的选主机制\"></a>k8s 的选主机制</h2><p>通过生成一个 k8s资源来实现</p>\n<p><a href=\"https://blog.csdn.net/weixin_39961559/article/details/81877056\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_39961559/article/details/81877056</a></p>\n<h2 id=\"etcd自己实现的锁和选主\"><a href=\"#etcd自己实现的锁和选主\" class=\"headerlink\" title=\"etcd自己实现的锁和选主\"></a>etcd自己实现的锁和选主</h2><p><a href=\"https://yq.aliyun.com/articles/70546\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/articles/70546</a></p>\n<p><code>Etcd</code> 的 <code>v3</code> 版本官方 <code>client</code> 里有一个 <code>concurrency</code> 的包，里面实现了分布式锁和选主。本文分析一下它是如何实现的。</p>\n<ul>\n<li><p>锁的code <a href=\"https://github.com/coreos/etcd/blob/master/clientv3/concurrency/mutex.go#L26\" target=\"_blank\" rel=\"noopener\">https://github.com/coreos/etcd/blob/master/clientv3/concurrency/mutex.go#L26</a></p>\n</li>\n<li><p>选主的实现与锁的实现非常类似 <a href=\"https://github.com/coreos/etcd/blob/master/clientv3/concurrency/election.go#L31\" target=\"_blank\" rel=\"noopener\">https://github.com/coreos/etcd/blob/master/clientv3/concurrency/election.go#L31</a></p>\n</li>\n</ul>\n<h2 id=\"etcd-的分布式锁，利用-etcd-的租约机制\"><a href=\"#etcd-的分布式锁，利用-etcd-的租约机制\" class=\"headerlink\" title=\"etcd 的分布式锁，利用 etcd 的租约机制\"></a><code>etcd</code> 的分布式锁，利用 <code>etcd</code> 的租约机制</h2><p><a href=\"https://blog.51cto.com/5660061/2381931\" target=\"_blank\" rel=\"noopener\">https://blog.51cto.com/5660061/2381931</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"context\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/coreos/etcd/clientv3\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tconfig := clientv3.Config&#123;</span><br><span class=\"line\">\t\tEndpoints:   []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"127.0.0.1:2379\"</span>&#125;,</span><br><span class=\"line\">\t\tDialTimeout: <span class=\"number\">5</span> * time.Second,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tclient, err := clientv3.New(config)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlease := clientv3.NewLease(client)</span><br><span class=\"line\">\t<span class=\"comment\">// Grant：分配一个租约。</span></span><br><span class=\"line\">\t<span class=\"comment\">// Revoke：释放一个租约。</span></span><br><span class=\"line\">\t<span class=\"comment\">// TimeToLive：获取剩余TTL时间。</span></span><br><span class=\"line\">\t<span class=\"comment\">// Leases：列举所有etcd中的租约。</span></span><br><span class=\"line\">\t<span class=\"comment\">// KeepAlive：自动定时的续约某个租约。</span></span><br><span class=\"line\">\tleaseResp, err := lease.Grant(context.TODO(), <span class=\"number\">10</span>) <span class=\"comment\">//创建一个租约，它有10秒的TTL：</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tleaseID := leaseResp.ID</span><br><span class=\"line\">\tctx, cancelFunc := context.WithCancel(context.TODO())</span><br><span class=\"line\">\t<span class=\"comment\">// 两个defer用于释放锁</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> cancelFunc()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> lease.Revoke(context.TODO(), leaseID)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 抢锁和占用期间，需要不停的续租，续租方法返回一个只读的channel</span></span><br><span class=\"line\">\tkeepChan, err := lease.KeepAlive(ctx, leaseID)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 处理续租返回的信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> keepResp := &lt;-keepChan:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> keepChan == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tfmt.Println(<span class=\"string\">\"lease out\"</span>)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">goto</span> END</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tfmt.Println(<span class=\"string\">\"get resp\"</span>, keepResp.ID)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\tEND:</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tkv := clientv3.NewKV(client)</span><br><span class=\"line\">\t<span class=\"comment\">//put一个kv，让它与租约关联起来，从而实现10秒后自动过期</span></span><br><span class=\"line\">\tputResp, err := kv.Put(context.TODO(), <span class=\"string\">\"/cron/lock/job1\"</span>, <span class=\"string\">\"\"</span>, clientv3.WithLease(leaseID))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"写入成功:\"</span>, putResp.Header.Revision)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//定时看key过期没</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tgetResp, err := kv.Get(context.TODO(), <span class=\"string\">\"/cron/lock/job1\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> getResp.Count == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"kv过期了\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"还没过期:\"</span>, getResp.Kvs)</span><br><span class=\"line\">\t\ttime.Sleep(time.Second)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"context\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"go.etcd.io/etcd/clientv3\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ETCDMutex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tTtl     <span class=\"keyword\">int64</span></span><br><span class=\"line\">\tConf    clientv3.Config</span><br><span class=\"line\">\tKey     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tcancel  context.CancelFunc</span><br><span class=\"line\">\tlease   clientv3.Lease</span><br><span class=\"line\">\tleaseID clientv3.LeaseID</span><br><span class=\"line\">\ttxn     clientv3.Txn</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(em *ETCDMutex)</span> <span class=\"title\">init</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tclient, err := clientv3.New(em.Conf)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tem.txn = clientv3.KV(client).Txn(context.TODO())</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tem.lease = clientv3.NewLease(client)</span><br><span class=\"line\">\tleaseResp, err := em.lease.Grant(context.TODO(), em.Ttl)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ctx context.Context</span><br><span class=\"line\">\tctx, em.cancel = context.WithCancel(context.TODO())</span><br><span class=\"line\">\tem.leaseID = leaseResp.ID</span><br><span class=\"line\">\t_, err = em.lease.KeepAlive(ctx, em.leaseID)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(em *ETCDMutex)</span> <span class=\"title\">lock</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\terr := em.init()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// CreateRevision ==0 表示key不存在</span></span><br><span class=\"line\">\t<span class=\"comment\">//LOCK:</span></span><br><span class=\"line\">\ttxnResp, err := em.txn.If(clientv3.Compare(clientv3.CreateRevision(em.Key), <span class=\"string\">\"=\"</span>, <span class=\"number\">0</span>)).</span><br><span class=\"line\">\t\tThen(clientv3.OpPut(em.Key, <span class=\"string\">\"\"</span>, clientv3.WithLease(em.leaseID))).Commit()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !txnResp.Succeeded &#123; <span class=\"comment\">//判断txn.if条件是否成立</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">\"抢锁失败\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(em *ETCDMutex)</span> <span class=\"title\">UnLock</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tem.cancel()</span><br><span class=\"line\">\tem.lease.Revoke(context.TODO(), em.leaseID)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"释放了锁\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> conf = clientv3.Config&#123;</span><br><span class=\"line\">\t\tEndpoints:   []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"172.16.196.129:2380\"</span>, <span class=\"string\">\"192.168.50.250:2380\"</span>&#125;,</span><br><span class=\"line\">\t\tDialTimeout: <span class=\"number\">5</span> * time.Second,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\teMutex1 := &amp;ETCDMutex&#123;</span><br><span class=\"line\">\t\tConf: conf,</span><br><span class=\"line\">\t\tTtl:  <span class=\"number\">10</span>,</span><br><span class=\"line\">\t\tKey:  <span class=\"string\">\"lock\"</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\teMutex2 := &amp;ETCDMutex&#123;</span><br><span class=\"line\">\t\tConf: conf,</span><br><span class=\"line\">\t\tTtl:  <span class=\"number\">10</span>,</span><br><span class=\"line\">\t\tKey:  <span class=\"string\">\"lock\"</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//groutine1</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\terr := eMutex1.lock()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"groutine1抢锁失败\"</span>)</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//可以做点其他事，比如访问和操作分布式资源</span></span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"groutine1抢锁成功\"</span>)</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">10</span> * time.Second)</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> eMutex1.UnLock()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//groutine2</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\terr := eMutex2.lock()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"groutine2抢锁失败\"</span>)</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//可以做点其他事，比如访问和操作分布式资源</span></span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"groutine2抢锁成功\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> eMutex2.UnLock()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">30</span> * time.Second)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://studygolang.com/articles/16307?fr=sidebar\" target=\"_blank\" rel=\"noopener\">https://studygolang.com/articles/16307?fr=sidebar</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h1><h2 id=\"k8s-的选主机制\"><a href=\"#k8s-的选主机制\" class=\"headerlink\" title=\"k8s 的选主机制\"></a>k8s 的选主机制</h2><p>通过生成一个 k8s资源来实现</p>\n<p><a href=\"https://blog.csdn.net/weixin_39961559/article/details/81877056\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_39961559/article/details/81877056</a></p>\n<h2 id=\"etcd自己实现的锁和选主\"><a href=\"#etcd自己实现的锁和选主\" class=\"headerlink\" title=\"etcd自己实现的锁和选主\"></a>etcd自己实现的锁和选主</h2><p><a href=\"https://yq.aliyun.com/articles/70546\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/articles/70546</a></p>\n<p><code>Etcd</code> 的 <code>v3</code> 版本官方 <code>client</code> 里有一个 <code>concurrency</code> 的包，里面实现了分布式锁和选主。本文分析一下它是如何实现的。</p>\n<ul>\n<li><p>锁的code <a href=\"https://github.com/coreos/etcd/blob/master/clientv3/concurrency/mutex.go#L26\" target=\"_blank\" rel=\"noopener\">https://github.com/coreos/etcd/blob/master/clientv3/concurrency/mutex.go#L26</a></p>\n</li>\n<li><p>选主的实现与锁的实现非常类似 <a href=\"https://github.com/coreos/etcd/blob/master/clientv3/concurrency/election.go#L31\" target=\"_blank\" rel=\"noopener\">https://github.com/coreos/etcd/blob/master/clientv3/concurrency/election.go#L31</a></p>\n</li>\n</ul>\n<h2 id=\"etcd-的分布式锁，利用-etcd-的租约机制\"><a href=\"#etcd-的分布式锁，利用-etcd-的租约机制\" class=\"headerlink\" title=\"etcd 的分布式锁，利用 etcd 的租约机制\"></a><code>etcd</code> 的分布式锁，利用 <code>etcd</code> 的租约机制</h2><p><a href=\"https://blog.51cto.com/5660061/2381931\" target=\"_blank\" rel=\"noopener\">https://blog.51cto.com/5660061/2381931</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"context\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/coreos/etcd/clientv3\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tconfig := clientv3.Config&#123;</span><br><span class=\"line\">\t\tEndpoints:   []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"127.0.0.1:2379\"</span>&#125;,</span><br><span class=\"line\">\t\tDialTimeout: <span class=\"number\">5</span> * time.Second,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tclient, err := clientv3.New(config)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlease := clientv3.NewLease(client)</span><br><span class=\"line\">\t<span class=\"comment\">// Grant：分配一个租约。</span></span><br><span class=\"line\">\t<span class=\"comment\">// Revoke：释放一个租约。</span></span><br><span class=\"line\">\t<span class=\"comment\">// TimeToLive：获取剩余TTL时间。</span></span><br><span class=\"line\">\t<span class=\"comment\">// Leases：列举所有etcd中的租约。</span></span><br><span class=\"line\">\t<span class=\"comment\">// KeepAlive：自动定时的续约某个租约。</span></span><br><span class=\"line\">\tleaseResp, err := lease.Grant(context.TODO(), <span class=\"number\">10</span>) <span class=\"comment\">//创建一个租约，它有10秒的TTL：</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tleaseID := leaseResp.ID</span><br><span class=\"line\">\tctx, cancelFunc := context.WithCancel(context.TODO())</span><br><span class=\"line\">\t<span class=\"comment\">// 两个defer用于释放锁</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> cancelFunc()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> lease.Revoke(context.TODO(), leaseID)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 抢锁和占用期间，需要不停的续租，续租方法返回一个只读的channel</span></span><br><span class=\"line\">\tkeepChan, err := lease.KeepAlive(ctx, leaseID)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 处理续租返回的信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> keepResp := &lt;-keepChan:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> keepChan == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tfmt.Println(<span class=\"string\">\"lease out\"</span>)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">goto</span> END</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tfmt.Println(<span class=\"string\">\"get resp\"</span>, keepResp.ID)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\tEND:</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tkv := clientv3.NewKV(client)</span><br><span class=\"line\">\t<span class=\"comment\">//put一个kv，让它与租约关联起来，从而实现10秒后自动过期</span></span><br><span class=\"line\">\tputResp, err := kv.Put(context.TODO(), <span class=\"string\">\"/cron/lock/job1\"</span>, <span class=\"string\">\"\"</span>, clientv3.WithLease(leaseID))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"写入成功:\"</span>, putResp.Header.Revision)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//定时看key过期没</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tgetResp, err := kv.Get(context.TODO(), <span class=\"string\">\"/cron/lock/job1\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> getResp.Count == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"kv过期了\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"还没过期:\"</span>, getResp.Kvs)</span><br><span class=\"line\">\t\ttime.Sleep(time.Second)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"context\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"go.etcd.io/etcd/clientv3\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ETCDMutex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tTtl     <span class=\"keyword\">int64</span></span><br><span class=\"line\">\tConf    clientv3.Config</span><br><span class=\"line\">\tKey     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tcancel  context.CancelFunc</span><br><span class=\"line\">\tlease   clientv3.Lease</span><br><span class=\"line\">\tleaseID clientv3.LeaseID</span><br><span class=\"line\">\ttxn     clientv3.Txn</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(em *ETCDMutex)</span> <span class=\"title\">init</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tclient, err := clientv3.New(em.Conf)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tem.txn = clientv3.KV(client).Txn(context.TODO())</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tem.lease = clientv3.NewLease(client)</span><br><span class=\"line\">\tleaseResp, err := em.lease.Grant(context.TODO(), em.Ttl)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ctx context.Context</span><br><span class=\"line\">\tctx, em.cancel = context.WithCancel(context.TODO())</span><br><span class=\"line\">\tem.leaseID = leaseResp.ID</span><br><span class=\"line\">\t_, err = em.lease.KeepAlive(ctx, em.leaseID)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(em *ETCDMutex)</span> <span class=\"title\">lock</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\terr := em.init()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// CreateRevision ==0 表示key不存在</span></span><br><span class=\"line\">\t<span class=\"comment\">//LOCK:</span></span><br><span class=\"line\">\ttxnResp, err := em.txn.If(clientv3.Compare(clientv3.CreateRevision(em.Key), <span class=\"string\">\"=\"</span>, <span class=\"number\">0</span>)).</span><br><span class=\"line\">\t\tThen(clientv3.OpPut(em.Key, <span class=\"string\">\"\"</span>, clientv3.WithLease(em.leaseID))).Commit()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !txnResp.Succeeded &#123; <span class=\"comment\">//判断txn.if条件是否成立</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">\"抢锁失败\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(em *ETCDMutex)</span> <span class=\"title\">UnLock</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tem.cancel()</span><br><span class=\"line\">\tem.lease.Revoke(context.TODO(), em.leaseID)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"释放了锁\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> conf = clientv3.Config&#123;</span><br><span class=\"line\">\t\tEndpoints:   []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"172.16.196.129:2380\"</span>, <span class=\"string\">\"192.168.50.250:2380\"</span>&#125;,</span><br><span class=\"line\">\t\tDialTimeout: <span class=\"number\">5</span> * time.Second,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\teMutex1 := &amp;ETCDMutex&#123;</span><br><span class=\"line\">\t\tConf: conf,</span><br><span class=\"line\">\t\tTtl:  <span class=\"number\">10</span>,</span><br><span class=\"line\">\t\tKey:  <span class=\"string\">\"lock\"</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\teMutex2 := &amp;ETCDMutex&#123;</span><br><span class=\"line\">\t\tConf: conf,</span><br><span class=\"line\">\t\tTtl:  <span class=\"number\">10</span>,</span><br><span class=\"line\">\t\tKey:  <span class=\"string\">\"lock\"</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//groutine1</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\terr := eMutex1.lock()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"groutine1抢锁失败\"</span>)</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//可以做点其他事，比如访问和操作分布式资源</span></span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"groutine1抢锁成功\"</span>)</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">10</span> * time.Second)</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> eMutex1.UnLock()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//groutine2</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\terr := eMutex2.lock()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"groutine2抢锁失败\"</span>)</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//可以做点其他事，比如访问和操作分布式资源</span></span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"groutine2抢锁成功\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> eMutex2.UnLock()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">30</span> * time.Second)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://studygolang.com/articles/16307?fr=sidebar\" target=\"_blank\" rel=\"noopener\">https://studygolang.com/articles/16307?fr=sidebar</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck9viuwe40000bbflbpmcaen9","category_id":"ck9vh2nwq0009h9fl4sbzzlms","_id":"ck9viuwe70002bbfliw4gd7mj"},{"post_id":"ck9viv10m0003bbfle23nq28q","category_id":"ck9vh2nwf0004h9fl5o1hcswc","_id":"ck9viv10n0005bbflpi537z96"},{"post_id":"ck9viv4w50006bbflqk3l7mew","category_id":"ck9vh2nwz000fh9flaclmewdk","_id":"ck9viv4w80008bbflvtwlkxae"},{"post_id":"ck9vivqjg000bbbfljd9lpawu","category_id":"ck9vh2nx9000th9fl23wx7uc0","_id":"ck9vivqji000ebbflc111zppm"},{"post_id":"ck9vivtel000gbbflzopiufwy","category_id":"ck9vh2nx8000ph9fl7f61h7gk","_id":"ck9vivten000ibbflx4ehceou"},{"post_id":"ck9vivw91000jbbfl4x58496o","category_id":"ck9vh2nx8000ph9fl7f61h7gk","_id":"ck9vivw92000lbbfloqnrh3rb"},{"post_id":"ck9vivyp2000mbbfld9fd0lwu","category_id":"ck9vh2nx6000lh9fl1cw31qod","_id":"ck9vivyp3000obbflmud3yx2o"}],"PostTag":[{"post_id":"ck9viuwe40000bbflbpmcaen9","tag_id":"ck9vh2nwq000ah9flj10reu8w","_id":"ck9viuwe60001bbfl80so8wkp"},{"post_id":"ck9viv10m0003bbfle23nq28q","tag_id":"ck9vh2nwi0005h9flujk610gm","_id":"ck9viv10n0004bbflef9ne7o0"},{"post_id":"ck9viv4w50006bbflqk3l7mew","tag_id":"ck9vh2nwz000gh9flcntzby5a","_id":"ck9viv4w70007bbflk5oegc0k"},{"post_id":"ck9vivqjg000bbbfljd9lpawu","tag_id":"ck9vh6ev00000infliaeiky8s","_id":"ck9vivqjh000cbbflgdnb3jk6"},{"post_id":"ck9vivqjg000bbbfljd9lpawu","tag_id":"ck9vh6ev20001influlryrds7","_id":"ck9vivqji000dbbfls24c2e5z"},{"post_id":"ck9vivqjg000bbbfljd9lpawu","tag_id":"ck9vh6ev20002infl18t2lwe7","_id":"ck9vivqji000fbbflpvsli5th"},{"post_id":"ck9vivw91000jbbfl4x58496o","tag_id":"ck9viw8va0000dgfl8bdk4x39","_id":"ck9viw8vm0003dgfl40uslz58"},{"post_id":"ck9vivw91000jbbfl4x58496o","tag_id":"ck9viw8vi0001dgfl9w51ax6k","_id":"ck9viw8vm0004dgflmt9wqb3k"},{"post_id":"ck9vivyp2000mbbfld9fd0lwu","tag_id":"ck9viw8vl0002dgfl79f3aixr","_id":"ck9viw8vp0007dgfl7va2ftu9"},{"post_id":"ck9vivyp2000mbbfld9fd0lwu","tag_id":"ck9viw8vm0005dgflj4ucw2qc","_id":"ck9viw8vp0008dgflib8iy5u4"},{"post_id":"ck9vivfv20009bbfl1t5z9g4o","tag_id":"ck9viw8vl0002dgfl79f3aixr","_id":"ck9viw8vq000bdgflqa4q3y77"},{"post_id":"ck9vivfv20009bbfl1t5z9g4o","tag_id":"ck9viw8vp0009dgfl74vqr2kl","_id":"ck9viw8vq000cdgfle92dyzy0"},{"post_id":"ck9vivtel000gbbflzopiufwy","tag_id":"ck9viw8va0000dgfl8bdk4x39","_id":"ck9viw8vr000ddgflpijgq4k6"},{"post_id":"ck9vivtel000gbbflzopiufwy","tag_id":"ck9viw8vq000adgflj8zmqg6z","_id":"ck9viw8vr000edgflvopycrcp"}],"Tag":[{"name":"docker","_id":"ck9vh2nwi0005h9flujk610gm"},{"name":"线程 java","_id":"ck9vh2nwq000ah9flj10reu8w"},{"name":" Analytics","_id":"ck9vh2nwz000gh9flcntzby5a"},{"name":"分布式 go","_id":"ck9vh2nx6000mh9flnzav9b9y"},{"name":"分布式 人生思考","_id":"ck9vh2nx8000qh9fl69w1rnvg"},{"name":"k8s 容器网络","_id":"ck9vh2nx9000uh9flagdnr32m"},{"name":"Go epoll linux","_id":"ck9vh2nxb000yh9flf6wfmjs6"},{"name":"k8s iptables","_id":"ck9vh2nxe0011h9fle5ata250"},{"name":"client-go","_id":"ck9vh2nxf0014h9fljnjp1bh4"},{"name":"informer","_id":"ck9vh2nxg0016h9fl0c4gjpej"},{"name":"Go","_id":"ck9vh6ev00000infliaeiky8s"},{"name":"epoll","_id":"ck9vh6ev20001influlryrds7"},{"name":"linux","_id":"ck9vh6ev20002infl18t2lwe7"},{"name":"k8s","_id":"ck9viw8va0000dgfl8bdk4x39"},{"name":"容器网络","_id":"ck9viw8vi0001dgfl9w51ax6k"},{"name":"分布式","_id":"ck9viw8vl0002dgfl79f3aixr"},{"name":"go","_id":"ck9viw8vm0005dgflj4ucw2qc"},{"name":"人生思考","_id":"ck9viw8vp0009dgfl74vqr2kl"},{"name":"iptables","_id":"ck9viw8vq000adgflj8zmqg6z"}]}}